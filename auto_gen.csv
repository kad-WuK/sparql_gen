text
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of hotels in each administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The number of hotels group by administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many hotels in each administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of hotels in the Netherlands group by administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of museums in each administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The number of museums in each administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many museums in each administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of museums in the Netherlands group by administrative area.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?address) as ?number) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ?name. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.} GROUP BY ?name"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the mosques of administrative area where street address 't Emmerrik 25 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Emmerrik 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the mosques of administrative area where street address Oude Hof 15 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oude Hof 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the mosques of administrative area where street address Peppengouw 176 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Peppengouw 176""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the mosques of administrative area where street address Lellensterweg 22 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lellensterweg 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the mosques of administrative area where street address Van Panhuyslaan 4 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Van Panhuyslaan 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the mosques of administrative area where street address Constant Permekehof 35 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Constant Permekehof 35""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the mosques of administrative area where street address Wipmolenweg 233 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 233""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the mosques of administrative area where street address Barthold Entensweg 19 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Barthold Entensweg 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the mosques of administrative area where street address Gouden Pand 2 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gouden Pand 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the mosques of administrative area where street address Broerstraat 2 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Broerstraat 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Hippolytuslaan 2C is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hippolytuslaan 2C""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the mosques in the administrative area that street address Touwslagerhof 7 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Touwslagerhof 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Wijmersweg 5 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijmersweg 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Rondostraat 43 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rondostraat 43""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Solwerderstraat 94 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Solwerderstraat 94""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the mosques in the administrative area that street address Schoolwerf 210 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schoolwerf 210""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Walmolenstraat 14 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Walmolenstraat 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address de Gorn 42 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""de Gorn 42""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Pulvertorenstraat 1-160 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pulvertorenstraat 1-160""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the mosques in the administrative area that street address Johan Lewestraat 16 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Johan Lewestraat 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Veendamstraat 30 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Veendamstraat 30""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in administrative area where street address Nova Zemblastraat 43 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nova Zemblastraat 43""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in administrative area where street address Fluitekruidstraat 37 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Fluitekruidstraat 37""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Oostvaardersdiep 4 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oostvaardersdiep 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Bovendijks 7 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bovendijks 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Stadswerf 26 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadswerf 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Oostersingel 3 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oostersingel 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Spant 12 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spant 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Mosques in administrative area where street address Tuinbouwstraat 15 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tuinbouwstraat 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in administrative area where street address Clemenceaustraat 109 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clemenceaustraat 109""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show mosques of administrative area that street adress Meester J. Tuintjerstraat 4 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Meester J. Tuintjerstraat 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Symfoniestraat 21 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Symfoniestraat 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show mosques of administrative area that street adress Isla Margaritastraat 39 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Isla Margaritastraat 39""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Oosterheerdtstraat 7 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oosterheerdtstraat 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Melkdistelstraat 34 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Melkdistelstraat 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Smydingheweg 10 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Smydingheweg 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Maaspad 14 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Maaspad 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Distelweg 79 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Distelweg 79""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of administrative area that street adress Veendamstraat 31 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Veendamstraat 31""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show mosques of administrative area that street adress Distelweg 109 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Distelweg 109""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show mosques of the administrative area where street address Constant Permekehof 20 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Constant Permekehof 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address Heerdlaan 31 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Heerdlaan 31""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address Hoofddiep 1 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofddiep 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address Overstag 8 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overstag 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show mosques of the administrative area where street address Rikki Visserstraat 4 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rikki Visserstraat 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address Supremesstraat 16 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Supremesstraat 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show mosques of the administrative area where street address Nova Zemblastraat 18 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nova Zemblastraat 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address Kromgouw 93 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kromgouw 93""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address IJsselpad 1 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""IJsselpad 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show mosques of the administrative area where street address Geldropstraat 1 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Geldropstraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Rock and Rollstraat 17 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rock and Rollstraat 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the churches of administrative area where street address Wilgengriend 147 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wilgengriend 147""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Baarsweg 9 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Baarsweg 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Schottegat 11 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schottegat 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Peppengouw 212 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Peppengouw 212""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address de Haspel 15 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""de Haspel 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show the churches of administrative area where street address Damsterweg 39 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Damsterweg 39""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Jivestraat 48 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jivestraat 48""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Wezelstraat 5 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wezelstraat 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the churches of administrative area where street address Johan Lewestraat 12 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Johan Lewestraat 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the churches in the administrative area that street address Derk Nanningstraat 6a is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Derk Nanningstraat 6a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the churches in the administrative area that street address Heiliggravenweg 27 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Heiliggravenweg 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the churches in the administrative area that street address Hoge Traan 22b is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoge Traan 22b""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the churches in the administrative area that street address Hengelostraat 84 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hengelostraat 84""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the churches in the administrative area that street address Clingendaellaan 95 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 95""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the churches in the administrative area that street address Lelietje-van-Dalenstraat 14 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lelietje-van-Dalenstraat 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the churches in the administrative area that street address Bosgouw 102 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosgouw 102""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the churches in the administrative area that street address Hengelostraat 81 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hengelostraat 81""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the churches in the administrative area that street address Wessel Ilckenstraat 63 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wessel Ilckenstraat 63""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
What are the churches in the administrative area that street address Nat King Colestraat 27 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nat King Colestraat 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Populierenstraat 15 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Populierenstraat 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Atheneplantsoen 22 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Atheneplantsoen 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Texelstraat 5 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Texelstraat 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in administrative area where street address Tuinbouwstraat 57 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tuinbouwstraat 57""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Stadswerf 28 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadswerf 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Amelisweerdpad 50 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Amelisweerdpad 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in administrative area where street address Distelweg 34 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Distelweg 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Den 22 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Den 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in administrative area where street address Runmolenstraat 79 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Runmolenstraat 79""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Churches in administrative area where street address Grachtstraat 21 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Grachtstraat 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress Oslostraat 33 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oslostraat 33""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress Wijmerspad 39 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijmerspad 39""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of administrative area that street adress Van Panhuyslaan 10 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Van Panhuyslaan 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress 't Zuden 74 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Zuden 74""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress Dobbe 23 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dobbe 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress Tolbertervaart 11 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tolbertervaart 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress Meidoornstraat 5 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Meidoornstraat 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of administrative area that street adress Fivelweg 83 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Fivelweg 83""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of administrative area that street adress De Specerij 60 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Specerij 60""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of administrative area that street adress Arnhemplein 46 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Arnhemplein 46""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of the administrative area where street address Dobbe 29 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dobbe 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of the administrative area where street address Stadsweg 50 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadsweg 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of the administrative area where street address Clingendaellaan 147 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 147""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show churches of the administrative area where street address Quickstepstraat 10 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Quickstepstraat 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of the administrative area where street address P. Ellingstraat 25 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""P. Ellingstraat 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of the administrative area where street address Overgouw 72 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 72""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show churches of the administrative area where street address Albrecht Dürerweg 90 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Albrecht Dürerweg 90""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of the administrative area where street address Klokkeluiderstraat 23 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Klokkeluiderstraat 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of the administrative area where street address Sidderaalpad 17 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sidderaalpad 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show churches of the administrative area where street address Weersterweg 3 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Weersterweg 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address Sneeuwklokjestraat 20 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sneeuwklokjestraat 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address Partitastraat 10 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Partitastraat 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address Zuidwoldepad 22 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zuidwoldepad 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the post offices of administrative area where street address Willem de Vlaminghstraat 134 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Willem de Vlaminghstraat 134""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address De Paasweide 72-406 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Paasweide 72-406""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address Trilgrasstraat 1 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Trilgrasstraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address De Paasweide 11 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Paasweide 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address Klaproosstraat 1 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Klaproosstraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the post offices of administrative area where street address Dwangmolenstraat 107 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dwangmolenstraat 107""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show the post offices of administrative area where street address J.T.P. Bijhouwerhof 49 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""J.T.P. Bijhouwerhof 49""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Kerkweg 25 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kerkweg 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Rapsodieplantsoen 7 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rapsodieplantsoen 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Peppengouw 195 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Peppengouw 195""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Bosgouw 89 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosgouw 89""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the post offices in the administrative area that street address Stadswerf 49 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadswerf 49""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Kwekersweg 13 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kwekersweg 13""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Sweelinckplantsoen 32 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sweelinckplantsoen 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address De Holm 14 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Holm 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
What are the post offices in the administrative area that street address Bosgouw 80 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosgouw 80""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the post offices in the administrative area that street address Isla Margaritastraat 85 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Isla Margaritastraat 85""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Post office in administrative area where street address Harderwijkoever 51 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harderwijkoever 51""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Post office in administrative area where street address S. van Ravesteynstraat 110 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""S. van Ravesteynstraat 110""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Post office in administrative area where street address Evenaar 154 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Evenaar 154""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Post office in administrative area where street address Hemonystraat 14 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hemonystraat 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Post office in administrative area where street address Wijkstraat 61 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijkstraat 61""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Post office in administrative area where street address Onno van Ewsumlaan 1B located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Onno van Ewsumlaan 1B""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post office in administrative area where street address Roer 26 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Roer 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post office in administrative area where street address Tenerifestraat 7 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tenerifestraat 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post office in administrative area where street address Noordersingel 15 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Noordersingel 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Post office in administrative area where street address Nova Zemblastraat 33 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nova Zemblastraat 33""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Oudestreek 63 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oudestreek 63""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Prokofjevstraat 40 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Prokofjevstraat 40""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post office of administrative area that street adress Pieter Bieremastraat 2 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pieter Bieremastraat 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Harmoniestraat 14 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harmoniestraat 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Vincent van Goghstraat 180 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vincent van Goghstraat 180""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post office of administrative area that street adress S. van Ravesteynstraat 130 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""S. van Ravesteynstraat 130""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Pomonaweg 28 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pomonaweg 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Waalstraat 70 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Waalstraat 70""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post office of administrative area that street adress Berlijnstraat 66 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Berlijnstraat 66""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show post office of administrative area that street adress Hoofdstraat 135 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 135""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show post offices of the administrative area where street address Elburgkade 45 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Elburgkade 45""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post offices of the administrative area where street address Kathleen Ferrierstraat 117 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kathleen Ferrierstraat 117""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show post offices of the administrative area where street address Singel 26 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Singel 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post offices of the administrative area where street address Wirdumermeedenweg 3A is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wirdumermeedenweg 3A""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post offices of the administrative area where street address Rimsky-Korssakovweg 117 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rimsky-Korssakovweg 117""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show post offices of the administrative area where street address Hefbrugweg 20 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hefbrugweg 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show post offices of the administrative area where street address Churchillweg 18 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Churchillweg 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post offices of the administrative area where street address Damsterweg 45 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Damsterweg 45""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show post offices of the administrative area where street address Oldewierde 32 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oldewierde 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show post offices of the administrative area where street address Sint Annastraat 2 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sint Annastraat 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show the hotels of administrative area where street address Evenaar 130 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Evenaar 130""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Bedumerweg 24 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bedumerweg 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show the hotels of administrative area where street address Springendallaan 45 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Springendallaan 45""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show the hotels of administrative area where street address Oranje Pan 8 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oranje Pan 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Cissy van Marxveldtstraat 89 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Cissy van Marxveldtstraat 89""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Ranonkelpad 10 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ranonkelpad 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Menkemaborgstraat 5 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Menkemaborgstraat 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Overstag 12 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overstag 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Vlissingenstraat 60 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vlissingenstraat 60""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the hotels of administrative area where street address Count Basiestraat 40 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Count Basiestraat 40""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Catalpastraat 42 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Catalpastraat 42""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Ossenlaan 1 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ossenlaan 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotels in the administrative area that street address Wipmolenweg 261 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 261""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Bosgouw 245 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosgouw 245""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Salsastraat 80 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Salsastraat 80""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Groensingel 40 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Groensingel 40""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotels in the administrative area that street address Hoendiep ZZ 34 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoendiep ZZ 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Count Basiestraat 52 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Count Basiestraat 52""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the hotels in the administrative area that street address Oldebertweg 61-41 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oldebertweg 61-41""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotels in the administrative area that street address 't Oelbred 56 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Oelbred 56""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in administrative area where street address Kromgouw 78 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kromgouw 78""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address Sjuxumerweg 47 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sjuxumerweg 47""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address Peppengouw 180 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Peppengouw 180""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address Weersterweg 10 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Weersterweg 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address de Gorn 34 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""de Gorn 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in administrative area where street address Noordeinde 173 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Noordeinde 173""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address Plecht 38 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Plecht 38""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address Pekelmeerpad 14 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pekelmeerpad 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address W. Bruinstraat 91 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""W. Bruinstraat 91""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in administrative area where street address Hebridenstraat 50 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hebridenstraat 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Hoogstraatje 9 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoogstraatje 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotels of administrative area that street adress Adriaan Clantstraat 5 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Adriaan Clantstraat 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Rondostraat 40 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rondostraat 40""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Bremerweg 25 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bremerweg 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Atheneplantsoen 62 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Atheneplantsoen 62""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Overgouw 75 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 75""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotels of administrative area that street adress 2e Barthold Entensdwarsweg 5 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""2e Barthold Entensdwarsweg 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotels of administrative area that street adress Tolberterstraat 35b in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tolberterstraat 35b""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Rijksweg 19 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rijksweg 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of administrative area that street adress Oslostraat 19 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oslostraat 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotels of the administrative area where street address Oude Schoolsterweg 20 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oude Schoolsterweg 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Holbeinstraat 49 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Holbeinstraat 49""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Diligencelaan 11 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Diligencelaan 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Johan Fabriciusstraat 21 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Johan Fabriciusstraat 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Nienoordshaven 39 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nienoordshaven 39""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Molenweg 4 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Molenweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Liedestraat 1 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Liedestraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Ossendrechtstraat 8 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ossendrechtstraat 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotels of the administrative area where street address Thomas A. Verdeniusstraat 8 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Thomas A. Verdeniusstraat 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area where street address Parkwerf 46 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Parkwerf 46""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show the museums of administrative area where street address Floris Versterstraat 22 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Floris Versterstraat 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Singel 7 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Singel 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Rondweg 15 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rondweg 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Helmstok 23 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Helmstok 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Vollenhoveschans 82 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vollenhoveschans 82""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Singelweg 10 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Singelweg 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show the museums of administrative area where street address Bosweg 19 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosweg 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Wipmolenweg 123 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 123""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the museums of administrative area where street address Jaap ter Haarstraat 89 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jaap ter Haarstraat 89""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show the museums of administrative area where street address Bob Marleystraat 6 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bob Marleystraat 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What is the museums in the administrative area that street address Olstgracht 145 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Olstgracht 145""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What is the museums in the administrative area that street address Achterwerf 102 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Achterwerf 102""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Spanderswoudstraat 29 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spanderswoudstraat 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What is the museums in the administrative area that street address Olstgracht 151 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Olstgracht 151""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Heiliggravenweg 13 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Heiliggravenweg 13""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Wittewerf 17 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wittewerf 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Waalstraat 171 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Waalstraat 171""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Rondostraat 45 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rondostraat 45""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Spant 16 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spant 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the museums in the administrative area that street address Potklei 16 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Potklei 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Museum in administrative area where street address Helmstok 1 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Helmstok 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address Gouden Pand 6 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gouden Pand 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Museum in administrative area where street address Rimsky-Korssakovweg 177 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rimsky-Korssakovweg 177""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address Floris Versterstraat 52 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Floris Versterstraat 52""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address Bedumerweg 43 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bedumerweg 43""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address Wessel Ilckenstraat 165 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wessel Ilckenstraat 165""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address 't Kaarnhuus 19 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Kaarnhuus 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address Floris Versterstraat 105 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Floris Versterstraat 105""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Museum in administrative area where street address Gerichtsweg 2 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gerichtsweg 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museum in administrative area where street address Urkwal 82 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Urkwal 82""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of administrative area that street adress Stadsweg 47 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadsweg 47""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of administrative area that street adress Populierenstraat 28 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Populierenstraat 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of administrative area that street adress Clingendaellaan 257 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 257""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of administrative area that street adress Jimi Hendrixstraat 63 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jimi Hendrixstraat 63""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of administrative area that street adress Hebridenstraat 10 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hebridenstraat 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of administrative area that street adress 't Emmerrik 12 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Emmerrik 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of administrative area that street adress Banjostraat 29 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Banjostraat 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of administrative area that street adress Moutmolenstraat 22 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Moutmolenstraat 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of administrative area that street adress Oudestreek 24 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oudestreek 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of administrative area that street adress Samuël Leviestraat 50 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Samuël Leviestraat 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where street address Solwerderstraat 54a is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Solwerderstraat 54a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where street address Bovendijks 21 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bovendijks 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of the administrative area where street address Leemwierde 205 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Leemwierde 205""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where street address Zalmplein 26 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zalmplein 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of the administrative area where street address Wittewerf 107 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wittewerf 107""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of the administrative area where street address Huizingerweg 64 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Huizingerweg 64""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where street address het Koetshuis 1-5 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""het Koetshuis 1-5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where street address Moergestelstraat 1 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Moergestelstraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where street address Maaspad 20 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Maaspad 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of the administrative area where street address Otterstraat 69 is located.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Otterstraat 69""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the geometry of administrative area where street address Pinksterbloemweg 142 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pinksterbloemweg 142""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the geometry of administrative area where street address Munnikevaart 32 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Munnikevaart 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the geometry of administrative area where street address Harpstraat 24 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harpstraat 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the geometry of administrative area where street address Slufterplantsoen 39 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Slufterplantsoen 39""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the geometry of administrative area where street address Wilgengriend 168 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wilgengriend 168""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the geometry of administrative area where street address Clingendaellaan 115 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 115""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the geometry of administrative area where street address Mesdagstraat 34 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Mesdagstraat 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the geometry of administrative area where street address Okerstraat 18 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Okerstraat 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the geometry of administrative area where street address Korenlaan 20 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Korenlaan 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the geometry of administrative area where street address C. van Eesterenplein 232 is in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""C. van Eesterenplein 232""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the geometry of administrative area that street address Goedewerf 133 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Goedewerf 133""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address het Koetshuis 1-18 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""het Koetshuis 1-18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address Constant Permekehof 28 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Constant Permekehof 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address Noorderweg 19 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Noorderweg 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the geometry of administrative area that street address Bartokweg 21 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bartokweg 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address Guadeloupestraat 101 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Guadeloupestraat 101""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address Hofmark 249 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hofmark 249""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What is the geometry of administrative area that street address Wolveschans 16 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wolveschans 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address Wipmolenweg 365 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 365""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the geometry of administrative area that street address Spitsbergen 50 in?

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spitsbergen 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Geometry of administrative area where street address Oudestreek 57 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oudestreek 57""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Geometry of administrative area where street address Oranjeweg 8 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oranjeweg 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Geometry of administrative area where street address Otterstraat 85 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Otterstraat 85""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Geometry of administrative area where street address Clingendaellaan 101 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 101""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Geometry of administrative area where street address Basilicumweg 40 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Basilicumweg 40""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Geometry of administrative area where street address 't Oelbred 42 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Oelbred 42""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Geometry of administrative area where street address Paul Kleestraat 224 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Paul Kleestraat 224""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Geometry of administrative area where street address Sportmark 37 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sportmark 37""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Geometry of administrative area where street address Keiwierde 7 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Keiwierde 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, geo, geometry
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Geometry of administrative area where street address Bosanemoon 11 located in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosanemoon 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Kweldergrasveld 19 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kweldergrasveld 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Lavendelplantsoen 1 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lavendelplantsoen 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Parkwerf 71 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Parkwerf 71""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Pinksterbloemweg 122 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pinksterbloemweg 122""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Kolkplein 20 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kolkplein 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Helmstok 27 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Helmstok 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Burgemeester Van der Munnikstraat 2 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Burgemeester Van der Munnikstraat 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Tongstraat 38 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tongstraat 38""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Rumbastraat 6 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rumbastraat 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of administrative area that street adress Kwekersstraat 9 in.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kwekersstraat 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Hoeksmeersterweg 2 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoeksmeersterweg 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Moskoustraat 41 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Moskoustraat 41""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Burgemeester Van der Munnikstraat 1 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Burgemeester Van der Munnikstraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Harderwijkoever 90 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harderwijkoever 90""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Tolberterstraat 54 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tolberterstraat 54""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Delleweg 9 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Delleweg 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Oosterstraat 48 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oosterstraat 48""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, geo, geometry
Administrative Area, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Hemonystraat 21 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hemonystraat 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Veendamstraat 31 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Veendamstraat 31""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, geo, geometry


Now we have a natural language question: 
Show geometry of the administrative area where street address Beursjeskruidstraat 16 is located.

The corresponding sparql query is:
SELECT DISTINCT ?geo WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Beursjeskruidstraat 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:geo ?geo }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Westersingel 58 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Westersingel 58""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Overgouw 59 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 59""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Tasjeskruidstraat 12 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tasjeskruidstraat 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Wilgenlaan 5 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wilgenlaan 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Buntgrasstraat 5 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Buntgrasstraat 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address J.T.P. Bijhouwerhof 135 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""J.T.P. Bijhouwerhof 135""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Zadkinestraat 84 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zadkinestraat 84""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Leemwierde 129E is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Leemwierde 129E""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Brancusistraat 77 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Brancusistraat 77""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area where street address Schapenmeent 127 is in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schapenmeent 127""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Maandenweg 41 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Maandenweg 41""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Oliemolenstraat 69 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oliemolenstraat 69""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Kwekersstraat 10 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kwekersstraat 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Florastraat 8 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Florastraat 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Waalstraat 52 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Waalstraat 52""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address 't Zuden 77 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Zuden 77""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Geertruida Alberdastraat 11 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Geertruida Alberdastraat 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Cazemiershof 19 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Cazemiershof 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address Sesamstraat 56 is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sesamstraat 56""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places of administrative area that street address de Dam 2a is in?

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""de Dam 2a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Number of places of administrative area where Voorwerksterpad 1 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Voorwerksterpad 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Number of places of administrative area where Purmerweg 10 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Purmerweg 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel
Place, Address, Postal Address


Now we have a natural language question: 
Number of places of administrative area where Wirdumerweg 85 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wirdumerweg 85""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, City Hall
Place, Address, Postal Address


Now we have a natural language question: 
Number of places of administrative area where Elvis Presleystraat 24 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Elvis Presleystraat 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Number of places of administrative area where Gezellenhof 79 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gezellenhof 79""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Number of places of administrative area where Distelweg 115 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Distelweg 115""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Number of places of administrative area where Harderwijkoever 82 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harderwijkoever 82""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Number of places of administrative area where Schansweg 1A located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schansweg 1A""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Number of places of administrative area where Dag Hammarskjöldhof 32 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dag Hammarskjöldhof 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Number of places of administrative area where Mensumaweg 11 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Mensumaweg 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress 't Kaarnhuus 9 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Kaarnhuus 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Sneeuwklokjestraat 38 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sneeuwklokjestraat 38""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress het Koetshuis 4d in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""het Koetshuis 4d""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Kersenboom 32 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kersenboom 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Middelburghof 8 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Middelburghof 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show number of palces of administrative area that street adress Onno van Ewsumlaan 1G in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Onno van Ewsumlaan 1G""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Gerichtsweg 2 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gerichtsweg 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Walmolenstraat 38 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Walmolenstraat 38""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Schoolweg 13 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schoolweg 13""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of palces of administrative area that street adress Pulvertorenstraat 1-152 in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pulvertorenstraat 1-152""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Rock and Rollstraat 17 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rock and Rollstraat 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Poldermolenweg 192 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Poldermolenweg 192""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Allardsoogsterweg 1 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Allardsoogsterweg 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address De Schelp 28 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Schelp 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Vlissingenstraat 98 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vlissingenstraat 98""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Hofmark 264 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hofmark 264""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Dorpsstraat 47 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dorpsstraat 47""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Kerkeweg 16D located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kerkeweg 16D""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Klaproosstraat 17 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Klaproosstraat 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of places of administrative area that street address Oslostraat 23 located in.

The corresponding sparql query is:
SELECT DISTINCT (count(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oslostraat 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Markerkant 12 2B is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Markerkant 12 2B""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Feithsweg 7 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Feithsweg 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Oosterheerdtstraat 7 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oosterheerdtstraat 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Hoofdstraat 72 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 72""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Oldebertweg 61-14 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oldebertweg 61-14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Hofmark 12 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hofmark 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Rock and Rollstraat 15 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rock and Rollstraat 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Borchplantsoen 5 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Borchplantsoen 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Heerestraat 15 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Heerestraat 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Grote Markt 10 is in, floor size smaller than 469

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Grote Markt 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 469)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Rosmolenstraat 31 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rosmolenstraat 31""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Hoofdstraat 21 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address De Hooizolder 10 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Hooizolder 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Kwekersstraat 9 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kwekersstraat 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Spoordreef 27 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spoordreef 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Zwinpad 30 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zwinpad 30""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Monteverdistraat 24 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Monteverdistraat 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address De Hooizolder 62m is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Hooizolder 62m""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Cissy van Marxveldtstraat 124 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Cissy van Marxveldtstraat 124""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Ladderbaai 10 is in, the floor size should smaller than 227 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ladderbaai 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 227)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Stationsstraat 40a located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stationsstraat 40a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Keiwierde 73A located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Keiwierde 73A""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Hendrik Werkmanstraat 36 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hendrik Werkmanstraat 36""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Poldermolenweg 116 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Poldermolenweg 116""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Geldropstraat 43 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Geldropstraat 43""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Places of administrative area where Beatrixweg 1 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Beatrixweg 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where P. Ellingstraat 7 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""P. Ellingstraat 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Sidderaalpad 29 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sidderaalpad 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Places of administrative area where Steeplechase 17 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Steeplechase 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Olstgracht 75 located in, floor size smaller than 436 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Olstgracht 75""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 436)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Slufterplantsoen 131 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Slufterplantsoen 131""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Ockingeheemlaan 8 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ockingeheemlaan 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Prokofjevstraat 80 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Prokofjevstraat 80""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Boelijn 60 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Boelijn 60""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Noordersingel 23 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Noordersingel 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Clingendaellaan 111 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 111""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress C. van Eesterenplein 200 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""C. van Eesterenplein 200""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Parkwerf 119 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Parkwerf 119""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Pasop 26 in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pasop 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Wijkstraat 37a in, the floor size should smaller than 209 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijkstraat 37a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 209)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Zaagvisplantsoen 48 located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zaagvisplantsoen 48""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Bolmeer 8 located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bolmeer 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Euroweg 54-I located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Euroweg 54-I""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Rondostraat 54 located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rondostraat 54""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Harderwijkoever 127 located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harderwijkoever 127""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Lutjerijp 3 located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lutjerijp 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Josephine Bakerstraat 7A located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Josephine Bakerstraat 7A""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address het Koetshuis 13a located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""het Koetshuis 13a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Wittewerf 73 located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wittewerf 73""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Westersingel 68a located in, floor size no larger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Westersingel 68a""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 279)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Oude Hof 46 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oude Hof 46""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Stadsweg 106 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadsweg 106""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Westersingel 70e is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Westersingel 70e""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Wijkstraat 23 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijkstraat 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address A.D. van Eckstraat 38 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""A.D. van Eckstraat 38""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address 't Oelbred 30 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Oelbred 30""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address J.S. Bachweg 60 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""J.S. Bachweg 60""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Hofmark 74 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hofmark 74""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Koningstraat 19 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Koningstraat 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Oudestreek 20 is in, floor size larger than 70

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oudestreek 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Wilgengriend 152 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wilgengriend 152""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Kwartaalstraat 44 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kwartaalstraat 44""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Stadswerf 117 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadswerf 117""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Markerkant 14 2 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Markerkant 14 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Evenaar 122 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Evenaar 122""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address 't Oelbred 54 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Oelbred 54""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Oudestreek 32 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oudestreek 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Borgweg 28 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Borgweg 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Samuël Leviestraat 18 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Samuël Leviestraat 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Maandenweg 64 is in, the floor size should bigger than 52 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Maandenweg 64""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Symfoniestraat 15 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Symfoniestraat 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Symfoniestraat 17 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Symfoniestraat 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Places of administrative area where Boelijn 24 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Boelijn 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel
Place, floorSize, floor Size


Now we have a natural language question: 
Places of administrative area where Cantatestraat 9 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Cantatestraat 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel
Place, floorSize, floor Size


Now we have a natural language question: 
Places of administrative area where Boxtelplein 4 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Boxtelplein 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Runmolenstraat 71 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Runmolenstraat 71""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Places of administrative area where Karshofweg 9 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Karshofweg 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Pruimenhof 15 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pruimenhof 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where J.S. Bachweg 5E located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""J.S. Bachweg 5E""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Places of administrative area where Solwerderstraat 69 located in, floor size bigger than 163 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Solwerderstraat 69""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Springendallaan 33 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Springendallaan 33""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Distelweg 3 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Distelweg 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Fluitekruidstraat 57 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Fluitekruidstraat 57""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Zaagvisplantsoen 16 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zaagvisplantsoen 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Rosarium 125 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rosarium 125""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Adrianus Simmelinkstraat 12 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Adrianus Simmelinkstraat 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress A.D. van Eckstraat 24 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""A.D. van Eckstraat 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Oostersingel 3 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oostersingel 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Netweg 48 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Netweg 48""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Quickstepstraat 62 in, the floor size should larger than 171 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Quickstepstraat 62""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 171)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Forelstraat 58 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Forelstraat 58""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Couperinstraat 8 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Couperinstraat 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Guadeloupestraat 73 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Guadeloupestraat 73""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Sportmark 73 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sportmark 73""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Spitsbergen 79 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spitsbergen 79""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Schelvisstraat 12 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schelvisstraat 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address 't Oelbred 54 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Oelbred 54""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Clingendaellaan 115 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Clingendaellaan 115""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Lintgrasstraat 51 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lintgrasstraat 51""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Van Panhuyslaan 14 located in, floor size no smaller than 63.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Van Panhuyslaan 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Hoofdstraat 182 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 182""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of administrative area where street address Bob Marleystraat 1 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bob Marleystraat 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Berk 22 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Berk 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Deventerpad 45 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Deventerpad 45""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of administrative area where street address Saxofoonweg 147 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Saxofoonweg 147""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address de Wiecken 11 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""de Wiecken 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address 't Kaarnhuus 16 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Kaarnhuus 16""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area where street address Swingstraat 55 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Swingstraat 55""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of administrative area where street address Bosweg 20 is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosweg 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of administrative area where street address Bosweg 4b is in, floor size between 180 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosweg 4b""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 180 && ?floorsize <= 285)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Wilgengriend 35 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wilgengriend 35""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address 't Kaarnhuus 2 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Kaarnhuus 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Hoofdstraat 196 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 196""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Dieftilweg 15 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dieftilweg 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Kornwierde 6 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kornwierde 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Bolwerk 8b is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bolwerk 8b""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Divertimentostraat 59 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Divertimentostraat 59""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Moskoustraat 78 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Moskoustraat 78""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Cissy van Marxveldtstraat 101 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Cissy van Marxveldtstraat 101""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What are places of administrative area that street address Veldzicht 21 is in, the floor size should bigger than 58 but smaller than 494

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Veldzicht 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 494)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Wijkstraat 57 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijkstraat 57""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Watermolenstraat 70 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Watermolenstraat 70""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where G.A. Overdijkinkstraat 104 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""G.A. Overdijkinkstraat 104""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Munnikevaart 30 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Munnikevaart 30""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Places of administrative area where Peppengouw 124 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Peppengouw 124""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Olstgracht 24 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Olstgracht 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Oude Boor 6 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oude Boor 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Forelstraat 25 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Forelstraat 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, additionalType, City Hall
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Jimi Hendrixstraat 56 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jimi Hendrixstraat 56""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Slufterplantsoen 91 located in, floor size between 52 and 204 squared meters

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Slufterplantsoen 91""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 204)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Tolbertervaart 6v in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tolbertervaart 6v""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Populierenstraat 10 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Populierenstraat 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Fluitekruidstraat 29 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Fluitekruidstraat 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress De Hoogte 5 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Hoogte 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Sidoniastraat 2 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sidoniastraat 2""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Sportmark 69 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sportmark 69""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Zeerijperweg 5A in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zeerijperweg 5A""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Palingweg 66 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Palingweg 66""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Lijzijde 27 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lijzijde 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area that street adress Tolweg 8 in, the floor size should between 125 and 266 m2

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tolweg 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 266)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Florastraat 6 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Florastraat 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Schreiershoek 17 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schreiershoek 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Coendersborgstraat 25 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Coendersborgstraat 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Grote Markt 179 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Grote Markt 179""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Draaibrugweg 6 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Draaibrugweg 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Wijkstraat 77 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wijkstraat 77""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Stationsweg 3 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stationsweg 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Kolkgriend 68 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kolkgriend 68""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address Buntgrasstraat 11 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Buntgrasstraat 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show places of administrative area that street address de Haspel 29 located in, floor size between 117 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""de Haspel 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 481)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address De Wierde 44 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Wierde 44""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Vosplantsoen 42 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vosplantsoen 42""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Westersingel 70c is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Westersingel 70c""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Oudestreek 14 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oudestreek 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Mallorcastraat 49 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Mallorcastraat 49""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Kornwierde 171 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kornwierde 171""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Sneeuwklokjestraat 42 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sneeuwklokjestraat 42""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Elvis Presleystraat 50 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Elvis Presleystraat 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Julianaweg 10 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Julianaweg 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Wipmolenweg 201 is in, date created earlier than 1804.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 201""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Moskoustraat 33 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Moskoustraat 33""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Wipmolenweg 365 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 365""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Spanderswoudstraat 27 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Spanderswoudstraat 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Lageland 4 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lageland 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Wipmolenweg 283 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 283""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Jaap ter Haarstraat 6 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jaap ter Haarstraat 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Poldermolenweg 192 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Poldermolenweg 192""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Gijs Gansstraat 9 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gijs Gansstraat 9""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address 't Hoge Heem 7 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Hoge Heem 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Bob Marleystraat 25 is in, date created should earlier than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bob Marleystraat 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Kolkgriend 46 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kolkgriend 46""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Borodinstraat 50 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Borodinstraat 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Sint Annastraat 6 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sint Annastraat 6""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Oslostraat 35 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oslostraat 35""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Jaap ter Haarstraat 83 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jaap ter Haarstraat 83""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Dwangmolenstraat 23 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dwangmolenstraat 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Lijzijde 34 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lijzijde 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Kalverstraat 3 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kalverstraat 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Klokkeluiderstraat 15 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Klokkeluiderstraat 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Snoekstraat 14 located in, date created should earlier than 1896.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Snoekstraat 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area that street adress Verfmolenstraat 80 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Verfmolenstraat 80""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area that street adress Vijf Akkers 47 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vijf Akkers 47""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area that street adress Kersenboom 26 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kersenboom 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area that street adress Harderwijkoever 37 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harderwijkoever 37""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area that street adress Wipmolenweg 109 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 109""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Sprotstraat 22 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sprotstraat 22""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area that street adress Stationsstraat 23 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stationsstraat 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Churchillweg 5 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Churchillweg 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Bosgouw 164 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bosgouw 164""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Ockingeheemlaan 25 in, date created no later than than 1918

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ockingeheemlaan 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Overgouw 104 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 104""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Springendallaan 55 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Springendallaan 55""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Urkwal 86 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Urkwal 86""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Westersingel 70b located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Westersingel 70b""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Floris Versterstraat 25 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Floris Versterstraat 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Schipsloot 15 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Schipsloot 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Forelstraat 42 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Forelstraat 42""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address B. Merkelbachstraat 51 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""B. Merkelbachstraat 51""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Atheneplantsoen 31 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Atheneplantsoen 31""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Allendestraat 14 located in, date created should earlier than 1948.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Allendestraat 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Euphoniumweg 5 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Euphoniumweg 5""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Kruisweg 4 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kruisweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Olstgracht 34 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Olstgracht 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Munnikevaart 8 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Munnikevaart 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Hoofdstraat 115 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 115""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Jan Rijksenstraat 83 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jan Rijksenstraat 83""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Kolkgriend 63 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kolkgriend 63""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Hordeloop 10 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hordeloop 10""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Solwerderstraat 12 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Solwerderstraat 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area where street address Atheneplantsoen 60 is in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Atheneplantsoen 60""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Churchillpad 8 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Churchillpad 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Crangeweersterweg 4 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Crangeweersterweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Wisselweg 302 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wisselweg 302""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Nat King Colestraat 30 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nat King Colestraat 30""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Wipmolenweg 283 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 283""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address A.D. van Eckstraat 40 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""A.D. van Eckstraat 40""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Holbeinstraat 35 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Holbeinstraat 35""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Sibeliuspad 24 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sibeliuspad 24""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Auwemalaan 153 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Auwemalaan 153""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places of administrative area that street address Rijksweg 47 is in?

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Rijksweg 47""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Peppengouw 214 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Peppengouw 214""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Churchillweg 86 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Churchillweg 86""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Boerdamsterweg 43 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Boerdamsterweg 43""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Carolieweg 26 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Carolieweg 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Damsluisweg 29 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Damsluisweg 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Places of administrative area where Pieter van Damstraat 3 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pieter van Damstraat 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Berlijnstraat 72 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Berlijnstraat 72""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Blekerstraat 149 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Blekerstraat 149""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Places of administrative area where Gershwinstraat 50 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Gershwinstraat 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Places of administrative area where Evenaar 264 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Evenaar 264""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show palces of administrative area that street adress Twickellaan 88 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Twickellaan 88""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Dal 35 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dal 35""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Hoofdstraat 33 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 33""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Fivelweg 33 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Fivelweg 33""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show palces of administrative area that street adress Nova Zemblastraat 32 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Nova Zemblastraat 32""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Kosterijweg 11 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kosterijweg 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress De Paasweide 72-300 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Paasweide 72-300""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Sprotstraat 20 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sprotstraat 20""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Ericalaan 18 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Ericalaan 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area that street adress Loefzijde 31 in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Loefzijde 31""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address 't Oelbred 25 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Oelbred 25""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Garsthuizerweg 1 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Garsthuizerweg 1""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Harmoniestraat 41 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Harmoniestraat 41""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Wolveschansdreef 14 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wolveschansdreef 14""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Olstgracht 69 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Olstgracht 69""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Melissepad 18 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Melissepad 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Oranjerie 34 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oranjerie 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address De Specerij 50 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Specerij 50""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Veendamstraat 26 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Veendamstraat 26""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of administrative area that street address Bob Marleystraat 18 located in.

The corresponding sparql query is:
SELECT DISTINCT ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bob Marleystraat 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places.}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Es 19 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Es 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area where street address Kolkplein 113A is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kolkplein 113A""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Goudsbloemweg 41 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Goudsbloemweg 41""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Overgouw 62 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 62""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Groensingel 34 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Groensingel 34""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Overgouw 13 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 13""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Hoofdstraat 111 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoofdstraat 111""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Fivelweg 7 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Fivelweg 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area where street address Oude Schoolsterweg 23 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Oude Schoolsterweg 23""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area where street address Kolkplein 106 is in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Kolkplein 106""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What administrative area is street address Woldweg 4 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Woldweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What administrative area is street address Maandenweg 13 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Maandenweg 13""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
What administrative area is street address 2e Barthold Entensdwarsweg 4 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""2e Barthold Entensdwarsweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What administrative area is street address Cissy van Marxveldtstraat 97 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Cissy van Marxveldtstraat 97""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What administrative area is street address Sneeuwklokjestraat 17 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sneeuwklokjestraat 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
What administrative area is street address Elvis Presleystraat 54 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Elvis Presleystraat 54""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
What administrative area is street address Elvis Presleystraat 18 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Elvis Presleystraat 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What administrative area is street address Torenstraat 12 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Torenstraat 12""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What administrative area is street address Wethouder Hamsterlaan 15 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wethouder Hamsterlaan 15""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
What administrative area is street address Zadkinestraat 94 in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zadkinestraat 94""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Tongstraat 18 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Tongstraat 18""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Administrative area where Broerstraat 7 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Broerstraat 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Vollenhoveschans 94 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Vollenhoveschans 94""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where New Yorkweg 91 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""New Yorkweg 91""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Administrative area where Parkwerf 3 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Parkwerf 3""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Pruimenhof 17 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pruimenhof 17""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Sportmark 87 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Sportmark 87""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Hoendiep 21 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Hoendiep 21""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Zuidwoldepad 28 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Zuidwoldepad 28""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Administrative area where Overgouw 108 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Overgouw 108""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area that street adress Wipmolenweg 253 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wipmolenweg 253""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area that street adress Floris Versterstraat 109 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Floris Versterstraat 109""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area that street adress Marterstraat 7 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Marterstraat 7""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area that street adress Middelburgweg 4 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Middelburgweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area that street adress Jukwerderweg 4 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Jukwerderweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area that street adress 't Kaarnhuus 19 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""'t Kaarnhuus 19""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area that street adress Noordeinde 213 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Noordeinde 213""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area that street adress Thérèse Schwartzestraat 89 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Thérèse Schwartzestraat 89""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show administrative area that street adress Glenn Millerweg 46 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Glenn Millerweg 46""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show administrative area that street adress Brancusistraat 4 in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Brancusistraat 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show the administrative area that street address Dorpsweg 27 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Dorpsweg 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address Stadswerf 115 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Stadswerf 115""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address Mandarijnstraat 11 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Mandarijnstraat 11""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address De Schepperij 13 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Schepperij 13""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address Banjostraat 29 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Banjostraat 29""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show the administrative area that street address Wilgengriend 183 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Wilgengriend 183""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show the administrative area that street address Lekstraat 27 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Lekstraat 27""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address Bedumerweg 4 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Bedumerweg 4""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address De Paasweide 39 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""De Paasweide 39""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that street address Pruimlaan 8 located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:streetAddress ""Pruimlaan 8""@nl. ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 8134HS is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8134HS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 8907QW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8907QW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 1681LJ is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1681LJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 4790CC is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4790CC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 2730PE is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2730PE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 7145DF is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7145DF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 8582CW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8582CW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 1043RT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1043RT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 4131UW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4131UW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 1193FL is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1193FL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 5031EC is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5031EC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 1027DU is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1027DU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 5851EW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5851EW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotel of the administrative area where postal code 3118SG is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3118SG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 5495KV is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5495KV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 7872MG is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7872MG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show hotel of the administrative area where postal code 6586AD is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6586AD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 9429UJ is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9429UJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 6962OW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6962OW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotel of the administrative area where postal code 8583XZ is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8583XZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 9826HN in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9826HN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 4609EB in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4609EB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 4228NJ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4228NJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 3579RU in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3579RU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 6944OU in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6944OU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 6319CQ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6319CQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 7471FS in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7471FS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 2834PU in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2834PU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 9713VN in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9713VN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 1610UJ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1610UJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 1753BR in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1753BR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 2823IV in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2823IV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 4709HL in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4709HL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 5437LI in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5437LI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 3899ZA in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3899ZA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 4893LQ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4893LQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 9023TP in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9023TP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 4070CS in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4070CS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 2229QC in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2229QC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
What are the hotel in the administrative area that 1710MP in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1710MP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 2476LH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2476LH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 1490QZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1490QZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 8290PE located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8290PE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in the administrative area where 3317ES located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3317ES"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 5981MY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5981MY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 6513XB located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6513XB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 8733LS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8733LS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 7684XZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7684XZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in the administrative area where 1034HS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1034HS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 8436OX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8436OX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 1870MU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1870MU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 3320AY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3320AY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in the administrative area where 6610IN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6610IN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Hotels in the administrative area where 9312RE located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9312RE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 1000BY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1000BY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 2523VO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2523VO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 3163TM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3163TM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 2817OP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2817OP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 6465OG located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6465OG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in the administrative area where 1063OZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1063OZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show hotels of the administrative area that postal address 7095AX in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7095AX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 6962DF in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6962DF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 8913WA in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8913WA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 2119OG in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2119OG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 8869VQ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8869VQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 6934AE in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6934AE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 9279NJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9279NJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 2101MQ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2101MQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 8996EC in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8996EC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 2469AJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2469AJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 1948DS in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1948DS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 5962XS in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5962XS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 3214DV in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3214DV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 7036BG in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7036BG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 6857QM in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6857QM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 9539JQ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9539JQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 3729AZ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3729AZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 4749YZ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4749YZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 3676HX in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3676HX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels of the administrative area that postal address 5222VO in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5222VO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 2754DM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2754DM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 9382NQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9382NQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 3872DN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3872DN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 4659ZU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4659ZU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 8919OD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8919OD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 1439KM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1439KM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 1065QF located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1065QF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 1025UQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1025UQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 7358WD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7358WD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 4007UM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4007UM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 8262GF located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8262GF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 5792OC located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5792OC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 7450LA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7450LA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 5610FL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5610FL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 6221ZM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6221ZM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 6198SG located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6198SG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 6784HK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6784HK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 3333LN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3333LN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 4812DK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4812DK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Show hotels in the administrative area that postal address 1362JV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1362JV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:hotel. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 5313JE is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5313JE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 4872LP is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4872LP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 4628EX is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4628EX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show museums of the administrative area where postal code 7971RM is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7971RM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 8175EQ is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8175EQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 4226UX is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4226UX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 7853OE is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7853OE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 6614IW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6614IW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 6462NP is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6462NP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 9055TZ is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9055TZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 6800ZO is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6800ZO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 1385WW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1385WW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 4160NT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4160NT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 3352CT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3352CT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 5548LY is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5548LY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 8561YS is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8561YS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 3088PS is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3088PS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 6488EF is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6488EF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 4296RW is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4296RW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums of the administrative area where postal code 3271CH is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3271CH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 8615KS in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8615KS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 3513IV in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3513IV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 4021TB in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4021TB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 2410VU in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2410VU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 2631XL in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2631XL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 6085HA in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6085HA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 1204MM in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1204MM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 6803GD in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6803GD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 8135QL in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8135QL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 4431MF in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4431MF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 8471VJ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8471VJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 9540TY in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9540TY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 9596QX in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9596QX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 6583BQ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6583BQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 2284EU in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2284EU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 1868HT in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1868HT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 2580PH in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2580PH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 4363HS in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4363HS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
What are the museums in the administrative area that 4497GB in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4497GB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the museums in the administrative area that 2552BN in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2552BN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 6879AY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6879AY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 4744EE located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4744EE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 5195UT located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5195UT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 8249FV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8249FV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Museums in the administrative area where 6658GA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6658GA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 1590TT located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1590TT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 6924VN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6924VN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 8627TN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8627TN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 9204OY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9204OY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 5924TN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5924TN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 8007MW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8007MW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 6165IE located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6165IE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 9322WW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9322WW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 9325QN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9325QN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 7713AR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7713AR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 6211HO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6211HO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Museums in the administrative area where 3852ZZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3852ZZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 5597YA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5597YA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 4494CA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4494CA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in the administrative area where 1298VR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1298VR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 7338ZH in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7338ZH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 9834UM in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9834UM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 7452RA in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7452RA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 6629FD in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6629FD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 3433IP in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3433IP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 4413VK in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4413VK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 8641FJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8641FJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 4935QJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4935QJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 7249AF in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7249AF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 1744EJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1744EJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 1060XY in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1060XY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 7191OL in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7191OL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 1537JY in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1537JY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show museum of the administrative area that postal address 3034LW in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3034LW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show museum of the administrative area that postal address 8194LA in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8194LA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 8993IM in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8993IM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 2244SZ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2244SZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 1910KC in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1910KC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show museum of the administrative area that postal address 3554EW in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3554EW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museum of the administrative area that postal address 4082AR in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4082AR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 2636JR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2636JR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 7329SN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7329SN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 8455WB located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8455WB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 2854VQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2854VQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 2467AL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2467AL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 5665BD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5665BD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 3725LH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3725LH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 3144WZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3144WZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 9448BM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9448BM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 8579PQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8579PQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 6018BA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6018BA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 1684UM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1684UM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 7751RO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7751RO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 9433TA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9433TA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 8285JH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8285JH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 3189KD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3189KD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 6203KV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6203KV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 4420XQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4420XQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 5259TM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5259TM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show museums in the administrative area that postal address 9290ZA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9290ZA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:additionalType typeBuilding:museum. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6914XZ is in, floor size should smaller than 293, date created earlier than 1965

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6914XZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 67). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1817)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4826CT is in, floor size should smaller than 334, date created earlier than 2015

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4826CT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 50). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1823)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 6869PF is in, floor size should smaller than 295, date created earlier than 1977

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6869PF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 99). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1907)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5181MU is in, floor size should smaller than 439, date created earlier than 1964

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5181MU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 183). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1808)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 1223WX is in, floor size should smaller than 416, date created earlier than 1991

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1223WX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 137). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1859)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 2019KV is in, floor size should smaller than 225, date created earlier than 1950

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2019KV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 85). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1948)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6693OS is in, floor size should smaller than 411, date created earlier than 1969

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6693OS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 95). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1843)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8380GW is in, floor size should smaller than 491, date created earlier than 1993

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8380GW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 157). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1864)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 7000KV is in, floor size should smaller than 443, date created earlier than 1977

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7000KV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 188). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 9530UZ is in, floor size should smaller than 329, date created earlier than 1964

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9530UZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 72). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1942)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8703WZ is in, floor size should smaller than 228, date created earlier than 1965

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8703WZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 65). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1806)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5107QS is in, floor size should smaller than 200, date created earlier than 1996

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5107QS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 182). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1937)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 8711XC is in, floor size should smaller than 495, date created earlier than 1968

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8711XC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 111). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1903)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 2856CC is in, floor size should smaller than 422, date created earlier than 1966

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2856CC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 169). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1886)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 5106KA is in, floor size should smaller than 302, date created earlier than 2012

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5106KA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 77). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1935)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3427SJ is in, floor size should smaller than 313, date created earlier than 1976

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3427SJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 67). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1804)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8220OC is in, floor size should smaller than 482, date created earlier than 2006

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8220OC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 162). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1877)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5490NU is in, floor size should smaller than 359, date created earlier than 1954

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5490NU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 101). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1913)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4144GR is in, floor size should smaller than 336, date created earlier than 1951

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4144GR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 129). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1854)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3375EF is in, floor size should smaller than 466, date created earlier than 1965

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3375EF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 183). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1857)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7272GQ in that floor size smaller than 408, , date created earlier than 2021?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7272GQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 166). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1940)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2803OD in that floor size smaller than 265, , date created earlier than 1975?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2803OD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 94). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1912)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1343NN in that floor size smaller than 402, , date created earlier than 2015?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1343NN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 101). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1816)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7091DP in that floor size smaller than 243, , date created earlier than 1983?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7091DP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 189). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1852)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3038AY in that floor size smaller than 426, , date created earlier than 1970?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3038AY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 136). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1843)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7675QP in that floor size smaller than 281, , date created earlier than 1961?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7675QP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 95). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1825)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6270LQ in that floor size smaller than 214, , date created earlier than 1975?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6270LQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 137). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1820)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5997TR in that floor size smaller than 308, , date created earlier than 1976?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5997TR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 118). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1903)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1848AJ in that floor size smaller than 374, , date created earlier than 1969?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1848AJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 71). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1887)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4415LR in that floor size smaller than 249, , date created earlier than 1965?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4415LR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 58). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1850)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9907TK in that floor size smaller than 392, , date created earlier than 1963?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9907TK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 128). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1852)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5088IH in that floor size smaller than 392, , date created earlier than 2012?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5088IH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 197). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1891)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4175UV in that floor size smaller than 454, , date created earlier than 2011?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4175UV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 186). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1831)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3205XM in that floor size smaller than 467, , date created earlier than 1992?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3205XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 118). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1935)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7659TH in that floor size smaller than 306, , date created earlier than 1963?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7659TH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 125). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1823)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6829NV in that floor size smaller than 420, , date created earlier than 1989?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6829NV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 102). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1905)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1343BI in that floor size smaller than 382, , date created earlier than 2003?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1343BI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 107). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1944)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9053XM in that floor size smaller than 281, , date created earlier than 2000?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9053XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 120). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1946)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1384HF in that floor size smaller than 228, , date created earlier than 1994?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1384HF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 79). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1815)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7215MT in that floor size smaller than 255, , date created earlier than 1986?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7215MT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 117). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1816)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 9103OY located in with floor size no larger than 297 and date created smaller than 1987

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9103OY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 154). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1923)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6850EM located in with floor size no larger than 200 and date created smaller than 2017

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6850EM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 199). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1814)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 8457GL located in with floor size no larger than 441 and date created smaller than 1987

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8457GL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 84). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1866)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5302KN located in with floor size no larger than 408 and date created smaller than 1979

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5302KN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 176). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1939)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 9900GC located in with floor size no larger than 308 and date created smaller than 1977

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9900GC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 53). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1884)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 8920CI located in with floor size no larger than 394 and date created smaller than 2019

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8920CI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 178). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1836)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5859JD located in with floor size no larger than 432 and date created smaller than 1989

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5859JD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 108). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1895)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 7481KX located in with floor size no larger than 494 and date created smaller than 1984

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7481KX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 113). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1847)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 1034MH located in with floor size no larger than 421 and date created smaller than 2019

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1034MH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 136). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1912)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5191NQ located in with floor size no larger than 367 and date created smaller than 1957

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5191NQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 119). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1919)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1797OQ located in with floor size no larger than 367 and date created smaller than 1953

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1797OQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 128). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1931)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3742QZ located in with floor size no larger than 254 and date created smaller than 1975

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3742QZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 122). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1905)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3863NU located in with floor size no larger than 474 and date created smaller than 2004

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3863NU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 192). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1920)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 9051YH located in with floor size no larger than 362 and date created smaller than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9051YH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 175). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1848)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 9324NS located in with floor size no larger than 245 and date created smaller than 1991

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9324NS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 104). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1948)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 4400ZX located in with floor size no larger than 226 and date created smaller than 1955

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4400ZX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 58). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1830)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5676BT located in with floor size no larger than 362 and date created smaller than 1962

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5676BT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 193). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1827)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 4325IM located in with floor size no larger than 439 and date created smaller than 1966

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4325IM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 200). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1861)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 7817KE located in with floor size no larger than 447 and date created smaller than 1968

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7817KE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 167). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1899)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5072QK located in with floor size no larger than 229 and date created smaller than 1977

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5072QK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 189). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1814)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7190SZ in, floor size should smaller than 333 and date created no later than 2017

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7190SZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 77). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1841)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 3591JU in, floor size should smaller than 358 and date created no later than 1991

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3591JU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 146). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1878)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2366MI in, floor size should smaller than 270 and date created no later than 1995

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2366MI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 86). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1854)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2145ZW in, floor size should smaller than 273 and date created no later than 1990

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2145ZW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 80). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1859)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7823WE in, floor size should smaller than 346 and date created no later than 1954

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7823WE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 166). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1936)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 6448TE in, floor size should smaller than 292 and date created no later than 1987

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6448TE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 70). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1893)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2057TL in, floor size should smaller than 416 and date created no later than 1987

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2057TL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 194). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1936)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3077WG in, floor size should smaller than 448 and date created no later than 1960

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3077WG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 108). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1818)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9202TT in, floor size should smaller than 247 and date created no later than 2015

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9202TT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 66). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1849)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 3435SZ in, floor size should smaller than 317 and date created no later than 1992

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3435SZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 194). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1915)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5360GA in, floor size should smaller than 281 and date created no later than 2014

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5360GA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 97). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1939)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 9866FU in, floor size should smaller than 266 and date created no later than 2010

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9866FU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 112). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1885)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5936NF in, floor size should smaller than 306 and date created no later than 1956

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5936NF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 96). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1917)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 3630SC in, floor size should smaller than 347 and date created no later than 1999

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3630SC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 152). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1835)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 4407AO in, floor size should smaller than 292 and date created no later than 1970

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4407AO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 55). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1800)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7215CU in, floor size should smaller than 443 and date created no later than 1991

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7215CU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 133). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1808)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 4083DM in, floor size should smaller than 484 and date created no later than 2016

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4083DM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 189). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1883)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2298KB in, floor size should smaller than 485 and date created no later than 1990

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2298KB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 149). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1923)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5034PL in, floor size should smaller than 368 and date created no later than 1963

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5034PL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 181). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1880)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1244FZ in, floor size should smaller than 277 and date created no later than 1963

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1244FZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 84). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1884)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6927JF located in, floor size smaller than 440, date created earlier than 1961

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6927JF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 90). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1804)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6700QI located in, floor size smaller than 228, date created earlier than 1972

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6700QI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 107). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1852)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7604QN located in, floor size smaller than 324, date created earlier than 2000

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7604QN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 83). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1805)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9241BM located in, floor size smaller than 492, date created earlier than 1987

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9241BM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 68). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1904)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9405CR located in, floor size smaller than 407, date created earlier than 2014

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9405CR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 155). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1832)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3485TY located in, floor size smaller than 254, date created earlier than 1988

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3485TY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 159). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1858)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6256MZ located in, floor size smaller than 337, date created earlier than 2004

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6256MZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 182). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1905)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7385OT located in, floor size smaller than 302, date created earlier than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7385OT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 130). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1836)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3053CK located in, floor size smaller than 351, date created earlier than 2020

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3053CK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 80). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3041KH located in, floor size smaller than 222, date created earlier than 1997

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3041KH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 196). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1885)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1218SQ located in, floor size smaller than 211, date created earlier than 1988

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1218SQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 120). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1918)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3219BL located in, floor size smaller than 386, date created earlier than 1997

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3219BL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 168). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1816)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6852UW located in, floor size smaller than 338, date created earlier than 1982

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6852UW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 199). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1935)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7209WT located in, floor size smaller than 401, date created earlier than 1971

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7209WT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 122). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1811)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1851AE located in, floor size smaller than 286, date created earlier than 2021

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1851AE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 142). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1827)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 4034NW located in, floor size smaller than 260, date created earlier than 1967

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4034NW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 133). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1927)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1303JY located in, floor size smaller than 298, date created earlier than 1966

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1303JY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 108). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1897)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5584RM located in, floor size smaller than 303, date created earlier than 1963

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5584RM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 147). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1814)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6290GA located in, floor size smaller than 377, date created earlier than 1950

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6290GA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 58). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1818)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 4198TG located in, floor size smaller than 469, date created earlier than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4198TG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize <= 191). ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1843)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3974FK is in, floor size should larger than 141, date created later than 1902

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3974FK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 141). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1902)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8917JE is in, floor size should larger than 122, date created later than 1851

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8917JE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 122). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1851)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 7304YP is in, floor size should larger than 185, date created later than 1840

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7304YP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 185). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8787UX is in, floor size should larger than 63, date created later than 1896

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8787UX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8305MT is in, floor size should larger than 89, date created later than 1941

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8305MT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 89). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 1628CW is in, floor size should larger than 58, date created later than 1833

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1628CW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1833)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6842FN is in, floor size should larger than 60, date created later than 1900

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6842FN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 60). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1900)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4734GO is in, floor size should larger than 93, date created later than 1809

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4734GO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 93). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1809)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4139RM is in, floor size should larger than 84, date created later than 1894

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4139RM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 84). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4474GC is in, floor size should larger than 56, date created later than 1878

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4474GC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 56). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1878)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5268JP is in, floor size should larger than 190, date created later than 1946

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5268JP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 190). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 2099GD is in, floor size should larger than 191, date created later than 1894

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2099GD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 191). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 9264PW is in, floor size should larger than 183, date created later than 1929

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9264PW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 183). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1929)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 9237QM is in, floor size should larger than 190, date created later than 1880

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9237QM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 190). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1880)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4961AW is in, floor size should larger than 127, date created later than 1849

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4961AW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 127). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1849)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3187VY is in, floor size should larger than 64, date created later than 1823

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3187VY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 64). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1823)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6816EC is in, floor size should larger than 139, date created later than 1935

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6816EC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 139). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 1549YR is in, floor size should larger than 176, date created later than 1822

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1549YR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 176). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8469BZ is in, floor size should larger than 168, date created later than 1898

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8469BZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 168). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4196CO is in, floor size should larger than 192, date created later than 1868

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4196CO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 192). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8029VP in that floor size bigger than 57, date created later than 1880?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8029VP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 57). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1880)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7289ZG in that floor size bigger than 187, date created later than 1872?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7289ZG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 187). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1872)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4906VY in that floor size bigger than 86, date created later than 1862?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4906VY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 86). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3164WR in that floor size bigger than 105, date created later than 1816?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3164WR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 105). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3864UU in that floor size bigger than 173, date created later than 1857?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3864UU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 173). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1857)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5714QE in that floor size bigger than 131, date created later than 1863?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5714QE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 131). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1863)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9359RQ in that floor size bigger than 85, date created later than 1888?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9359RQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 85). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1888)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6782GP in that floor size bigger than 114, date created later than 1949?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6782GP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 114). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8628YJ in that floor size bigger than 58, date created later than 1924?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8628YJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 58). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1924)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1773UG in that floor size bigger than 172, date created later than 1897?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1773UG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 172). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4118HK in that floor size bigger than 86, date created later than 1911?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4118HK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 86). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8843CC in that floor size bigger than 157, date created later than 1899?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8843CC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 157). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1899)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3281MI in that floor size bigger than 185, date created later than 1925?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3281MI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 185). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5215SE in that floor size bigger than 199, date created later than 1819?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5215SE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 199). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1819)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6064NK in that floor size bigger than 191, date created later than 1950?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6064NK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 191). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1950)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2162MU in that floor size bigger than 156, date created later than 1920?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2162MU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 156). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8140IU in that floor size bigger than 63, date created later than 1914?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8140IU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1914)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3417LJ in that floor size bigger than 77, date created later than 1804?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3417LJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 77). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3991OV in that floor size bigger than 166, date created later than 1820?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3991OV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 166). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1820)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2773SW in that floor size bigger than 198, date created later than 1822?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2773SW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 198). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7558PP located in with floor size no smaller than 172 and date created larger than 1913

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7558PP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 172). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1913)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6744FT located in with floor size no smaller than 165 and date created larger than 1804

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6744FT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 165). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2441HD located in with floor size no smaller than 126 and date created larger than 1869

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2441HD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 126). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1869)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3408NW located in with floor size no smaller than 181 and date created larger than 1946

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3408NW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 181). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3910ZP located in with floor size no smaller than 197 and date created larger than 1946

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3910ZP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 197). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 4795HL located in with floor size no smaller than 187 and date created larger than 1838

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4795HL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 187). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3255LI located in with floor size no smaller than 195 and date created larger than 1817

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3255LI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 195). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1817)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 4658ZU located in with floor size no smaller than 189 and date created larger than 1898

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4658ZU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 189). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6011NP located in with floor size no smaller than 52 and date created larger than 1831

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6011NP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 52). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1831)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 7937AS located in with floor size no smaller than 199 and date created larger than 1907

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7937AS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 199). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1907)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2715IH located in with floor size no smaller than 87 and date created larger than 1857

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2715IH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 87). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1857)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 8079IT located in with floor size no smaller than 157 and date created larger than 1902

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8079IT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 157). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1902)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 7587PL located in with floor size no smaller than 172 and date created larger than 1838

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7587PL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 172). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5311KX located in with floor size no smaller than 176 and date created larger than 1825

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5311KX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 176). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1825)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 7318EH located in with floor size no smaller than 66 and date created larger than 1918

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7318EH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 66). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6350QN located in with floor size no smaller than 81 and date created larger than 1885

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6350QN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 81). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 8890JR located in with floor size no smaller than 173 and date created larger than 1823

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8890JR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 173). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1823)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 8210MA located in with floor size no smaller than 91 and date created larger than 1840

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8210MA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 91). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1555UU located in with floor size no smaller than 99 and date created larger than 1871

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1555UU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 99). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1871)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1948JU located in with floor size no smaller than 97 and date created larger than 1922

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1948JU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 97). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1922)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2332RQ in, floor size should bigger than 77 and date created no earlier than 1873

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2332RQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 77). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1873)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7309UD in, floor size should bigger than 114 and date created no earlier than 1818

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7309UD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 114). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1818)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4238WG in, floor size should bigger than 174 and date created no earlier than 1904

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4238WG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 174). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1904)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2107ZM in, floor size should bigger than 162 and date created no earlier than 1944

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2107ZM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 162). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1944)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5674JV in, floor size should bigger than 195 and date created no earlier than 1802

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5674JV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 195). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1802)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 9147IG in, floor size should bigger than 124 and date created no earlier than 1922

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9147IG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 124). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1922)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 3277LE in, floor size should bigger than 68 and date created no earlier than 1838

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3277LE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 68). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 9560NB in, floor size should bigger than 181 and date created no earlier than 1839

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9560NB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 181). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1839)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1520EW in, floor size should bigger than 90 and date created no earlier than 1870

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1520EW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 90). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1870)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5878XM in, floor size should bigger than 192 and date created no earlier than 1827

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5878XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 192). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1827)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3220CX in, floor size should bigger than 187 and date created no earlier than 1896

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3220CX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 187). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5287FK in, floor size should bigger than 123 and date created no earlier than 1914

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5287FK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 123). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1914)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 6905UT in, floor size should bigger than 55 and date created no earlier than 1913

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6905UT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 55). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1913)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 4752SM in, floor size should bigger than 121 and date created no earlier than 1948

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4752SM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 121). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3633ZR in, floor size should bigger than 167 and date created no earlier than 1904

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3633ZR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 167). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1904)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 1434DV in, floor size should bigger than 189 and date created no earlier than 1945

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1434DV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 189). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5277HZ in, floor size should bigger than 179 and date created no earlier than 1811

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5277HZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 179). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1811)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5049JO in, floor size should bigger than 68 and date created no earlier than 1901

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5049JO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 68). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1901)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2002AW in, floor size should bigger than 156 and date created no earlier than 1946

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2002AW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 156). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2375WK in, floor size should bigger than 89 and date created no earlier than 1913

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2375WK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 89). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1913)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8086KK located in, floor size lager than 105, date created later than 1808

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8086KK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 105). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1808)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1760NM located in, floor size lager than 192, date created later than 1830

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1760NM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 192). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1965YY located in, floor size lager than 63, date created later than 1920

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1965YY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8945XN located in, floor size lager than 139, date created later than 1818

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8945XN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 139). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1818)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2411PW located in, floor size lager than 100, date created later than 1847

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2411PW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 100). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1847)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 5569FT located in, floor size lager than 72, date created later than 1822

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5569FT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 72). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7345MK located in, floor size lager than 62, date created later than 1946

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7345MK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 62). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8190UY located in, floor size lager than 134, date created later than 1912

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8190UY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 134). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1912)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7794UK located in, floor size lager than 143, date created later than 1920

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7794UK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 143). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8302FN located in, floor size lager than 101, date created later than 1935

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8302FN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 101). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7019DH located in, floor size lager than 185, date created later than 1893

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7019DH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 185). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9030YB located in, floor size lager than 84, date created later than 1909

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9030YB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 84). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1909)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 4220OB located in, floor size lager than 158, date created later than 1822

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4220OB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 158). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1533KU located in, floor size lager than 113, date created later than 1840

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1533KU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 113). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8240AU located in, floor size lager than 71, date created later than 1855

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8240AU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 71). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6789MO located in, floor size lager than 110, date created later than 1880

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6789MO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 110). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1880)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3500SK located in, floor size lager than 82, date created later than 1948

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3500SK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 82). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1683YZ located in, floor size lager than 177, date created later than 1916

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1683YZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 177). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1916)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8083JH located in, floor size lager than 148, date created later than 1850

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8083JH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 148). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1850)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7346ED located in, floor size lager than 104, date created later than 1940

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7346ED"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 104). ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1940)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 6707LZ is in, floor size should larger than 60

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6707LZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 60)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 9979WL is in, floor size should larger than 78

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9979WL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 78)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2884SZ is in, floor size should larger than 172

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2884SZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 172)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3800ER is in, floor size should larger than 107

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3800ER"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 107)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2857ZX is in, floor size should larger than 114

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2857ZX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 114)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2676KF is in, floor size should larger than 147

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2676KF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 147)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3812IN is in, floor size should larger than 105

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3812IN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 105)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 1842PG is in, floor size should larger than 122

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1842PG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 122)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 1170HB is in, floor size should larger than 156

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1170HB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 156)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3390SN is in, floor size should larger than 163

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3390SN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 163)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3257HX is in, floor size should larger than 99

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3257HX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 99)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 7614US is in, floor size should larger than 150

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7614US"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 150)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 6297NJ is in, floor size should larger than 153

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6297NJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 153)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 5914TD is in, floor size should larger than 94

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5914TD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 94)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 8795XE is in, floor size should larger than 129

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8795XE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 129)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 5449WV is in, floor size should larger than 125

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5449WV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 125)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 3774JT is in, floor size should larger than 112

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3774JT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 112)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 8648CR is in, floor size should larger than 114

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8648CR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 114)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3702KG is in, floor size should larger than 132

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3702KG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 132)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 8551GH is in, floor size should larger than 61

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8551GH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 61)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2268CT in that floor size bigger than 140?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2268CT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 140)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6054LW in that floor size bigger than 169?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6054LW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 169)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5853XO in that floor size bigger than 176?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5853XO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 176)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3430YS in that floor size bigger than 99?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3430YS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 99)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9747PY in that floor size bigger than 96?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9747PY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 96)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5918GV in that floor size bigger than 140?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5918GV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 140)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9537CC in that floor size bigger than 96?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9537CC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 96)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1578EZ in that floor size bigger than 56?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1578EZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 56)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6664FT in that floor size bigger than 190?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6664FT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 190)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6852RA in that floor size bigger than 148?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6852RA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 148)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6803WE in that floor size bigger than 57?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6803WE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 57)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1345MX in that floor size bigger than 155?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1345MX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 155)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5611KH in that floor size bigger than 69?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5611KH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 69)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2279OD in that floor size bigger than 161?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2279OD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 161)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4383GB in that floor size bigger than 90?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4383GB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 90)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6580LJ in that floor size bigger than 54?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6580LJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 54)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7079BU in that floor size bigger than 179?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7079BU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 179)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7280GQ in that floor size bigger than 122?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7280GQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 122)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6086ZY in that floor size bigger than 70?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6086ZY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 70)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8686DM in that floor size bigger than 135?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8686DM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 135)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 7135OB located in with floor size no smaller than 141

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7135OB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 141)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 4951BY located in with floor size no smaller than 93

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4951BY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 93)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 3414XS located in with floor size no smaller than 169

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3414XS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 169)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 4676WV located in with floor size no smaller than 90

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4676WV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 90)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 8639VA located in with floor size no smaller than 74

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8639VA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 74)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 4835DY located in with floor size no smaller than 91

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4835DY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 91)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 1840WH located in with floor size no smaller than 181

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1840WH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 181)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 8117NS located in with floor size no smaller than 78

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8117NS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 78)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 5916ZX located in with floor size no smaller than 198

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5916ZX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 198)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 9387IC located in with floor size no smaller than 89

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9387IC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 89)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3068AK located in with floor size no smaller than 89

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3068AK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 89)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 8447RI located in with floor size no smaller than 178

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8447RI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 178)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6433AE located in with floor size no smaller than 67

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6433AE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 67)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 6490FX located in with floor size no smaller than 130

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6490FX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 130)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 4516AL located in with floor size no smaller than 162

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4516AL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 162)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 4982RF located in with floor size no smaller than 88

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4982RF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 88)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3959AZ located in with floor size no smaller than 190

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3959AZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 190)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 2687DN located in with floor size no smaller than 50

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2687DN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 50)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 7414LP located in with floor size no smaller than 59

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7414LP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 59)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 2767LT located in with floor size no smaller than 71

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2767LT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 71)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4446BX in, floor size should bigger than 143

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4446BX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 143)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1693BZ in, floor size should bigger than 110

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1693BZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 110)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3143AI in, floor size should bigger than 193

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3143AI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 193)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9801QK in, floor size should bigger than 193

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9801QK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 193)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8813KI in, floor size should bigger than 97

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8813KI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 97)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8322ZS in, floor size should bigger than 73

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8322ZS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 73)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7235MF in, floor size should bigger than 120

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7235MF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 120)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1070SS in, floor size should bigger than 200

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1070SS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 200)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2682MA in, floor size should bigger than 107

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2682MA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 107)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1771LE in, floor size should bigger than 63

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1771LE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9200CP in, floor size should bigger than 130

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9200CP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 130)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2826GG in, floor size should bigger than 79

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2826GG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 79)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7623AH in, floor size should bigger than 63

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7623AH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 63)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6340CG in, floor size should bigger than 144

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6340CG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 144)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7363GX in, floor size should bigger than 193

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7363GX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 193)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2808TC in, floor size should bigger than 137

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2808TC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 137)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2298YW in, floor size should bigger than 92

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2298YW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 92)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6864VK in, floor size should bigger than 196

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6864VK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 196)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3647BJ in, floor size should bigger than 161

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3647BJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 161)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7446CU in, floor size should bigger than 170

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7446CU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 170)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1365KG located in, floor size lager than 73

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1365KG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 73)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5785DN located in, floor size lager than 66

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5785DN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 66)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4347UM located in, floor size lager than 86

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4347UM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 86)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5416HS located in, floor size lager than 192

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5416HS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 192)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2881WA located in, floor size lager than 195

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2881WA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 195)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6723ZB located in, floor size lager than 72

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6723ZB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 72)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6617XK located in, floor size lager than 161

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6617XK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 161)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8587VN located in, floor size lager than 56

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8587VN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 56)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5025BQ located in, floor size lager than 161

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5025BQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 161)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6708GN located in, floor size lager than 147

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6708GN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 147)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1811CL located in, floor size lager than 57

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1811CL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 57)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1859WJ located in, floor size lager than 164

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1859WJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 164)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1968TB located in, floor size lager than 117

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1968TB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 117)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8759ZU located in, floor size lager than 112

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8759ZU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 112)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8367YB located in, floor size lager than 67

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8367YB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 67)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3086AB located in, floor size lager than 157

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3086AB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 157)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5223GQ located in, floor size lager than 65

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5223GQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 65)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9676CC located in, floor size lager than 91

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9676CC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 91)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5038FZ located in, floor size lager than 67

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5038FZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 67)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1078MS located in, floor size lager than 112

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1078MS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:floorSize ?floorsize. FILTER(?floorsize >= 112)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 1418FP is in, floor size should earlier than 382

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1418FP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 5553OF is in, floor size should earlier than 363

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5553OF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 4644XY is in, floor size should earlier than 430

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4644XY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1992)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 9217SV is in, floor size should earlier than 449

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9217SV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 7710FA is in, floor size should earlier than 243

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7710FA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2274TN is in, floor size should earlier than 479

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2274TN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 4207TG is in, floor size should earlier than 409

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4207TG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2955ST is in, floor size should earlier than 275

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2955ST"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2914LI is in, floor size should earlier than 241

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2914LI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3163KR is in, floor size should earlier than 422

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3163KR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 9964QC is in, floor size should earlier than 390

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9964QC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 3501WK is in, floor size should earlier than 239

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3501WK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1970)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 9300LE is in, floor size should earlier than 475

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9300LE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 7603RB is in, floor size should earlier than 313

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7603RB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 1646AK is in, floor size should earlier than 284

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1646AK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 7826OE is in, floor size should earlier than 315

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7826OE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 9679BK is in, floor size should earlier than 484

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9679BK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1979)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 5297EX is in, floor size should earlier than 485

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5297EX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 2664YX is in, floor size should earlier than 373

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2664YX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show palces of administrative area where post code 1752UZ is in, floor size should earlier than 374

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1752UZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9141CW in that floor size smaller than 220?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9141CW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6762LH in that floor size smaller than 207?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6762LH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9354FO in that floor size smaller than 379?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9354FO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3004DZ in that floor size smaller than 472?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3004DZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1194ZU in that floor size smaller than 228?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1194ZU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9316EC in that floor size smaller than 420?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9316EC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4564ED in that floor size smaller than 455?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4564ED"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9155FW in that floor size smaller than 422?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9155FW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7461BU in that floor size smaller than 274?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7461BU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6128JH in that floor size smaller than 432?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6128JH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7143HH in that floor size smaller than 401?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7143HH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3747RG in that floor size smaller than 288?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3747RG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6459GS in that floor size smaller than 411?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6459GS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1619ZA in that floor size smaller than 409?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1619ZA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2314OQ in that floor size smaller than 286?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2314OQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2006)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6717QZ in that floor size smaller than 369?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6717QZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4704DL in that floor size smaller than 419?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4704DL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8382LM in that floor size smaller than 268?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8382LM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1635NO in that floor size smaller than 216?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1635NO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8385VK in that floor size smaller than 249?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8385VK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 3345ZG located in with floor size no later than 375

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3345ZG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 2294RW located in with floor size no later than 281

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2294RW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 6770MW located in with floor size no later than 229

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6770MW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 7524QB located in with floor size no later than 305

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7524QB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 9975II located in with floor size no later than 309

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9975II"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 8265LD located in with floor size no later than 334

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8265LD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 5722GT located in with floor size no later than 466

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5722GT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 3633PL located in with floor size no later than 475

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3633PL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 7362EU located in with floor size no later than 266

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7362EU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 3696GJ located in with floor size no later than 351

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3696GJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1715VE located in with floor size no later than 489

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1715VE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1968)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 1578CS located in with floor size no later than 456

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1578CS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 1378JJ located in with floor size no later than 435

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1378JJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 1046IB located in with floor size no later than 200

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1046IB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 6833PG located in with floor size no later than 230

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6833PG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 5237LK located in with floor size no later than 467

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5237LK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 8826BE located in with floor size no later than 240

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8826BE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 3030CA located in with floor size no later than 484

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3030CA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2015)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 6660VZ located in with floor size no later than 361

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6660VZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
The palces in the administrative area where postal address 6304UA located in with floor size no later than 402

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6304UA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7473QW in, floor size should earlier than 247

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7473QW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4922SZ in, floor size should earlier than 315

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4922SZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9829FN in, floor size should earlier than 248

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9829FN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1872OJ in, floor size should earlier than 366

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1872OJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6228DH in, floor size should earlier than 450

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6228DH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8384HH in, floor size should earlier than 381

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8384HH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8799JV in, floor size should earlier than 335

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8799JV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7980GN in, floor size should earlier than 408

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7980GN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6744OG in, floor size should earlier than 260

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6744OG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9728HQ in, floor size should earlier than 306

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9728HQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5446MK in, floor size should earlier than 263

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5446MK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6087EJ in, floor size should earlier than 324

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6087EJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9926KY in, floor size should earlier than 398

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9926KY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6089MZ in, floor size should earlier than 316

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6089MZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4509OE in, floor size should earlier than 257

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4509OE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8161QO in, floor size should earlier than 458

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8161QO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7475QF in, floor size should earlier than 447

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7475QF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5409ZL in, floor size should earlier than 228

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5409ZL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1968)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4963CZ in, floor size should earlier than 322

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4963CZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7602QQ in, floor size should earlier than 333

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7602QQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5829AB located in, floor size smaller than 488

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5829AB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5406RW located in, floor size smaller than 468

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5406RW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6071IE located in, floor size smaller than 344

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6071IE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7012XZ located in, floor size smaller than 370

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7012XZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2967JX located in, floor size smaller than 238

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2967JX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7573OB located in, floor size smaller than 348

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7573OB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4638QD located in, floor size smaller than 346

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4638QD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2996FO located in, floor size smaller than 278

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2996FO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8824JW located in, floor size smaller than 263

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8824JW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7762ZH located in, floor size smaller than 377

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7762ZH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4004YZ located in, floor size smaller than 328

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4004YZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2006AA located in, floor size smaller than 433

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2006AA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2006)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4277RL located in, floor size smaller than 404

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4277RL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3486EA located in, floor size smaller than 422

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3486EA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2007)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2351IJ located in, floor size smaller than 241

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2351IJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7665TQ located in, floor size smaller than 473

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7665TQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3592OO located in, floor size smaller than 321

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3592OO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1992)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9483VO located in, floor size smaller than 434

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9483VO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1585QM located in, floor size smaller than 314

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1585QM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4694IC located in, floor size smaller than 319

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4694IC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8353WS is in, date created should larger than 1903

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8353WS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1903)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8811ON is in, date created should larger than 1854

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8811ON"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1854)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6533YU is in, date created should larger than 1805

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6533YU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1805)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5527XM is in, date created should larger than 1803

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5527XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1803)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7593PH is in, date created should larger than 1950

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7593PH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1950)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6359HU is in, date created should larger than 1949

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6359HU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5216IW is in, date created should larger than 1863

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5216IW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1863)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8338JQ is in, date created should larger than 1832

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8338JQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1832)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4883KB is in, date created should larger than 1896

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4883KB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3805AM is in, date created should larger than 1917

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3805AM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 7764ZM is in, date created should larger than 1927

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7764ZM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1927)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6090HJ is in, date created should larger than 1881

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6090HJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1881)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8079QO is in, date created should larger than 1894

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8079QO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5753RG is in, date created should larger than 1868

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5753RG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 1272CY is in, date created should larger than 1808

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1272CY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1808)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 7300NC is in, date created should larger than 1883

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7300NC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1883)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8953HU is in, date created should larger than 1822

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8953HU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 8075II is in, date created should larger than 1870

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8075II"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1870)}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5052CT is in, date created should larger than 1838

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5052CT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6718CX is in, date created should larger than 1869

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6718CX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1869)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3175MH in that date created later than 1875?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3175MH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1875)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6086PR in that date created later than 1817?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6086PR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1817)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8911SI in that date created later than 1911?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8911SI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3722GF in that date created later than 1829?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3722GF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1829)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6847ZU in that date created later than 1946?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6847ZU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7399GV in that date created later than 1894?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7399GV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8443XU in that date created later than 1895?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8443XU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1895)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9281WW in that date created later than 1946?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9281WW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8556NU in that date created later than 1865?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8556NU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3364OI in that date created later than 1875?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3364OI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1875)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8456CN in that date created later than 1844?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8456CN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1844)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3135VG in that date created later than 1840?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3135VG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7303IS in that date created later than 1921?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7303IS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1921)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4912LA in that date created later than 1946?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4912LA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6901CV in that date created later than 1831?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6901CV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1831)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1565DC in that date created later than 1815?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1565DC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1815)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7791DR in that date created later than 1868?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7791DR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2127HM in that date created later than 1826?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2127HM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1826)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4113BB in that date created later than 1835?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4113BB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1835)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8741ZM in that date created later than 1860?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8741ZM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1860)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 3945VB located in with date created no earlier than 1802

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3945VB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1802)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5164HN located in with date created no earlier than 1908

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5164HN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1908)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5983VG located in with date created no earlier than 1942

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5983VG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1942)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 4099GF located in with date created no earlier than 1889

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4099GF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1889)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3157RR located in with date created no earlier than 1940

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3157RR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1940)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 1681IO located in with date created no earlier than 1861

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1681IO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1861)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1618DV located in with date created no earlier than 1815

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1618DV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1815)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 3060TP located in with date created no earlier than 1820

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3060TP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1820)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 5859MZ located in with date created no earlier than 1930

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5859MZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1930)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 8116KS located in with date created no earlier than 1886

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8116KS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7902AB located in with date created no earlier than 1926

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7902AB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1926)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2863MB located in with date created no earlier than 1832

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2863MB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1832)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 8816NJ located in with date created no earlier than 1801

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8816NJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1169DZ located in with date created no earlier than 1893

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1169DZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 8785FZ located in with date created no earlier than 1830

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8785FZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 6156GR located in with date created no earlier than 1852

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6156GR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1852)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
The palces in the administrative area where postal address 9492TK located in with date created no earlier than 1918

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9492TK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2039KK located in with date created no earlier than 1937

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2039KK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1937)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 9419ZE located in with date created no earlier than 1865

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9419ZE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1922WX located in with date created no earlier than 1921

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1922WX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1921)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7607ZS in, date created should later than 1902

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7607ZS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1902)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1360PM in, date created should later than 1851

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1360PM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1851)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5225WV in, date created should later than 1902

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5225WV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1902)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 8593XM in, date created should later than 1819

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8593XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1819)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 8386WA in, date created should later than 1916

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8386WA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1916)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 4959EO in, date created should later than 1921

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4959EO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1921)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7389VO in, date created should later than 1894

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7389VO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 8078SC in, date created should later than 1893

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8078SC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7061PB in, date created should later than 1800

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7061PB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 1561EI in, date created should later than 1876

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1561EI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 3883MA in, date created should later than 1818

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3883MA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1818)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 6790BM in, date created should later than 1837

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6790BM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1837)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2774EN in, date created should later than 1939

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2774EN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1939)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5714JZ in, date created should later than 1837

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5714JZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1837)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2022WI in, date created should later than 1811

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2022WI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1811)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2679PW in, date created should later than 1827

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2679PW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1827)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 8071RQ in, date created should later than 1923

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8071RQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1923)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5345AD in, date created should later than 1842

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5345AD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1842)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7567AC in, date created should later than 1941

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7567AC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 1392UM in, date created should later than 1893

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1392UM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1090OH located in, date created later than 1848

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1090OH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1848)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8609DV located in, date created later than 1869

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8609DV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1869)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1451UO located in, date created later than 1877

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1451UO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1877)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1035DN located in, date created later than 1814

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1035DN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 2777DC located in, date created later than 1880

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2777DC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1880)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 5792RC located in, date created later than 1834

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5792RC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1834)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3758YF located in, date created later than 1906

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3758YF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1906)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1279EC located in, date created later than 1912

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1279EC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1912)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9202CA located in, date created later than 1876

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9202CA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5182HC located in, date created later than 1884

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5182HC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1884)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9582HA located in, date created later than 1843

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9582HA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1843)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3093XL located in, date created later than 1849

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3093XL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1849)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8029TU located in, date created later than 1855

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8029TU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 4795IU located in, date created later than 1898

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4795IU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9784UT located in, date created later than 1918

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9784UT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9991DW located in, date created later than 1890

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9991DW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1890)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 5208UG located in, date created later than 1936

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5208UG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1936)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1175RD located in, date created later than 1891

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1175RD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1891)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6025UU located in, date created later than 1885

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6025UU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1087CJ located in, date created later than 1901

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1087CJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated >= 1901)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6606WT is in, date created should earlier than 2011

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6606WT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6287BF is in, date created should earlier than 1955

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6287BF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3289XM is in, date created should earlier than 1966

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3289XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3928BG is in, date created should earlier than 2018

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3928BG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 6696LF is in, date created should earlier than 1988

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6696LF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 2245UL is in, date created should earlier than 1998

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2245UL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 1366HI is in, date created should earlier than 2003

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1366HI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4942UZ is in, date created should earlier than 1969

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4942UZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5900ZA is in, date created should earlier than 1970

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5900ZA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1970)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3380EY is in, date created should earlier than 1977

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3380EY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1977)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 9617PG is in, date created should earlier than 1973

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9617PG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 7674GM is in, date created should earlier than 2011

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7674GM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 3542NI is in, date created should earlier than 1971

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3542NI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 5985GP is in, date created should earlier than 2008

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5985GP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4896MR is in, date created should earlier than 1976

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4896MR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 1503SI is in, date created should earlier than 2010

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1503SI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 7602LO is in, date created should earlier than 1999

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7602LO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 4293LH is in, date created should earlier than 1974

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4293LH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 2268BD is in, date created should earlier than 1996

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2268BD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show palces of administrative area where post code 2072WB is in, date created should earlier than 2010

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2072WB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3792BC in that date created smaller than 2009?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3792BC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4822FK in that date created smaller than 1981?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4822FK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3580EN in that date created smaller than 2011?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3580EN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8576DO in that date created smaller than 2001?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8576DO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4581FI in that date created smaller than 1951?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4581FI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1951)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2536ZK in that date created smaller than 1980?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2536ZK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7965XU in that date created smaller than 1958?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7965XU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4875FC in that date created smaller than 1959?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4875FC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1438YT in that date created smaller than 2007?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1438YT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2007)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4977FJ in that date created smaller than 2018?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4977FJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9172SM in that date created smaller than 1986?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9172SM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1209KO in that date created smaller than 1984?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1209KO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9753ZR in that date created smaller than 1959?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9753ZR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2033TP in that date created smaller than 1997?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2033TP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1364MN in that date created smaller than 1989?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1364MN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9999JU in that date created smaller than 1953?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9999JU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1953)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5170MD in that date created smaller than 2015?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5170MD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2015)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7261XG in that date created smaller than 1993?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7261XG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9989LA in that date created smaller than 1965?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9989LA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5005LG in that date created smaller than 1988?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5005LG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6882EM located in with date created no later than 2020

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6882EM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 6682VY located in with date created no later than 2003

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6682VY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2505WF located in with date created no later than 1972

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2505WF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 4230JB located in with date created no later than 1991

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4230JB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 8136SJ located in with date created no later than 1992

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8136SJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1992)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 8744DY located in with date created no later than 1973

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8744DY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2350AT located in with date created no later than 2011

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2350AT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1056QF located in with date created no later than 1959

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1056QF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 4084ZX located in with date created no later than 1967

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4084ZX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 1112DV located in with date created no later than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1112DV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 4120ZM located in with date created no later than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4120ZM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 7446RD located in with date created no later than 1970

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7446RD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1970)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 7368XM located in with date created no later than 1988

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7368XM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 9856NI located in with date created no later than 2004

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9856NI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2808NC located in with date created no later than 1984

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2808NC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2470AT located in with date created no later than 1971

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2470AT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 8306SG located in with date created no later than 1957

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8306SG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 1361VY located in with date created no later than 2020

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1361VY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2067VR located in with date created no later than 2020

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2067VR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 3195UB located in with date created no later than 2008

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3195UB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 6537ZP in, date created should earlier than 2002

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6537ZP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5647EN in, date created should earlier than 1966

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5647EN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 9460LN in, date created should earlier than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9460LN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 1252BS in, date created should earlier than 1978

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1252BS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5932EB in, date created should earlier than 1954

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5932EB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 3825UL in, date created should earlier than 1980

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3825UL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 4088DD in, date created should earlier than 1982

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4088DD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 7517BD in, date created should earlier than 1970

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7517BD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1970)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1746VQ in, date created should earlier than 1975

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1746VQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 1050ZB in, date created should earlier than 2016

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1050ZB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 2854BI in, date created should earlier than 1989

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2854BI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1810TN in, date created should earlier than 1974

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1810TN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1972IW in, date created should earlier than 1975

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1972IW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 8174IM in, date created should earlier than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8174IM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6182FP in, date created should earlier than 2017

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6182FP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 6438ML in, date created should earlier than 1954

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6438ML"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9693HV in, date created should earlier than 1993

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9693HV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5531PB in, date created should earlier than 1977

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5531PB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1977)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 6817IH in, date created should earlier than 1990

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6817IH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places of the administrative area that postal address 5287NW in, date created should earlier than 1989

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5287NW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7742HG located in, date created smaller than 1956

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7742HG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9060EK located in, date created smaller than 1962

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9060EK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1962)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3234WL located in, date created smaller than 2000

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3234WL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8893ZU located in, date created smaller than 2017

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8893ZU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 5513OU located in, date created smaller than 2012

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5513OU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6688RU located in, date created smaller than 2004

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6688RU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8135CE located in, date created smaller than 2013

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8135CE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 2933UQ located in, date created smaller than 1992

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2933UQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1992)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3221IU located in, date created smaller than 1952

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3221IU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 9052EQ located in, date created smaller than 1994

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9052EQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3892EY located in, date created smaller than 1986

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3892EY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 1265JQ located in, date created smaller than 2017

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1265JQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 5396CY located in, date created smaller than 1996

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5396CY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 6177NY located in, date created smaller than 1982

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6177NY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8923UV located in, date created smaller than 1961

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8923UV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 3029NF located in, date created smaller than 1981

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3029NF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981)}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6603NZ located in, date created smaller than 1988

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6603NZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7673AL located in, date created smaller than 1965

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7673AL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 8677CI located in, date created smaller than 1996

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8677CI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996)}"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the places of the administrative area that postal address 7728EW located in, date created smaller than 1967

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7728EW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. ?places schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967)}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 4629BU is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4629BU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 4898ZP is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4898ZP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 2094LT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2094LT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7387BF is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7387BF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 9302KC is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9302KC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 4738VT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4738VT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 5009WX is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5009WX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 8121VO is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8121VO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 4395XG is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4395XG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 4986VM is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4986VM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 1585OF is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1585OF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 6088OT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6088OT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 9839TD is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9839TD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7164NA is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7164NA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 2191IT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2191IT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 3614XT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3614XT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 1650YL is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1650YL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 9050SY is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9050SY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7249MK is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7249MK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 6380UD is in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6380UD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4426EQ in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4426EQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7744VP in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7744VP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8473SB in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8473SB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9673GK in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9673GK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7273LM in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7273LM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9441LM in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9441LM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6293LY in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6293LY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3703GN in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3703GN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2640BQ in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2640BQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3832LY in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3832LY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6948SW in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6948SW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1590GA in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1590GA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2005OX in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2005OX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5605CD in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5605CD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6738BU in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6738BU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5721LL in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5721LL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5739XE in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5739XE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7070IH in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7070IH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5697ZL in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5697ZL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6077QF in?

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6077QF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2489LI located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2489LI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 3488JT located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3488JT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 4491IQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4491IQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 5997BR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5997BR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 6060OM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6060OM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 5083VS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5083VS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7872XH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7872XH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7438AL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7438AL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 5948QE located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5948QE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7777JL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7777JL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2220LQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2220LQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 9983KF located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9983KF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7758XK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7758XK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 9269YY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9269YY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 9846ZR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9846ZR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7624KK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7624KK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 3361NN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3361NN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2319XR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2319XR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 6973WT located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6973WT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2173SO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2173SO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6500GU in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6500GU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4716WA in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4716WA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5585FT in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5585FT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9047RI in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9047RI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8062MW in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8062MW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3746EO in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3746EO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2763TH in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2763TH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6464BY in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6464BY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2205GJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2205GJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4765IP in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4765IP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7277PJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7277PJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9294AK in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9294AK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8226ZN in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8226ZN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8864BC in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8864BC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6890PH in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6890PH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4248BB in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4248BB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7062JY in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7062JY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1984LS in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1984LS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1949QZ in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1949QZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6692BI in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6692BI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9554YB located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9554YB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4948SO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4948SO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2479KD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2479KD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4140SV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4140SV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5911NZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5911NZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2899LI located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2899LI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4734UV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4734UV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3210SO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3210SO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7047RZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7047RZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1041QE located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1041QE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9860PK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9860PK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9071QR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9071QR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6793FH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6793FH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5287OY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5287OY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2975OV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2975OV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4521DN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4521DN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4253UX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4253UX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7939MC located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7939MC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1607TT located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1607TT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9806KD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name (COUNT(?places) as ?number) WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9806KD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7592AA is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7592AA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 2740PI is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2740PI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 1482SP is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1482SP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 5437EK is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5437EK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7698KM is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7698KM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 3089EG is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3089EG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 1850NI is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1850NI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 2890SR is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2890SR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 2831TH is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2831TH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7564TV is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7564TV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 8706YN is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8706YN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 9429DT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9429DT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 9867JP is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9867JP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 8894JV is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8894JV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 2960IS is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2960IS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 1811VY is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1811VY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 7209AH is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7209AH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 6922SL is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6922SL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 5285YS is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5285YS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show palces of administrative area where post code 9561WT is in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9561WT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9262ON in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9262ON"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6264QH in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6264QH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4170FQ in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4170FQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 8664TF in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8664TF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3095GI in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3095GI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7651FI in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7651FI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7386YD in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7386YD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 4146TN in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4146TN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6041SR in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6041SR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6297FO in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6297FO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2685KB in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2685KB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
What are the palces in the administrative area that postal address 2283SN in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2283SN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1126IL in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1126IL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 7752QL in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7752QL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9555LN in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9555LN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 5288SV in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5288SV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 9366EY in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9366EY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 3502HS in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3502HS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 1530WU in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1530WU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are the palces in the administrative area that postal address 6931QT in?

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6931QT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 6660ZS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6660ZS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 1589RG located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1589RG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7476IM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7476IM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 9374RR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9374RR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 4038NR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4038NR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2560XP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2560XP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 1724NX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1724NX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 8171WP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8171WP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 1914SC located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1914SC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 8151AU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8151AU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 1310EV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1310EV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 8312HL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8312HL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 7818RU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7818RU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 8804LM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8804LM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
The palces in the administrative area where postal address 2116EH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2116EH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 2562MI located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2562MI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 9753OA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9753OA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 5613UX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5613UX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 6812KD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6812KD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
The palces in the administrative area where postal address 5724YJ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5724YJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9700SQ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9700SQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3173SE in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3173SE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1956TQ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1956TQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4733PM in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4733PM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 6321LF in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6321LF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1762TN in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1762TN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2878FU in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2878FU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1680SO in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1680SO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 3012FM in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3012FM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 4327OJ in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4327OJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 5799JU in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5799JU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8988XV in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8988XV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9628FU in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9628FU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8037XC in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8037XC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 1736IF in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1736IF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 7337BU in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7337BU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9607CP in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9607CP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 2507KP in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2507KP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 9847XX in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9847XX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show places of the administrative area that postal address 8300IK in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8300IK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7122SP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7122SP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5428CV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5428CV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9727MK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9727MK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2788QL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2788QL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 4405RP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4405RP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3706IW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3706IW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7236BS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7236BS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 5279GH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5279GH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8347JW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8347JW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1616QA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1616QA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9356ZH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9356ZH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3790JR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3790JR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 3544HS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3544HS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2638CW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2638CW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 8862WV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8862WV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 7681FV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7681FV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 1934BP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1934BP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 9325IZ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9325IZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 2284NH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2284NH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the places of the administrative area that postal address 6491VJ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name ?places WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6491VJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name. ?administrativearea schema:containsPlace ?places. }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 5692NE is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5692NE"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8047BP is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8047BP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8901AY is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8901AY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show the administrative area where post code 3119BG is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3119BG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show the administrative area where post code 3994PS is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3994PS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 4743BZ is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4743BZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8431IC is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8431IC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 7901EN is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7901EN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 7131NN is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7131NN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 3615RN is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3615RN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 1633LW is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1633LW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 7414BM is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7414BM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show the administrative area where post code 2801SX is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2801SX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 5678RK is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5678RK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 7743UD is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7743UD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8239CH is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8239CH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 2629PI is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2629PI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8761OA is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8761OA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8376DB is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8376DB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area where post code 8162EN is located.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8162EN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 1776LU in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1776LU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 9969GX in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9969GX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 3651HL in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3651HL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 7256RJ in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7256RJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 6617GF in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6617GF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 9582DD in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9582DD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 8857VC in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8857VC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Which administrative area does postal address 1353DZ in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1353DZ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Which administrative area does postal address 3072PP in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3072PP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 7268ET in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7268ET"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 5372WD in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5372WD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 6923UG in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6923UG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 9254PR in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9254PR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 4139YT in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4139YT"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 5686DU in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5686DU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 9820LO in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9820LO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 2657QG in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2657QG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 6286DU in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6286DU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 4465BI in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4465BI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Which administrative area does postal address 5706PG in?

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5706PG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 9907WI located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9907WI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 5965FY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5965FY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 1161PJ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1161PJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 4194XP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4194XP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 8153IU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8153IU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 1103SO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1103SO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 2670MR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2670MR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 2382JX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2382JX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 6443NB located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6443NB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 5934BC located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5934BC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 6560AU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6560AU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 4069IG located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4069IG"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 9230JL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9230JL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 1134NI located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1134NI"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 2478DO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2478DO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 2765AH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2765AH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 5834XO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5834XO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 4308PW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4308PW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 1903QU located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1903QU"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
The city that postal address 7067YO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7067YO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 3183ZQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3183ZQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 2926VM located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2926VM"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 4248CN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4248CN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 1530DF located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1530DF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 3490OB located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3490OB"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 1460DD located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1460DD"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 1858MC located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1858MC"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 6494TO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6494TO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 8316HL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8316HL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 1930KY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1930KY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 8085SF located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8085SF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 9295KW located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9295KW"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 2624US located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2624US"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 1127MH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1127MH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 7877VY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7877VY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 2458FV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2458FV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 2489NL located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2489NL"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 5502ZS located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5502ZS"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 7312UV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7312UV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the administrative area that postal address 2564BY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2564BY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 4365SX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4365SX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 6024YK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6024YK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 6122KK located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6122KK"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 4963SJ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4963SJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 9086AQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9086AQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 4393HJ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4393HJ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 6497JX located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6497JX"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 9178HP located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9178HP"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 3316KQ located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3316KQ"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 6458LA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6458LA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 8139XA located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8139XA"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 6822XV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6822XV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 7412MN located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7412MN"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 1624YO located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1624YO"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 5988MH located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5988MH"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 3967MV located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3967MV"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 2942UR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2942UR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 5440RR located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5440RR"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 3229LF located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3229LF"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Postal Address, name, Name


Now we have a natural language question: 
Show the name of the administrative area that postal address 4697WY located in.

The corresponding sparql query is:
SELECT DISTINCT ?name WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4697WY"". ?place schema:address ?postaladdress. ?administrativearea schema:containsPlace ?place. ?administrativearea schema:name ?name}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2271TC.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2271TC"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2356JO.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2356JO"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5560PG.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5560PG"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9032TF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9032TF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3283FS.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3283FS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 7882PS.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7882PS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 6793QN.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6793QN"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4176QK.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4176QK"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2765UG.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2765UG"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2526UD.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2526UD"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1583FO.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1583FO"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2834VN.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2834VN"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 6983VN.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6983VN"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 8328VK.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8328VK"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9467BT.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9467BT"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9666PW.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9666PW"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3746AV.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3746AV"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 8398MU.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8398MU"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3263ET.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3263ET"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9017XU.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9017XU"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5828OJ

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5828OJ"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1984UN

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1984UN"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7313SR

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7313SR"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9823ZY

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9823ZY"".}"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show addresses of post code 5012ED

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5012ED"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5347CX

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5347CX"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8031OA

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8031OA"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5656OE

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5656OE"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7816UI

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7816UI"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1163OH

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1163OH"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1197JC

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1197JC"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2047WG

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2047WG"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9066CH

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9066CH"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7182ZS

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7182ZS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6172KY

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6172KY"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1038LH

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1038LH"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9254HV

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9254HV"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8514TQ

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8514TQ"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3621SS

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3621SS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3097SD

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3097SD"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7017OQ.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7017OQ"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9250VU.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9250VU"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1322WF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1322WF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5487TH.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5487TH"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7165HA.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7165HA"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3796YC.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3796YC"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1820NF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1820NF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 4590FA.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4590FA"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 6244SX.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6244SX"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 2402GK.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2402GK"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8146OT.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8146OT"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8275DX.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8275DX"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1923XF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1923XF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7030LR.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7030LR"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3765JP.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3765JP"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 2729IK.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2729IK"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 6299NF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6299NF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 2015ID.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2015ID"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 6801LS.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6801LS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 2358IR.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2358IR"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7908QO.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7908QO"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2619FK.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2619FK"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7802EF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7802EF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6928GI.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6928GI"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6309CJ.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6309CJ"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8765PR.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8765PR"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2769RR.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2769RR"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1945CS.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1945CS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2742KW.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2742KW"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 4921LT.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4921LT"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7579JW.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7579JW"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8987JH.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8987JH"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 5219IH.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5219IH"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 3393AX.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3393AX"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1968AZ.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1968AZ"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6725YK.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6725YK"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 5702VZ.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5702VZ"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6663DF.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6663DF"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8025WS.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8025WS"".}"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8661RH.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress  WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8661RH"".}"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4484EI, floor size smaller than 747.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4484EI"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 747) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4982JL, floor size smaller than 886.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4982JL"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 886) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4187LM, floor size smaller than 736.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4187LM"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 736) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1635PH, floor size smaller than 801.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1635PH"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 801) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9925VG, floor size smaller than 854.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9925VG"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 854) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9733UZ, floor size smaller than 506.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9733UZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 506) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3206YQ, floor size smaller than 844.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3206YQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 844) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2492WS, floor size smaller than 642.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2492WS"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 642) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2198CN, floor size smaller than 956.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2198CN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 956) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 7916DX, floor size smaller than 702.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7916DX"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 702) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 6491EJ, floor size smaller than 535.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6491EJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 535) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5254MZ, floor size smaller than 909.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5254MZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 909) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5507ON, floor size smaller than 605.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5507ON"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 605) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5776RO, floor size smaller than 634.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5776RO"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 634) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1052NR, floor size smaller than 679.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1052NR"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 679) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4047NR, floor size smaller than 985.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4047NR"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 985) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9502YZ, floor size smaller than 752.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9502YZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 752) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9427RC, floor size smaller than 536.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9427RC"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 536) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4850ZW, floor size smaller than 990.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4850ZW"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 990) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2678WH, floor size smaller than 910.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2678WH"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 910) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6383ZU with floor size smaller than 619

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6383ZU"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 619) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6760BZ with floor size smaller than 888

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6760BZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 888) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9120IT with floor size smaller than 820

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9120IT"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 820) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7879YD with floor size smaller than 546

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7879YD"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 546) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6346QE with floor size smaller than 689

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6346QE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 689) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4057IK with floor size smaller than 659

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4057IK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 659) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8597YN with floor size smaller than 719

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8597YN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 719) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3746WR with floor size smaller than 607

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3746WR"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 607) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4760CG with floor size smaller than 515

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4760CG"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 515) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8333AX with floor size smaller than 555

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8333AX"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 555) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7591KS with floor size smaller than 813

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7591KS"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 813) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4793MP with floor size smaller than 754

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4793MP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 754) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2184BM with floor size smaller than 689

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2184BM"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 689) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6106ZV with floor size smaller than 785

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6106ZV"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 785) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8435FE with floor size smaller than 762

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8435FE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 762) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9050GU with floor size smaller than 717

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9050GU"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 717) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6089MY with floor size smaller than 736

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6089MY"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 736) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6254LP with floor size smaller than 553

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6254LP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 553) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4115ZC with floor size smaller than 722

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4115ZC"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 722) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7460XJ with floor size smaller than 901

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7460XJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 901) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3714KD with floor size no larger than 701.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3714KD"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 701) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5358FF with floor size no larger than 924.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5358FF"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 924) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9893RQ with floor size no larger than 576.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9893RQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 576) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 6936EP with floor size no larger than 746.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6936EP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 746) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 2772WJ with floor size no larger than 924.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2772WJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 924) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7119JX with floor size no larger than 662.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7119JX"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 662) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8826FE with floor size no larger than 840.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8826FE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 840) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9996MF with floor size no larger than 902.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9996MF"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 902) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9107NB with floor size no larger than 567.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9107NB"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 567) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 6251YZ with floor size no larger than 906.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6251YZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 906) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8259VS with floor size no larger than 886.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8259VS"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 886) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5647GI with floor size no larger than 659.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5647GI"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 659) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 2313AK with floor size no larger than 742.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2313AK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 742) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3415BW with floor size no larger than 890.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3415BW"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 890) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1654AV with floor size no larger than 905.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1654AV"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 905) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3758RK with floor size no larger than 794.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3758RK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 794) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5097XA with floor size no larger than 864.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5097XA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 864) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 4597RZ with floor size no larger than 926.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4597RZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 926) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5426EP with floor size no larger than 661.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5426EP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 661) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
The postal addresses that have postal code 1795CZ with floor size no larger than 765.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1795CZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 765) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1495TA, with floor size smaller than 791.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1495TA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 791) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8360ZA, with floor size smaller than 742.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8360ZA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 742) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1151QL, with floor size smaller than 684.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1151QL"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 684) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6788TS, with floor size smaller than 933.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6788TS"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 933) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6734ZK, with floor size smaller than 558.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6734ZK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 558) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 3590MB, with floor size smaller than 975.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3590MB"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 975) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6419UV, with floor size smaller than 889.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6419UV"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 889) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 5778UD, with floor size smaller than 692.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5778UD"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 692) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2747EM, with floor size smaller than 788.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2747EM"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 788) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6909UT, with floor size smaller than 797.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6909UT"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 797) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 5007AG, with floor size smaller than 665.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5007AG"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 665) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 3764OZ, with floor size smaller than 807.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3764OZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 807) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6594ZC, with floor size smaller than 717.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6594ZC"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 717) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8578PK, with floor size smaller than 654.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8578PK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 654) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1081KU, with floor size smaller than 932.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1081KU"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 932) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 5181DE, with floor size smaller than 793.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5181DE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 793) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2950AE, with floor size smaller than 545.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2950AE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 545) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7096YV, with floor size smaller than 687.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7096YV"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 687) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1948DN, with floor size smaller than 752.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1948DN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 752) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2697ZA, with floor size smaller than 620.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2697ZA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 620) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 7087QZ, floor size larger than 64.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7087QZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 64) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1803XF, floor size larger than 26.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1803XF"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 26) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2964RW, floor size larger than 112.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2964RW"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 112) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 6487IX, floor size larger than 78.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6487IX"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 78) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2578ZU, floor size larger than 250.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2578ZU"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 250) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 6220PN, floor size larger than 148.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6220PN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 148) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1493NA, floor size larger than 246.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1493NA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 246) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3988YE, floor size larger than 310.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3988YE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 310) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 8806FO, floor size larger than 186.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8806FO"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 186) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4904UI, floor size larger than 97.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4904UI"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 97) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5858TV, floor size larger than 241.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5858TV"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 241) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3943TF, floor size larger than 480.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3943TF"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 480) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 7603XB, floor size larger than 292.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7603XB"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 292) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2045VJ, floor size larger than 199.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2045VJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 199) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 8165QU, floor size larger than 290.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8165QU"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 290) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1531DY, floor size larger than 108.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1531DY"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 108) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1508ZB, floor size larger than 83.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1508ZB"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 83) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3251PK, floor size larger than 216.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3251PK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 216) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 8369FO, floor size larger than 240.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8369FO"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 240) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 9821UN, floor size larger than 84.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9821UN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 84) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6205PL with floor size bigger than 137

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6205PL"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 137) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2829DA with floor size bigger than 13

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2829DA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 13) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show addresses of post code 2231XP with floor size bigger than 215

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2231XP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 215) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7795EK with floor size bigger than 361

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7795EK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 361) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3836DA with floor size bigger than 144

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3836DA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 144) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2914VE with floor size bigger than 416

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2914VE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 416) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7548ZQ with floor size bigger than 291

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7548ZQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 291) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8191CD with floor size bigger than 259

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8191CD"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 259) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2612EA with floor size bigger than 369

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2612EA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 369) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3793EL with floor size bigger than 124

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3793EL"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 124) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5339CN with floor size bigger than 483

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5339CN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 483) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7032DH with floor size bigger than 253

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7032DH"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 253) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9545WE with floor size bigger than 151

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9545WE"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 151) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8435LO with floor size bigger than 484

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8435LO"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 484) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9893FQ with floor size bigger than 318

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9893FQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 318) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4821DO with floor size bigger than 255

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4821DO"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 255) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7713XM with floor size bigger than 230

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7713XM"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 230) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4165LS with floor size bigger than 105

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4165LS"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 105) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5608TN with floor size bigger than 222

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5608TN"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 222) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9711ER with floor size bigger than 426

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9711ER"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 426) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9637FJ with floor size larger than 75.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9637FJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 75) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9651GI with floor size larger than 134.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9651GI"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 134) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7982FV with floor size larger than 300.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7982FV"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 300) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9988SQ with floor size larger than 14.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9988SQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 14) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7095ES with floor size larger than 22.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7095ES"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 22) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5489RW with floor size larger than 390.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5489RW"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 390) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8823IG with floor size larger than 126.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8823IG"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 126) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 6174QC with floor size larger than 168.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6174QC"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 168) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3056VL with floor size larger than 273.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3056VL"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 273) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1516FO with floor size larger than 254.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1516FO"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 254) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9745IQ with floor size larger than 200.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9745IQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 200) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5596BC with floor size larger than 158.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5596BC"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 158) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3828FD with floor size larger than 369.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3828FD"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 369) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5690HW with floor size larger than 404.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5690HW"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 404) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1450FP with floor size larger than 270.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1450FP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 270) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1211DQ with floor size larger than 16.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1211DQ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 16) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5916JW with floor size larger than 83.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5916JW"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 83) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8276UI with floor size larger than 28.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8276UI"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 28) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 4995RG with floor size larger than 177.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4995RG"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 177) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 1308WZ with floor size larger than 186.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1308WZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 186) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 9216SA, with floor size no smaller than 39.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9216SA"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 39) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 3687OR, with floor size no smaller than 88.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3687OR"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 88) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7278LD, with floor size no smaller than 250.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7278LD"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 250) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 1192IH, with floor size no smaller than 76.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1192IH"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 76) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8546EH, with floor size no smaller than 52.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8546EH"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 52) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 7970ID, with floor size no smaller than 326.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7970ID"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 326) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6786WY, with floor size no smaller than 233.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6786WY"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 233) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 4802BJ, with floor size no smaller than 464.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4802BJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 464) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 4594ML, with floor size no smaller than 161.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4594ML"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 161) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 9371HR, with floor size no smaller than 299.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9371HR"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 299) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 4491QL, with floor size no smaller than 153.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4491QL"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 153) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 2273FJ, with floor size no smaller than 242.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2273FJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 242) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 3744RJ, with floor size no smaller than 125.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3744RJ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 125) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 9861JK, with floor size no smaller than 354.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9861JK"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 354) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7463GF, with floor size no smaller than 491.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7463GF"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 491) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6723ZT, with floor size no smaller than 204.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6723ZT"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 204) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8085CX, with floor size no smaller than 134.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8085CX"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 134) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 6789VZ, with floor size no smaller than 223.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6789VZ"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 223) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8426YH, with floor size no smaller than 266.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8426YH"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 266) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 7723WP, with floor size no smaller than 70.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?floorsize WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7723WP"". ?place schema:address ?postaladdress. ?place schema:floorSzie ?floorsize. FILTER(?floorsize >= 70) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9082UH, date created later than 1909.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9082UH"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1909) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 8785WD, date created later than 1832.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8785WD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1832) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 4393LG, date created later than 1938.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4393LG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1938) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 8260KA, date created later than 1891.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8260KA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1891) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 4751DU, date created later than 1926.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4751DU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1926) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9410TE, date created later than 1891.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9410TE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1891) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 1092OF, date created later than 1835.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1092OF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1835) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 7711HA, date created later than 1947.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7711HA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1947) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 1504AB, date created later than 1922.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1504AB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1922) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 8890DF, date created later than 1828.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8890DF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1828) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 3674TE, date created later than 1808.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3674TE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1808) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 7417SV, date created later than 1911.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7417SV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 8654YP, date created later than 1820.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8654YP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1820) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2718GL, date created later than 1860.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2718GL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1860) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 3726NZ, date created later than 1950.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3726NZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1950) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 6765SY, date created later than 1830.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6765SY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 8931NC, date created later than 1855.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8931NC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9807JA, date created later than 1876.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9807JA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 4436YW, date created later than 1899.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4436YW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1899) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 6519WD, date created later than 1899.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6519WD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1899) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1616EW with date created later than 1948

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1616EW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3899XZ with date created later than 1831

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3899XZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1831) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8830LF with date created later than 1879

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8830LF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1879) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6908KB with date created later than 1917

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6908KB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4915MN with date created later than 1909

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4915MN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1909) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1434BZ with date created later than 1881

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1434BZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1881) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8828GM with date created later than 1912

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8828GM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1912) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8911ZN with date created later than 1804

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8911ZN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6344MS with date created later than 1846

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6344MS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1846) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3669AV with date created later than 1885

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3669AV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of post code 8191KA with date created later than 1922

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8191KA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1922) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2925UF with date created later than 1935

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2925UF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6568QJ with date created later than 1941

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6568QJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7830UL with date created later than 1839

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7830UL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1839) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2439HG with date created later than 1834

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2439HG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1834) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5288QM with date created later than 1945

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5288QM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9672OM with date created later than 1942

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9672OM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1942) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4050XW with date created later than 1919

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4050XW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1919) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4259WV with date created later than 1894

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4259WV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4568WC with date created later than 1825

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4568WC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1825) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 9296LG with date created after 1889.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9296LG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1889) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 1184BP with date created after 1894.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1184BP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 7801SH with date created after 1883.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7801SH"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1883) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 3716SW with date created after 1809.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3716SW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1809) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 5632RZ with date created after 1917.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5632RZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 4381LU with date created after 1811.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4381LU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1811) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 7795BK with date created after 1915.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7795BK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1915) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 4980HY with date created after 1803.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4980HY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1803) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 4891DA with date created after 1943.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4891DA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1943) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 8735VX with date created after 1839.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8735VX"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1839) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 2971EW with date created after 1896.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2971EW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 4654DG with date created after 1852.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4654DG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1852) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 6347XQ with date created after 1934.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6347XQ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1934) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 9450CX with date created after 1923.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9450CX"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1923) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 6488IC with date created after 1866.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6488IC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1866) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 8620NT with date created after 1830.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8620NT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 7798ZZ with date created after 1854.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7798ZZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1854) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 9370WJ with date created after 1805.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9370WJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1805) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 5091BF with date created after 1828.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5091BF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1828) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 4592KM with date created after 1800.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4592KM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 5395SE, with date created no earlier than 1935.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5395SE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 4814SA, with date created no earlier than 1811.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4814SA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1811) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 4089YJ, with date created no earlier than 1872.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4089YJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1872) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 1046JH, with date created no earlier than 1949.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1046JH"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 7329EW, with date created no earlier than 1876.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7329EW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 2355RR, with date created no earlier than 1847.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2355RR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1847) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 1512PJ, with date created no earlier than 1890.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1512PJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1890) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 8746SP, with date created no earlier than 1814.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8746SP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 6369BU, with date created no earlier than 1852.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6369BU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1852) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 5460RZ, with date created no earlier than 1887.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5460RZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1887) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 9619QM, with date created no earlier than 1908.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9619QM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1908) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 6597CH, with date created no earlier than 1925.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6597CH"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 5631TT, with date created no earlier than 1943.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5631TT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1943) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 4305CY, with date created no earlier than 1836.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4305CY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1836) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 3721JO, with date created no earlier than 1838.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3721JO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 9664KD, with date created no earlier than 1912.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9664KD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1912) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 7202RZ, with date created no earlier than 1925.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7202RZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 5569XO, with date created no earlier than 1893.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5569XO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Return all postal addresses with post code 9487VF, with date created no earlier than 1928.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9487VF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1928) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 5670CS, with date created no earlier than 1838.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5670CS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 4192MK, date created earlier than 1990.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4192MK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1259NK, date created earlier than 2006.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1259NK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2006) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 5283HU, date created earlier than 2011.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5283HU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 3824IE, date created earlier than 1996.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3824IE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9769BD, date created earlier than 1987.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9769BD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 4172SV, date created earlier than 1986.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4172SV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2311KD, date created earlier than 1976.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2311KD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 6826SG, date created earlier than 2011.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6826SG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 7618OG, date created earlier than 2014.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7618OG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4957KS, date created earlier than 1963.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4957KS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 3427HZ, date created earlier than 1983.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3427HZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4571RK, date created earlier than 1974.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4571RK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 6100QX, date created earlier than 1957.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6100QX"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 1198WS, date created earlier than 1979.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1198WS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1979) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 4817DQ, date created earlier than 1987.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4817DQ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9836FL, date created earlier than 1981.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9836FL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5774IU, date created earlier than 1960.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5774IU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9198IO, date created earlier than 2005.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9198IO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 2658DP, date created earlier than 1965.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2658DP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all postal addresses with postal code 9815RQ, date created earlier than 1950.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9815RQ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4326DS with date created earlier than 1978

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4326DS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5426LN with date created earlier than 1959

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5426LN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9467FC with date created earlier than 2017

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9467FC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5048WN with date created earlier than 2018

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5048WN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2116LW with date created earlier than 1955

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2116LW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7188FG with date created earlier than 2001

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7188FG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4082ZF with date created earlier than 1952

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4082ZF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8929ME with date created earlier than 1980

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8929ME"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7104MV with date created earlier than 1980

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7104MV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9270GM with date created earlier than 1995

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9270GM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8499EE with date created earlier than 1977

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8499EE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1977) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3291KW with date created earlier than 1994

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3291KW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4523PN with date created earlier than 1960

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4523PN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5801UL with date created earlier than 2013

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5801UL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3126SG with date created earlier than 1963

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3126SG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6253QR with date created earlier than 2010

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6253QR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8984LL with date created earlier than 1979

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8984LL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1979) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3480DA with date created earlier than 2018

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3480DA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6655WT with date created earlier than 1986

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6655WT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1764LM with date created earlier than 1951

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1764LM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1951) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 4363CG with date created earlier than 2020.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4363CG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 8096KR with date created earlier than 1982.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8096KR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9051HU with date created earlier than 1966.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9051HU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 6307KR with date created earlier than 1956.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6307KR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 3621KF with date created earlier than 1982.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3621KF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 2131PI with date created earlier than 2013.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2131PI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 1931FL with date created earlier than 2001.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1931FL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 2251FV with date created earlier than 2001.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2251FV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 1819YU with date created earlier than 2018.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1819YU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 2756AC with date created earlier than 1953.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2756AC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1953) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 2586MU with date created earlier than 2001.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2586MU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 7398BD with date created earlier than 1976.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7398BD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 8677UI with date created earlier than 1987.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8677UI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 5530GG with date created earlier than 1987.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5530GG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 1780RY with date created earlier than 2014.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1780RY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 1601ZU with date created earlier than 1987.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1601ZU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 1543NG with date created earlier than 1978.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1543NG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 9354AM with date created earlier than 1974.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9354AM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 2835YD with date created earlier than 1999.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2835YD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
The postal addresses that have postal code 7658PU with date created earlier than 1996.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7658PU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 6491RF, with date created no later than 1995.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6491RF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 1755YV, with date created no later than 1969.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1755YV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 9844TS, with date created no later than 2003.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9844TS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 3607RT, with date created no later than 1971.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3607RT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 6116XJ, with date created no later than 2020.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6116XJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 3578LW, with date created no later than 1967.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3578LW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 3979FI, with date created no later than 1951.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3979FI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1951) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 4321YY, with date created no later than 1993.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4321YY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 7373JE, with date created no later than 1957.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7373JE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 8586PF, with date created no later than 2010.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8586PF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 2201IO, with date created no later than 2007.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2201IO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2007) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 3003BS, with date created no later than 1954.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3003BS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 5440GG, with date created no later than 2008.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5440GG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 2026LW, with date created no later than 1983.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2026LW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 4007BI, with date created no later than 2004.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4007BI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 4813PU, with date created no later than 1963.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4813PU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 6078FW, with date created no later than 2013.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6078FW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 3727CR, with date created no later than 1965.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3727CR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 1057EA, with date created no later than 1973.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1057EA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973) }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Return all postal addresses with post code 5969HR, with date created no later than 2021.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5969HR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 6380XT, date created earlier than 1980, floor size smaller than 273.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6380XT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 273). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 7546HQ, date created earlier than 1975, floor size smaller than 392.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7546HQ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 392). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 2259RP, date created earlier than 2012, floor size smaller than 205.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2259RP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 205). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 1356LY, date created earlier than 1972, floor size smaller than 341.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1356LY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 341). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 6920YC, date created earlier than 1962, floor size smaller than 445.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6920YC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1962). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 445). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 4336TB, date created earlier than 1988, floor size smaller than 261.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4336TB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 261). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 3219CI, date created earlier than 2018, floor size smaller than 448.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3219CI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 448). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 1879BO, date created earlier than 2021, floor size smaller than 282.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1879BO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 282). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 6234UC, date created earlier than 2014, floor size smaller than 437.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6234UC"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 437). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 4875EJ, date created earlier than 2004, floor size smaller than 449.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4875EJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 449). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 2651TD, date created earlier than 2006, floor size smaller than 282.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2651TD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2006). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 282). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 4819AU, date created earlier than 2004, floor size smaller than 475.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4819AU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 475). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 9154KD, date created earlier than 1984, floor size smaller than 435.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9154KD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 435). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 9174NM, date created earlier than 1971, floor size smaller than 245.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9174NM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 245). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 9036JL, date created earlier than 2016, floor size smaller than 468.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9036JL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 468). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 8985WP, date created earlier than 2003, floor size smaller than 429.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8985WP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 429). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 4573TY, date created earlier than 1977, floor size smaller than 435.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4573TY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1977). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 435). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all postal addresses with postal code 1253NP, date created earlier than 2004, floor size smaller than 330.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1253NP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 330). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 5679AS, date created earlier than 1966, floor size smaller than 261.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5679AS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 261). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
Show all postal addresses with postal code 3028GK, date created earlier than 1976, floor size smaller than 222.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3028GK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 222). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1408VA with date created earlier than 1984, floor size smaller than 406

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1408VA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 406). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1178BA with date created earlier than 2012, floor size smaller than 432

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1178BA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 432). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1054NY with date created earlier than 1998, floor size smaller than 222

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1054NY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 222). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3003SD with date created earlier than 2018, floor size smaller than 250

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3003SD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 250). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6157LT with date created earlier than 1980, floor size smaller than 409

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6157LT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 409). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5586BZ with date created earlier than 1963, floor size smaller than 353

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5586BZ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 353). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3999QW with date created earlier than 1980, floor size smaller than 324

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3999QW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 324). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6576FO with date created earlier than 2016, floor size smaller than 308

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6576FO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 308). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6552GT with date created earlier than 1964, floor size smaller than 243

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6552GT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 243). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 3214MD with date created earlier than 1957, floor size smaller than 449

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3214MD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 449). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 2055FW with date created earlier than 2011, floor size smaller than 232

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2055FW"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 232). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4390BB with date created earlier than 1986, floor size smaller than 278

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4390BB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 278). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 8330OB with date created earlier than 1971, floor size smaller than 348

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8330OB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 348). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 7525QI with date created earlier than 1985, floor size smaller than 473

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7525QI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 473). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 5141DE with date created earlier than 2000, floor size smaller than 263

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5141DE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 263). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 6489ZN with date created earlier than 1964, floor size smaller than 440

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6489ZN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 440). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4392LO with date created earlier than 2005, floor size smaller than 421

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4392LO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 421). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 1795JS with date created earlier than 1976, floor size smaller than 287

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1795JS"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 287). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 4640OT with date created earlier than 1976, floor size smaller than 396

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4640OT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 396). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of post code 9747YL with date created earlier than 2004, floor size smaller than 497

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9747YL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 497). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 6842NL with date created earlier than 1953, floor size smaller than 202.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6842NL"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1953). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 202). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 8686JO with date created earlier than 1959, floor size smaller than 359.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8686JO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 359). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 8585BT with date created earlier than 1995, floor size smaller than 495.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8585BT"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 495). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 5397MP with date created earlier than 1976, floor size smaller than 417.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""5397MP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 417). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 4833QQ with date created earlier than 2016, floor size smaller than 387.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4833QQ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 387). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 4148UY with date created earlier than 2017, floor size smaller than 499.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4148UY"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 499). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 8908IV with date created earlier than 1995, floor size smaller than 371.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8908IV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 371). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 4168ZG with date created earlier than 2005, floor size smaller than 279.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4168ZG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 279). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 9048BK with date created earlier than 1989, floor size smaller than 441.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9048BK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 441). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 6082FB with date created earlier than 1973, floor size smaller than 364.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6082FB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 364). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 3630FD with date created earlier than 1965, floor size smaller than 271.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3630FD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 271). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Postal Address, PostalCode, Postal Code


Now we have a natural language question: 
The postal addresses that have postal code 3542HO with date created earlier than 2003, floor size smaller than 227.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3542HO"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 227). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 4364IR with date created earlier than 2013, floor size smaller than 242.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4364IR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 242). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 2716QR with date created earlier than 1965, floor size smaller than 378.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2716QR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 378). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 7868ZD with date created earlier than 1964, floor size smaller than 498.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7868ZD"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 498). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 1161AJ with date created earlier than 1965, floor size smaller than 330.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1161AJ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 330). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 7547WF with date created earlier than 1951, floor size smaller than 419.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7547WF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1951). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 419). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 8085SF with date created earlier than 1983, floor size smaller than 489.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8085SF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 489). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 4108VF with date created earlier than 2018, floor size smaller than 417.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4108VF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 417). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
The postal addresses that have postal code 1101MN with date created earlier than 1956, floor size smaller than 378.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1101MN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 378). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 8956CQ, with date created no later than 1988, floor size no larger than 356.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8956CQ"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 356). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 9578RR, with date created no later than 1953, floor size no larger than 216.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9578RR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1953). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 216). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 9941ND, with date created no later than 2015, floor size no larger than 291.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9941ND"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2015). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 291). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 4114AR, with date created no later than 1980, floor size no larger than 463.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4114AR"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 463). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 2016UM, with date created no later than 2005, floor size no larger than 476.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2016UM"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 476). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 2555TB, with date created no later than 1980, floor size no larger than 332.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""2555TB"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 332). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 9152WX, with date created no later than 1982, floor size no larger than 264.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9152WX"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 264). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address


Now we have a natural language question: 
Return all postal addresses with post code 9118FU, with date created no later than 1966, floor size no larger than 500.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""9118FU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 500). }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Return all postal addresses with post code 6348HA, with date created no later than 1975, floor size no larger than 394.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""6348HA"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 394). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 4751TN, with date created no later than 1987, floor size no larger than 423.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4751TN"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 423). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 7941TU, with date created no later than 1990, floor size no larger than 271.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7941TU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 271). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 3062YX, with date created no later than 1968, floor size no larger than 447.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3062YX"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1968). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 447). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 3173DG, with date created no later than 1978, floor size no larger than 371.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""3173DG"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 371). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Return all postal addresses with post code 7143RV, with date created no later than 1981, floor size no larger than 286.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7143RV"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 286). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 8472PF, with date created no later than 1995, floor size no larger than 491.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8472PF"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 491). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 1440SU, with date created no later than 2000, floor size no larger than 392.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1440SU"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 392). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 4564PE, with date created no later than 1954, floor size no larger than 335.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""4564PE"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 335). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 7919RI, with date created no later than 2021, floor size no larger than 212.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""7919RI"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 212). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Return all postal addresses with post code 8572KK, with date created no later than 1972, floor size no larger than 422.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""8572KK"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 422). }"
"Suppose we have a graph pattern:
Postal Address, PostalCode, Postal Code
Place, Address, Postal Address
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Return all postal addresses with post code 1715YP, with date created no later than 2015, floor size no larger than 348.

The corresponding sparql query is:
SELECT DISTINCT ?postaladdress ?datecreated WHERE {?postaladdress rdf:type schema:PostalAddress. ?postaladdress schema:postalCode ""1715YP"". ?place schema:address ?postaladdress. ?place schema:dateCreated ?datecreated. FILTER(?datecreated <= 2015). ?place schema:floorSzie ?floorsize. FILTER(?floorsize <= 348). }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Leimuiderbrug.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Leimuiderbrug.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Leimuiderbrug?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Leimuiderbrug

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Wommels.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Wommels.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Wommels?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Wommels

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Erichem.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Erichem""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Erichem.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Erichem""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Erichem?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Erichem""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Erichem

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Erichem""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Winterswijk Huppel.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Huppel""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Winterswijk Huppel.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Huppel""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Winterswijk Huppel?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Huppel""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Winterswijk Huppel

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Huppel""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Easterlittens.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Easterlittens.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Easterlittens?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Easterlittens

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Mookhoek.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Mookhoek.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Mookhoek?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Mookhoek

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Beneden-Leeuwen.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beneden-Leeuwen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Beneden-Leeuwen.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beneden-Leeuwen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Beneden-Leeuwen?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beneden-Leeuwen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Beneden-Leeuwen

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beneden-Leeuwen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Kloosterburen.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kloosterburen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Kloosterburen.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kloosterburen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Kloosterburen?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kloosterburen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Kloosterburen

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kloosterburen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Oldeholtpade.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Oldeholtpade.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Oldeholtpade?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Oldeholtpade

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all police stations, post offices and mosques of Farmsum.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Farmsum""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post offices, police stations and mosques of Farmsum.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Farmsum""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all mosques, police stations and post offices in Farmsum?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Farmsum""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Police stations, post offices and mosques in Farmsum

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?postoffice ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Farmsum""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?postoffice. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. ?postoffice schema:additionalType typeBuilding:postkantoor. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Haren Gn.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haren Gn""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and mosques of Haren Gn.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haren Gn""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Haren Gn?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haren Gn""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Haren Gn

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haren Gn""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Herpen.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herpen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and mosques of Herpen.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herpen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Herpen?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herpen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Herpen

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herpen""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Show all police stations and mosques of 's-Gravenhage.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenhage""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations and mosques of 's-Gravenhage.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenhage""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques and police stations in 's-Gravenhage?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenhage""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Police stations, mosques in 's-Gravenhage

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenhage""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Oldeholtpade.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and mosques of Oldeholtpade.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Oldeholtpade?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Oldeholtpade

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldeholtpade""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Zevenhoven.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zevenhoven""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and mosques of Zevenhoven.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zevenhoven""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Zevenhoven?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zevenhoven""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Zevenhoven

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zevenhoven""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Ouwster-Nijega.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ouwster-Nijega""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all police stations and mosques of Ouwster-Nijega.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ouwster-Nijega""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Ouwster-Nijega?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ouwster-Nijega""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Ouwster-Nijega

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ouwster-Nijega""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Westendorp.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westendorp""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and mosques of Westendorp.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westendorp""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Westendorp?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westendorp""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Westendorp

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westendorp""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Show all police stations and mosques of Leusden.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leusden""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations and mosques of Leusden.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leusden""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques and police stations in Leusden?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leusden""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Police stations, mosques in Leusden

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leusden""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and mosques of Burgwerd.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Burgwerd""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and mosques of Burgwerd.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Burgwerd""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all mosques and police stations in Burgwerd?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Burgwerd""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, mosques in Burgwerd

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Burgwerd""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Show all police stations and mosques of Nieuw- en Sint Joosland.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw- en Sint Joosland""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations and mosques of Nieuw- en Sint Joosland.

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw- en Sint Joosland""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques and police stations in Nieuw- en Sint Joosland?

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw- en Sint Joosland""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Church


Now we have a natural language question: 
Police stations, mosques in Nieuw- en Sint Joosland

The corresponding sparql query is:
SELECT DISTINCT ?policestation ?mosque WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw- en Sint Joosland""@nl. ?city schema:containsPlace ?policestation. ?city schema:containsPlace ?mosque. ?policestation schema:additionalType typeBuilding:politiebureau. ?mosque schema:additionalType typeBuilding:moskee. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Adorp.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Adorp""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and castles of Adorp.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Adorp""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Adorp?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Adorp""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Adorp

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Adorp""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Linden.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and castles of Linden.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Linden?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Linden

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Formerum.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Formerum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all police stations and castles of Formerum.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Formerum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Formerum?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Formerum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Formerum

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Formerum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Castle


Now we have a natural language question: 
Show all police stations and castles of Nutter.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations and castles of Nutter.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles and police stations in Nutter?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, additionalType, Castle


Now we have a natural language question: 
Police stations, castles in Nutter

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Hollum.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and castles of Hollum.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Hollum?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Hollum

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of De Veenhoop.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Veenhoop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all police stations and castles of De Veenhoop.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Veenhoop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in De Veenhoop?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Veenhoop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in De Veenhoop

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Veenhoop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Oosterstreek.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterstreek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all police stations and castles of Oosterstreek.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterstreek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Oosterstreek?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterstreek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Oosterstreek

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterstreek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Biest-Houtakker.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Biest-Houtakker""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and castles of Biest-Houtakker.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Biest-Houtakker""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Biest-Houtakker?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Biest-Houtakker""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Biest-Houtakker

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Biest-Houtakker""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Loo Gld.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loo Gld""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations and castles of Loo Gld.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loo Gld""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Loo Gld?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loo Gld""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Loo Gld

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loo Gld""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations and castles of Piershil.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piershil""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations and castles of Piershil.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piershil""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all castles and police stations in Piershil?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piershil""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations, castles in Piershil

The corresponding sparql query is:
SELECT DISTINCT ?castle ?policestation WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piershil""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?policestation. ?castle schema:additionalType typeBuilding:kasteel. ?policestation schema:additionalType typeBuilding:politiebureau. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Castle


Now we have a natural language question: 
Show all churches and castles of Hoogerheide.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogerheide""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church


Now we have a natural language question: 
Give me all churches and castles of Hoogerheide.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogerheide""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Hoogerheide?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogerheide""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Hoogerheide

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogerheide""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Tytsjerk.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tytsjerk""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Tytsjerk.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tytsjerk""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Tytsjerk?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tytsjerk""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Tytsjerk

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tytsjerk""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Asch.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Asch""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Asch.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Asch""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Asch?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Asch""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Asch

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Asch""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Axel.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Axel.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Axel?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Axel

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Geelbroek.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Place, Address, Postal Address


Now we have a natural language question: 
Give me all churches and castles of Geelbroek.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Geelbroek?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Geelbroek

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Lierop.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Lierop.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Lierop?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Lierop

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierop""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Overberg.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overberg""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Overberg.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overberg""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Overberg?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overberg""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Overberg

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overberg""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Maarn.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maarn""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Maarn.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maarn""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Maarn?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maarn""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Maarn

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maarn""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Leimuiderbrug.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Place, Address, Postal Address


Now we have a natural language question: 
Give me all churches and castles of Leimuiderbrug.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Leimuiderbrug?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Leimuiderbrug

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leimuiderbrug""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches and castles of Noordwijkerhout.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordwijkerhout""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and castles of Noordwijkerhout.

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordwijkerhout""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all castles and churches in Noordwijkerhout?

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordwijkerhout""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches, castles in Noordwijkerhout

The corresponding sparql query is:
SELECT DISTINCT ?castle ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordwijkerhout""@nl. ?city schema:containsPlace ?castle. ?city schema:containsPlace ?church. ?castle schema:additionalType typeBuilding:kasteel. ?church schema:additionalType typeBuilding:kerk. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Oldemarkt.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches and museums of Oldemarkt.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Oldemarkt?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Oldemarkt

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Olst.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olst""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches and museums of Olst.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olst""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all museums, hotels and churches in Olst?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olst""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Olst

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olst""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Nieuw-Roden.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw-Roden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches and museums of Nieuw-Roden.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw-Roden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Nieuw-Roden?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw-Roden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Nieuw-Roden

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw-Roden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Beerze.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all hotels, churches and museums of Beerze.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Beerze?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Beerze

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Haastrecht.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haastrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches and museums of Haastrecht.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haastrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Haastrecht?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haastrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Haastrecht

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haastrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Oudkarspel.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudkarspel""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Give me all hotels, churches and museums of Oudkarspel.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudkarspel""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Oudkarspel?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudkarspel""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Oudkarspel

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudkarspel""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches, museums and hotels of Ossendrecht.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ossendrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Give me all hotels, churches and museums of Ossendrecht.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ossendrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Ossendrecht?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ossendrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Ossendrecht

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ossendrecht""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Herwen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herwen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches and museums of Herwen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herwen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Herwen?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herwen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Herwen

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herwen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches, museums and hotels of Stiens.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stiens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Give me all hotels, churches and museums of Stiens.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stiens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all museums, hotels and churches in Stiens?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stiens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Stiens

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stiens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches, museums and hotels of Sintjohannesga.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches and museums of Sintjohannesga.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums, hotels and churches in Sintjohannesga?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches, hotels and museums in Sintjohannesga

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Dirkshorn.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Dirkshorn.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Dirkshorn?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Dirkshorn

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Goëngahuizen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goëngahuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Goëngahuizen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goëngahuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Goëngahuizen?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goëngahuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Goëngahuizen

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goëngahuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Zuidoostbeemster.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidoostbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Zuidoostbeemster.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidoostbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Zuidoostbeemster?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidoostbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Zuidoostbeemster

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidoostbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Dreischor.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dreischor""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Dreischor.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dreischor""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Dreischor?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dreischor""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Dreischor

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dreischor""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Eexterzandvoort.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eexterzandvoort""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Eexterzandvoort.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eexterzandvoort""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Eexterzandvoort?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eexterzandvoort""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Eexterzandvoort

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eexterzandvoort""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Barsingerhorn.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barsingerhorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Barsingerhorn.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barsingerhorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Barsingerhorn?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barsingerhorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Barsingerhorn

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barsingerhorn""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Kantens.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kantens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Kantens.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kantens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Kantens?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kantens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Kantens

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kantens""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Lollum.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lollum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Lollum.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lollum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Lollum?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lollum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Lollum

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lollum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Chaam.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Chaam""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Chaam.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Chaam""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Chaam?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Chaam""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Chaam

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Chaam""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all churches and museums of Bemelen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches and museums of Bemelen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums and churches in Bemelen?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Churches and museums in Bemelen

The corresponding sparql query is:
SELECT DISTINCT ?museum ?church WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?church. ?church schema:additionalType typeBuilding:kerk. ?museum schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Losdorp.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losdorp""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Losdorp.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losdorp""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Losdorp?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losdorp""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Losdorp

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losdorp""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Vlagtwedde.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Vlagtwedde.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Vlagtwedde?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Vlagtwedde

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Vorden.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Vorden.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Vorden?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Vorden

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorden""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Arriën.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arriën""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Arriën.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arriën""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Arriën?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arriën""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Arriën

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arriën""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Sibculo.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sibculo""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Sibculo.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sibculo""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Sibculo?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sibculo""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Sibculo

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sibculo""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Epse.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Epse.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Epse?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Epse

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Veessen.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Veessen.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Veessen?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Veessen

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Elburg.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elburg""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Elburg.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elburg""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Elburg?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elburg""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Elburg

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elburg""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Krommenie.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Krommenie.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Krommenie?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Krommenie

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all churches and hotels of Hornhuizen.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hornhuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, churches of Hornhuizen.

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hornhuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels and churches in Hornhuizen?

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hornhuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Churches and hotels in Hornhuizen

The corresponding sparql query is:
SELECT DISTINCT ?church ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hornhuizen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?church schema:additionalType typeBuilding:kerk. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Hieslum.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all hotels, museums of Hieslum.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Hieslum?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Hieslum

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Poortvliet.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortvliet""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Give me all hotels, museums of Poortvliet.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortvliet""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Poortvliet?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortvliet""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Poortvliet

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortvliet""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Musselkanaal.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Musselkanaal""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Give me all hotels, museums of Musselkanaal.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Musselkanaal""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Musselkanaal?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Musselkanaal""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Musselkanaal

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Musselkanaal""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Swichum.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swichum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all hotels, museums of Swichum.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swichum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Swichum?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swichum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Swichum

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swichum""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Oosterhesselen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, museums of Oosterhesselen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Oosterhesselen?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Oosterhesselen

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Middenbeemster.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middenbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum


Now we have a natural language question: 
Give me all hotels, museums of Middenbeemster.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middenbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Middenbeemster?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middenbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Middenbeemster

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middenbeemster""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Sebaldeburen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sebaldeburen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, museums of Sebaldeburen.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sebaldeburen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Sebaldeburen?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sebaldeburen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Sebaldeburen

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sebaldeburen""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Winterswijk Brinkheurne.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Brinkheurne""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all hotels, museums of Winterswijk Brinkheurne.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Brinkheurne""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Winterswijk Brinkheurne?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Brinkheurne""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Winterswijk Brinkheurne

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winterswijk Brinkheurne""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Rumpt.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rumpt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, museums of Rumpt.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rumpt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Rumpt?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rumpt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, additionalType, Hotel


Now we have a natural language question: 
Museums and hotels in Rumpt

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rumpt""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums and hotels of Steyl.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steyl""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels, museums of Steyl.

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steyl""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all hotels and museums in Steyl?

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steyl""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums and hotels in Steyl

The corresponding sparql query is:
SELECT DISTINCT ?museum ?hotel WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steyl""@nl. ?city schema:containsPlace ?museum. ?city schema:containsPlace ?hotel. ?museum schema:additionalType typeBuilding:museum. ?hotel schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Zuidlaren.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels of Zuidlaren.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Zuidlaren?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Zuidlaren

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all hotels of Wilhelminaoord.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminaoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel


Now we have a natural language question: 
Give me all hotels of Wilhelminaoord.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminaoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Wilhelminaoord?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminaoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Wilhelminaoord

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminaoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Winsum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels of Winsum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Winsum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Winsum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all hotels of It Heidenskip.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""It Heidenskip""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel


Now we have a natural language question: 
Give me all hotels of It Heidenskip.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""It Heidenskip""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are all hotels in It Heidenskip?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""It Heidenskip""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Hotels in It Heidenskip

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""It Heidenskip""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all hotels of Geeuwenbrug.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geeuwenbrug""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel


Now we have a natural language question: 
Give me all hotels of Geeuwenbrug.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geeuwenbrug""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Geeuwenbrug?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geeuwenbrug""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Geeuwenbrug

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geeuwenbrug""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Ubbena.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ubbena""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels of Ubbena.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ubbena""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Ubbena?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ubbena""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Ubbena

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ubbena""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Hulten.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels of Hulten.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Hulten?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Hulten

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all hotels of Ohé en Laak.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ohé en Laak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel


Now we have a natural language question: 
Give me all hotels of Ohé en Laak.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ohé en Laak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Ohé en Laak?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ohé en Laak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Hotels in Ohé en Laak

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ohé en Laak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Nieuwolda.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwolda""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels of Nieuwolda.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwolda""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Nieuwolda?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwolda""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Nieuwolda

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwolda""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Zeerijp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all hotels of Zeerijp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Where are all hotels in Zeerijp?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Zeerijp

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Leerdam.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leerdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations of Leerdam.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leerdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Leerdam?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leerdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Leerdam

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leerdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Hardenberg.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardenberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations of Hardenberg.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardenberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Hardenberg?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardenberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Hardenberg

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardenberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all police stations of De Knipe.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Knipe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations of De Knipe.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Knipe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are all police stations in De Knipe?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Knipe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Police stations in De Knipe

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Knipe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all police stations of Appelscha.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Appelscha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations of Appelscha.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Appelscha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Appelscha?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Appelscha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Appelscha

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Appelscha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Zeerijp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations of Zeerijp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Zeerijp?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Zeerijp

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Rohel.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rohel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations of Rohel.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rohel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Rohel?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rohel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Rohel

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rohel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Nederland.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all police stations of Nederland.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Nederland?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Nederland

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Bellingwolde.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bellingwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations of Bellingwolde.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bellingwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Bellingwolde?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bellingwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Bellingwolde

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bellingwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all police stations of Rotsterhaule.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotsterhaule""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station


Now we have a natural language question: 
Give me all police stations of Rotsterhaule.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotsterhaule""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Rotsterhaule?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotsterhaule""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Rotsterhaule

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotsterhaule""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show all police stations of Nijeholtpade.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijeholtpade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all police stations of Nijeholtpade.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijeholtpade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are all police stations in Nijeholtpade?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijeholtpade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police stations in Nijeholtpade

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijeholtpade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Lewedorp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post stations of Lewedorp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Lewedorp?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Lewedorp

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all post offices of Egchel.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station


Now we have a natural language question: 
Give me all post stations of Egchel.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are all post offices in Egchel?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Post stations in Egchel

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all post offices of Zeijerveen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeijerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station


Now we have a natural language question: 
Give me all post stations of Zeijerveen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeijerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Zeijerveen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeijerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Zeijerveen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeijerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Waterhuizen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all post stations of Waterhuizen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Waterhuizen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Waterhuizen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Rogat.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rogat""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all post stations of Rogat.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rogat""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Rogat?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rogat""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Rogat

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rogat""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Rhoon.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhoon""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post stations of Rhoon.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhoon""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Rhoon?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhoon""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Rhoon

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhoon""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of De Pol.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all post stations of De Pol.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in De Pol?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in De Pol

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Meeden.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post stations of Meeden.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Meeden?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Meeden

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Westknollendam.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westknollendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give me all post stations of Westknollendam.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westknollendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Westknollendam?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westknollendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Westknollendam

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westknollendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post offices of Garnwerd.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all post stations of Garnwerd.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are all post offices in Garnwerd?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Post stations in Garnwerd

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of De Pol.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address


Now we have a natural language question: 
Give me all churches of De Pol.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in De Pol?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Churches in De Pol

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Pol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all churches of Ewijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ewijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Give me all churches of Ewijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ewijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Ewijk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ewijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Churches in Ewijk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ewijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Heukelom.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heukelom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address


Now we have a natural language question: 
Give me all churches of Heukelom.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heukelom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Heukelom?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heukelom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Churches in Heukelom

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heukelom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of IJzendoorn.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJzendoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches of IJzendoorn.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJzendoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in IJzendoorn?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJzendoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in IJzendoorn

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJzendoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Naarden.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Naarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches of Naarden.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Naarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Naarden?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Naarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in Naarden

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Naarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Beilen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beilen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches of Beilen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beilen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Beilen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beilen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in Beilen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beilen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Baarland.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baarland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches of Baarland.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baarland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Baarland?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baarland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in Baarland

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baarland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Braamt.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address


Now we have a natural language question: 
Give me all churches of Braamt.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Braamt?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Church


Now we have a natural language question: 
Churches in Braamt

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Aadorp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all churches of Aadorp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Aadorp?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Churches in Aadorp

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Bleskensgraaf ca.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleskensgraaf ca""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Give me all churches of Bleskensgraaf ca.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleskensgraaf ca""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Where are all churches in Bleskensgraaf ca?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleskensgraaf ca""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Churches in Bleskensgraaf ca

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleskensgraaf ca""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Maartensdijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maartensdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Maartensdijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maartensdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Maartensdijk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maartensdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Maartensdijk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maartensdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Einighausen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Einighausen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Einighausen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Einighausen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Einighausen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Einighausen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Einighausen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Einighausen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Sint Agatha.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Agatha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle


Now we have a natural language question: 
Give me all castles of Sint Agatha.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Agatha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Sint Agatha?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Agatha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Castles in Sint Agatha

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Agatha""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Haghorst.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, Address, Postal Address


Now we have a natural language question: 
Give me all castles of Haghorst.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Haghorst?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Haghorst

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Saaksum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaksum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Saaksum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaksum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Saaksum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaksum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Saaksum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaksum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Molenschot.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenschot""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Molenschot.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenschot""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Molenschot?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenschot""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Molenschot

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenschot""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Middelstum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middelstum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Middelstum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middelstum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Middelstum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middelstum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Middelstum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Middelstum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Wessem.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wessem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Wessem.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wessem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Wessem?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wessem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Wessem

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wessem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Gaastmeer.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gaastmeer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Gaastmeer.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gaastmeer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Gaastmeer?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gaastmeer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Gaastmeer

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gaastmeer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all castles of Spijkenisse.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spijkenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Place, additionalType, Castle


Now we have a natural language question: 
Give me all castles of Spijkenisse.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spijkenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are all castles in Spijkenisse?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spijkenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Castles in Spijkenisse

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spijkenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Joure.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Joure""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Joure.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Joure""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Joure?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Joure""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Joure

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Joure""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Nieuwendijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwendijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Nieuwendijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwendijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Nieuwendijk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwendijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Nieuwendijk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwendijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all mosques of Dokkum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Give me all mosques of Dokkum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are all mosques in Dokkum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Mosques in Dokkum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all mosques of Bears.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bears""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church


Now we have a natural language question: 
Give me all mosques of Bears.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bears""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are all mosques in Bears?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bears""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Bears

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bears""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Abbekerk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Abbekerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Abbekerk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Abbekerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Abbekerk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Abbekerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Abbekerk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Abbekerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Gasselternijveen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gasselternijveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Gasselternijveen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gasselternijveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Gasselternijveen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gasselternijveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Gasselternijveen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gasselternijveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Heijen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Heijen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Heijen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Heijen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Mantgum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Mantgum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Mantgum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Mantgum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Steenwijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Steenwijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Steenwijk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Steenwijk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Meerstad.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerstad""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all mosques of Meerstad.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerstad""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Where are all mosques in Meerstad?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerstad""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Meerstad

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerstad""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Maasbree.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasbree""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Maasbree.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasbree""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Maasbree?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasbree""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Maasbree

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasbree""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Watergang.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Watergang""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Watergang.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Watergang""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Watergang?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Watergang""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Watergang

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Watergang""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Duiven.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Duiven.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Duiven?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Duiven

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Bant.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Bant.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Bant?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Bant

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Nes.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Nes.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Nes?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Nes

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show all museums of Gauw.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum


Now we have a natural language question: 
Give me all museums of Gauw.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Gauw?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Gauw

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Kornwerderzand.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Kornwerderzand.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Kornwerderzand?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Kornwerderzand

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Nijelamer.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijelamer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Nijelamer.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijelamer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Nijelamer?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijelamer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Nijelamer

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijelamer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of 't Zand.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'t Zand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum


Now we have a natural language question: 
Give me all museums of 't Zand.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'t Zand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in 't Zand?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'t Zand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum


Now we have a natural language question: 
Museums in 't Zand

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'t Zand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Heijningen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Heijningen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Heijningen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Heijningen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Heijningen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me town hall of Heijningen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Heijningen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Heijningen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Heijningen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heijningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Boskoop.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boskoop""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, Address, Postal Address


Now we have a natural language question: 
Give me town hall of Boskoop.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boskoop""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Boskoop?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boskoop""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Boskoop

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boskoop""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Boskoop

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boskoop""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show town hall of Oldebroek.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall


Now we have a natural language question: 
Give me town hall of Oldebroek.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are the town hall of Oldebroek?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Town hall in Oldebroek

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show municipality in Oldebroek

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Scharmer.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scharmer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me town hall of Scharmer.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scharmer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Scharmer?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scharmer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Scharmer

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scharmer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Scharmer

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scharmer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Zuurdijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me town hall of Zuurdijk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Zuurdijk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Zuurdijk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Zuurdijk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Easterlittens.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me town hall of Easterlittens.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Easterlittens?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Easterlittens

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Easterlittens

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Easterlittens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Goutum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goutum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me town hall of Goutum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goutum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Goutum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goutum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Goutum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goutum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Goutum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goutum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Frederiksoord.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Frederiksoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me town hall of Frederiksoord.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Frederiksoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are the town hall of Frederiksoord?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Frederiksoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Frederiksoord

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Frederiksoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Frederiksoord

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Frederiksoord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show town hall of Warffum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warffum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall


Now we have a natural language question: 
Give me town hall of Warffum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warffum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are the town hall of Warffum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warffum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Warffum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warffum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Warffum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warffum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show town hall of Balk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, City Hall


Now we have a natural language question: 
Give me town hall of Balk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Where are the town hall of Balk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Balk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show municipality in Balk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis.}"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of De Falom with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Falom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of De Falom, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Falom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in De Falom with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Falom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in De Falom with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Falom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Hoog-Keppel with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoog-Keppel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Hoog-Keppel, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoog-Keppel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Hoog-Keppel with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoog-Keppel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Hoog-Keppel with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoog-Keppel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Vorchten with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorchten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Vorchten, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorchten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Vorchten with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorchten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Vorchten with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vorchten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of de Wijk with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""de Wijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all museums of de Wijk, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""de Wijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in de Wijk with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""de Wijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Museums in de Wijk with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""de Wijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Groenekan with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenekan""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Groenekan, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenekan""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Groenekan with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenekan""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Groenekan with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenekan""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Glimmen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glimmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Glimmen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glimmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Glimmen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glimmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Glimmen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glimmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Alteveer with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Alteveer, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Alteveer with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Alteveer with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Eursinge with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Eursinge, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Eursinge with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Eursinge with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Hilvarenbeek with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilvarenbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Hilvarenbeek, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilvarenbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Hilvarenbeek with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilvarenbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Hilvarenbeek with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilvarenbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Baak with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Baak, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Baak with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Baak with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of De Westereen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Westereen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all castles of De Westereen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Westereen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in De Westereen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Westereen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in De Westereen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Westereen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Wânswert with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wânswert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Wânswert, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wânswert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Wânswert with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wânswert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Wânswert with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wânswert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Lutten with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Lutten, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Lutten with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Lutten with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Wolsum with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wolsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Wolsum, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wolsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Wolsum with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wolsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Wolsum with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wolsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of De Meern with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Meern""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all castles of De Meern, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Meern""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in De Meern with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Meern""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in De Meern with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Meern""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Zuidveld with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all castles of Zuidveld, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Zuidveld with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Zuidveld with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of Sint Nicolaasga with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Nicolaasga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all castles of Sint Nicolaasga, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Nicolaasga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Sint Nicolaasga with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Nicolaasga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Sint Nicolaasga with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Nicolaasga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Oude Willem with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oude Willem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all castles of Oude Willem, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oude Willem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Oude Willem with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oude Willem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Oude Willem with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oude Willem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Westervoort with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Westervoort, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Westervoort with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Westervoort with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Spaarndam gem. Haarlem with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Spaarndam gem. Haarlem, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Spaarndam gem. Haarlem with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Spaarndam gem. Haarlem with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Wijk aan Zee with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Wijk aan Zee, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Wijk aan Zee with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Wijk aan Zee with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Bergen op Zoom with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen op Zoom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me hotels of Bergen op Zoom, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen op Zoom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Bergen op Zoom with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen op Zoom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Bergen op Zoom with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen op Zoom""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Hoogezand with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me hotels of Hoogezand, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Hoogezand with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Hoogezand with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Monster with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Monster""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me hotels of Monster, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Monster""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Monster with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Monster""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Monster with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Monster""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Banholt with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Banholt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Banholt, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Banholt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Banholt with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Banholt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Banholt with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Banholt""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Emmen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Emmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me hotels of Emmen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Emmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Emmen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Emmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Emmen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Emmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Egchel with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me hotels of Egchel, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Egchel with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Egchel with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egchel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Heerde with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Heerde, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Heerde with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Heerde with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Den Oever with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Den Oever""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me hotels of Den Oever, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Den Oever""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Den Oever with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Den Oever""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Den Oever with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Den Oever""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Retranchement with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Retranchement""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Retranchement, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Retranchement""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Retranchement with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Retranchement""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Retranchement with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Retranchement""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Maashees with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maashees""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Maashees, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maashees""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Maashees with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maashees""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Maashees with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maashees""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Bennebroek with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bennebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Bennebroek, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bennebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Bennebroek with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bennebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Bennebroek with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bennebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Warder with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Warder, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Warder with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Warder with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Tegelen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tegelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Tegelen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tegelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Tegelen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tegelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Tegelen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tegelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Herveld with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Herveld, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Herveld with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Herveld with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Obdam with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Obdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Obdam, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Obdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Obdam with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Obdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Obdam with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Obdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Duivendrecht with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duivendrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Duivendrecht, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duivendrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Duivendrecht with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duivendrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Duivendrecht with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duivendrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Wissenkerke with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wissenkerke""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Wissenkerke, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wissenkerke""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Wissenkerke with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wissenkerke""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Wissenkerke with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wissenkerke""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Swalmen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Swalmen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Swalmen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Swalmen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of 's-Gravenpolder with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenpolder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of 's-Gravenpolder, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenpolder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in 's-Gravenpolder with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenpolder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in 's-Gravenpolder with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenpolder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Vragender with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vragender""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Vragender, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vragender""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Vragender with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vragender""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Vragender with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vragender""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Doorwerth with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doorwerth""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Doorwerth, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doorwerth""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Doorwerth with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doorwerth""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Doorwerth with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doorwerth""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Leeuwarden with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leeuwarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Leeuwarden, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leeuwarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Leeuwarden with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leeuwarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Leeuwarden with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leeuwarden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Waaxens with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waaxens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me mosques of Waaxens, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waaxens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Waaxens with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waaxens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Waaxens with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waaxens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Foxhol with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foxhol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Foxhol, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foxhol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Foxhol with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foxhol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Foxhol with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foxhol""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Aadorp with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Aadorp, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Aadorp with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Aadorp with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Nieuwe Pekela with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwe Pekela""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me mosques of Nieuwe Pekela, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwe Pekela""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Nieuwe Pekela with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwe Pekela""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Nieuwe Pekela with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwe Pekela""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Veeningen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me mosques of Veeningen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Veeningen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Veeningen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Drogeham with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drogeham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Drogeham, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drogeham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Drogeham with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drogeham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Drogeham with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drogeham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Lage Vuursche with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lage Vuursche""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me mosques of Lage Vuursche, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lage Vuursche""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Lage Vuursche with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lage Vuursche""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Lage Vuursche with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lage Vuursche""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Luddeweer with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luddeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give police station of Luddeweer, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luddeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Luddeweer with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luddeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Luddeweer with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luddeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Agelo with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Agelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Agelo, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Agelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Agelo with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Agelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Agelo with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Agelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Wateren with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give police station of Wateren, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Wateren with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Wateren with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Moorveld with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moorveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Moorveld, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moorveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Moorveld with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moorveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Moorveld with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moorveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Show police station of Groenlo with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenlo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Groenlo, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenlo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Where are police station in Groenlo with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenlo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Police station in Groenlo with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groenlo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Axel with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Axel, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Axel with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Axel with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Axel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Geesteren with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geesteren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Geesteren, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geesteren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Where are police station in Geesteren with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geesteren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Police station in Geesteren with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geesteren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Show police station of Heemstede with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heemstede""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Heemstede, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heemstede""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Where are police station in Heemstede with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heemstede""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Police station in Heemstede with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heemstede""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Stompetoren with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Stompetoren, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Stompetoren with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Police station in Stompetoren with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Winneweer with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winneweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Winneweer, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winneweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Winneweer with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winneweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Winneweer with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winneweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Show town hall of Overveen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall


Now we have a natural language question: 
Give town hall of Overveen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Overveen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Town hall in Overveen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Waterlandkerkje with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterlandkerkje""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Waterlandkerkje, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterlandkerkje""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Waterlandkerkje with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterlandkerkje""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Waterlandkerkje with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waterlandkerkje""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Morra with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Place, Address, Postal Address


Now we have a natural language question: 
Give town hall of Morra, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Morra with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Morra with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Show town hall of Dirksland with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirksland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall


Now we have a natural language question: 
Give town hall of Dirksland, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirksland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Where are town hall in Dirksland with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirksland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Town hall in Dirksland with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirksland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Albergen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Albergen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Albergen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Albergen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Albergen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Albergen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Albergen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Albergen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Show town hall of Leek with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall


Now we have a natural language question: 
Give town hall of Leek, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Where are town hall in Leek with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Leek with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Tjuchem with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjuchem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Tjuchem, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjuchem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Tjuchem with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjuchem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Tjuchem with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjuchem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Veeningen with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Place, Address, Postal Address


Now we have a natural language question: 
Give town hall of Veeningen, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Veeningen with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Veeningen with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Makkum with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Makkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Makkum, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Makkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Makkum with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Makkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Makkum with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Makkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Zuurdijk with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Zuurdijk, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Zuurdijk with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Zuurdijk with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuurdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Velp with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Velp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office


Now we have a natural language question: 
Give post office of Velp, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Velp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Velp with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Velp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Velp with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Velp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Muiderberg with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muiderberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Muiderberg, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muiderberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Muiderberg with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muiderberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Muiderberg with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muiderberg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Wijckel with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office


Now we have a natural language question: 
Give post office of Wijckel, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Wijckel with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Wijckel with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Krommenie with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Krommenie, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Krommenie with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Krommenie with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Houwerzijl with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Houwerzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Houwerzijl, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Houwerzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Houwerzijl with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Houwerzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Houwerzijl with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Houwerzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Sonnega with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sonnega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Sonnega, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sonnega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Sonnega with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sonnega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Sonnega with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sonnega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Welsum with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Welsum, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Welsum with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Welsum with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Beerze with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Give post office of Beerze, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Beerze with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Beerze with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beerze""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Klooster Lidlum with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klooster Lidlum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Give post office of Klooster Lidlum, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klooster Lidlum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Klooster Lidlum with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klooster Lidlum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Klooster Lidlum with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klooster Lidlum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Doornspijk with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doornspijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Doornspijk, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doornspijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Doornspijk with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doornspijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Doornspijk with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doornspijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Ridderkerk with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ridderkerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all museums of Ridderkerk, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ridderkerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Ridderkerk with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ridderkerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Ridderkerk with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ridderkerk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Snikzwaag with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Snikzwaag, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Snikzwaag with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Snikzwaag with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Altforst with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Altforst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Altforst, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Altforst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Altforst with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Altforst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Altforst with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Altforst""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Follega with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Follega, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Follega with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Follega with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Heinkenszand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinkenszand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Heinkenszand, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinkenszand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Heinkenszand with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinkenszand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Heinkenszand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinkenszand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Sint Annen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Annen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Sint Annen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Annen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Sint Annen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Annen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Sint Annen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Annen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Veeningen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me all museums of Veeningen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Veeningen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Veeningen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veeningen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Vinkega with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Vinkega, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Vinkega with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Vinkega with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Epe with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all museums of Epe, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Epe with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Epe with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epe""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all museums of Dedgum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Dedgum, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all museums in Dedgum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Museums in Dedgum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedgum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Tollebeek with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tollebeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Tollebeek with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tollebeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Tollebeek with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tollebeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Tollebeek with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tollebeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of 's Gravenmoer with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s Gravenmoer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all castles of 's Gravenmoer with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s Gravenmoer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in 's Gravenmoer with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s Gravenmoer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Castle


Now we have a natural language question: 
Castles in 's Gravenmoer with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s Gravenmoer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Nieuwlande Coevorden with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwlande Coevorden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Nieuwlande Coevorden with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwlande Coevorden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Nieuwlande Coevorden with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwlande Coevorden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Nieuwlande Coevorden with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwlande Coevorden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Zuidlaren with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Zuidlaren with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Zuidlaren with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Zuidlaren with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidlaren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Vught with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vught""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all castles of Vught with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vught""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Vught with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vught""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Vught with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vught""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Epse with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Epse with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Epse with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Epse with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Epse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Nieuwpoort with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwpoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Nieuwpoort with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwpoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Nieuwpoort with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwpoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Nieuwpoort with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwpoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Edam with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size


Now we have a natural language question: 
Give me all castles of Edam with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Edam with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Edam with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Zuidvelde with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidvelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Zuidvelde with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidvelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Zuidvelde with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidvelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Zuidvelde with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidvelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all castles of Groessen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groessen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Groessen with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groessen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are all castles in Groessen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groessen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Castles in Groessen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groessen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Wachtum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wachtum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Wachtum, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wachtum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Wachtum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wachtum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Wachtum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wachtum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Garnwerd with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Garnwerd, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Garnwerd with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Garnwerd with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garnwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Delwijnen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delwijnen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Delwijnen, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delwijnen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Delwijnen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delwijnen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Delwijnen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delwijnen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Lutjewinkel with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutjewinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Lutjewinkel, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutjewinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Lutjewinkel with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutjewinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Lutjewinkel with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lutjewinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Hezingen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hezingen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Hezingen, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hezingen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Hezingen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hezingen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Hezingen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hezingen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Stellendam with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stellendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Stellendam, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stellendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Stellendam with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stellendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Stellendam with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stellendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Uithuizermeeden with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uithuizermeeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Uithuizermeeden, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uithuizermeeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Uithuizermeeden with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uithuizermeeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Uithuizermeeden with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uithuizermeeden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Exloo with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Exloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Exloo, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Exloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Exloo with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Exloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Exloo with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Exloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Swifterbant with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swifterbant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Swifterbant, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swifterbant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Swifterbant with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swifterbant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Swifterbant with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swifterbant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all hotels of Hemelum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hemelum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Hemelum, together with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hemelum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are hotels in Hemelum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hemelum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Hotels in Hemelum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hemelum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Waarder with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waarder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me churches of Waarder, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waarder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Waarder with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waarder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Waarder with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waarder""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Terwispel with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwispel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Terwispel, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwispel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are churches in Terwispel with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwispel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Churches in Terwispel with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwispel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Lytsewierrum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lytsewierrum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Lytsewierrum, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lytsewierrum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Lytsewierrum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lytsewierrum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Lytsewierrum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lytsewierrum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Neerkant with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Neerkant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Neerkant, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Neerkant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Neerkant with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Neerkant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Neerkant with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Neerkant""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Kinderdijk with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kinderdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Kinderdijk, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kinderdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Kinderdijk with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kinderdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Kinderdijk with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kinderdijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Wetsinge with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wetsinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Wetsinge, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wetsinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Wetsinge with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wetsinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Wetsinge with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wetsinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Show all churches of Stuifzand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stuifzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Stuifzand, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stuifzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Where are churches in Stuifzand with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stuifzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Churches in Stuifzand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stuifzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Zoelen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Zoelen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are churches in Zoelen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Churches in Zoelen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Hoogezand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me churches of Hoogezand, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are churches in Hoogezand with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Churches in Hoogezand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogezand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Ter Apelkanaal with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ter Apelkanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me churches of Ter Apelkanaal, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ter Apelkanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are churches in Ter Apelkanaal with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ter Apelkanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Churches in Ter Apelkanaal with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ter Apelkanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Oosthuizen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Oosthuizen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Oosthuizen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Oosthuizen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthuizen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Zeist with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeist""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me mosques of Zeist, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeist""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are mosques in Zeist with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeist""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Zeist with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeist""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Zaamslag with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Zaamslag, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Zaamslag with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Zaamslag with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Vlagtwedde with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Vlagtwedde, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Vlagtwedde with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Vlagtwedde with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlagtwedde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Hauwert with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hauwert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me mosques of Hauwert, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hauwert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Hauwert with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hauwert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Hauwert with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hauwert""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Katwijk with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me mosques of Katwijk, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are mosques in Katwijk with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Katwijk with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Rijswijk (NB) with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me mosques of Rijswijk (NB), together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Where are mosques in Rijswijk (NB) with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Rijswijk (NB) with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Woudbloem with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woudbloem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Woudbloem, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woudbloem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Woudbloem with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woudbloem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Woudbloem with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woudbloem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Wichmond with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wichmond""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Wichmond, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wichmond""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Wichmond with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wichmond""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Wichmond with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wichmond""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Show all mosques of Oud Gastel with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oud Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size


Now we have a natural language question: 
Give me mosques of Oud Gastel, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oud Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Oud Gastel with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oud Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Oud Gastel with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oud Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Nuland with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nuland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Nuland, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nuland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Nuland with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nuland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Nuland with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nuland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Show police station of Oss with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oss""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Oss, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oss""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Where are police station in Oss with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oss""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Police station in Oss with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oss""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Deil with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Deil""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Deil, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Deil""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Deil with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Deil""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Deil with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Deil""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Morra with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give police station of Morra, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Morra with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Morra with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Morra""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Show police station of Anerveen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Anerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Anerveen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Anerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Where are police station in Anerveen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Anerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, floorSize, floor Size


Now we have a natural language question: 
Police station in Anerveen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Anerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Botlek Rotterdam with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Botlek Rotterdam, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Botlek Rotterdam with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Botlek Rotterdam with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Gauw with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Gauw, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Gauw with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Gauw with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gauw""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Vianen NB with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Vianen NB, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Vianen NB with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Vianen NB with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Oudebildtzijl with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudebildtzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Oudebildtzijl, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudebildtzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Oudebildtzijl with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudebildtzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Oudebildtzijl with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudebildtzijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Klazienaveen-Noord with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klazienaveen-Noord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Klazienaveen-Noord, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klazienaveen-Noord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Klazienaveen-Noord with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klazienaveen-Noord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Klazienaveen-Noord with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klazienaveen-Noord""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Britsum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Britsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Britsum, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Britsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Britsum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Britsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Britsum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Britsum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Sint Jansteen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Jansteen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Place, Address, Postal Address


Now we have a natural language question: 
Give town hall of Sint Jansteen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Jansteen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Sint Jansteen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Jansteen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Sint Jansteen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Jansteen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Barneveld with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barneveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Barneveld, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barneveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Barneveld with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barneveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Barneveld with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Barneveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Show town hall of Dodewaard with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dodewaard""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall


Now we have a natural language question: 
Give town hall of Dodewaard, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dodewaard""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Where are town hall in Dodewaard with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dodewaard""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Town hall in Dodewaard with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dodewaard""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Vinkega with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Vinkega, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Vinkega with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Vinkega with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vinkega""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Lattrop-Breklenkamp with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lattrop-Breklenkamp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Lattrop-Breklenkamp, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lattrop-Breklenkamp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Lattrop-Breklenkamp with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lattrop-Breklenkamp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Lattrop-Breklenkamp with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lattrop-Breklenkamp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Baak with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Baak, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Baak with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Baak with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Baak""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Rilland with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rilland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Rilland, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rilland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Rilland with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rilland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Rilland with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rilland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Show town hall of Assen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Assen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall


Now we have a natural language question: 
Give town hall of Assen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Assen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Where are town hall in Assen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Assen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Town hall in Assen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Assen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Show town hall of Stompetoren with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Stompetoren, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Where are town hall in Stompetoren with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Town hall in Stompetoren with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stompetoren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Reduzum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reduzum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Reduzum, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reduzum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Reduzum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reduzum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Reduzum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reduzum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Odoornerveen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odoornerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office


Now we have a natural language question: 
Give post office of Odoornerveen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odoornerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Where are post office in Odoornerveen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odoornerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Post offices in Odoornerveen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odoornerveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Kornwerderzand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Give post office of Kornwerderzand, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Kornwerderzand with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Kornwerderzand with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornwerderzand""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Kruisland with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Kruisland, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Kruisland with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Kruisland with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Drongelen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drongelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Drongelen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drongelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Drongelen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drongelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Drongelen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drongelen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Schipluiden with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schipluiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Schipluiden, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schipluiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Schipluiden with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schipluiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Schipluiden with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schipluiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Hoogwoud with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogwoud""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Hoogwoud, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogwoud""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Hoogwoud with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogwoud""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Hoogwoud with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogwoud""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Cruquius with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cruquius""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Cruquius, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cruquius""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Cruquius with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cruquius""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Cruquius with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cruquius""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Show all post office of Oosterhesselen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Oosterhesselen, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Where are post office in Oosterhesselen with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, floorSize, floor Size


Now we have a natural language question: 
Post offices in Oosterhesselen with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterhesselen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Stokkum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Stokkum, together with floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Stokkum with floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Stokkum with floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stokkum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:floorSize ?floorsize. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Poeldijk with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poeldijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all museums of Poeldijk, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poeldijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Poeldijk with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poeldijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Poeldijk with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poeldijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Peize with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Peize""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Peize, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Peize""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Peize with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Peize""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Peize with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Peize""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Hensbroek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hensbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Hensbroek, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hensbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Hensbroek with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hensbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Hensbroek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hensbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Sintjohannesga with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Sintjohannesga, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Sintjohannesga with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Sintjohannesga with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Uden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all museums of Uden, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum


Now we have a natural language question: 
Where are all museums in Uden with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum


Now we have a natural language question: 
Museums in Uden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Uden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Kolham with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Kolham, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Kolham with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Kolham with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Helden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Helden, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Helden with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Helden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Ittervoort with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ittervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Ittervoort, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ittervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Ittervoort with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ittervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Ittervoort with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ittervoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all museums of Zalk with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all museums of Zalk, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Zalk with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Zalk with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Museum


Now we have a natural language question: 
Show all museums of Blauwhuis with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blauwhuis""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all museums of Blauwhuis, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blauwhuis""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all museums in Blauwhuis with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blauwhuis""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Museum
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Museums in Blauwhuis with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blauwhuis""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:museum. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Zonnemaire with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zonnemaire""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all castles of Zonnemaire with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zonnemaire""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Zonnemaire with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zonnemaire""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Zonnemaire with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zonnemaire""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of Spaarndam gem. Haarlem with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Spaarndam gem. Haarlem with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Spaarndam gem. Haarlem with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Spaarndam gem. Haarlem with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Spaarndam gem. Haarlem""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of Westerbroek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Westerbroek with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Westerbroek with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Westerbroek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerbroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of Heerjansdam with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerjansdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Heerjansdam with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerjansdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Heerjansdam with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerjansdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Heerjansdam with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heerjansdam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of Wognum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wognum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Wognum with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wognum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Wognum with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wognum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Wognum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wognum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Nijemirdum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all castles of Nijemirdum with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Nijemirdum with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Nijemirdum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Pannerden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pannerden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all castles of Pannerden with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pannerden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Pannerden with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pannerden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Pannerden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pannerden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Kerkrade with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerkrade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all castles of Kerkrade with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerkrade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Kerkrade with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerkrade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Kerkrade with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerkrade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Show all castles of Oldebroek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created


Now we have a natural language question: 
Give me all castles of Oldebroek with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Where are all castles in Oldebroek with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Castle


Now we have a natural language question: 
Castles in Oldebroek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldebroek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all castles of Annerveenschekanaal with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Annerveenschekanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all castles of Annerveenschekanaal with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Annerveenschekanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are all castles in Annerveenschekanaal with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Annerveenschekanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Castle
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Castles in Annerveenschekanaal with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Annerveenschekanaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kasteel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Roswinkel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roswinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created


Now we have a natural language question: 
Give me hotels of Roswinkel, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roswinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel


Now we have a natural language question: 
Where are hotels in Roswinkel with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roswinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Roswinkel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roswinkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Blokker with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blokker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Blokker, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blokker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Blokker with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blokker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Blokker with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blokker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Linden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Linden, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Linden with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Linden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Scherpenisse with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scherpenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Scherpenisse, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scherpenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Scherpenisse with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scherpenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Scherpenisse with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Scherpenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Beesd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beesd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Beesd, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beesd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Beesd with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beesd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Beesd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beesd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel


Now we have a natural language question: 
Show all hotels of Bladel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bladel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Bladel, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bladel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel


Now we have a natural language question: 
Where are hotels in Bladel with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bladel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Hotel


Now we have a natural language question: 
Hotels in Bladel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bladel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Mensingeweer with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mensingeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Mensingeweer, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mensingeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Mensingeweer with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mensingeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Mensingeweer with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mensingeweer""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Mookhoek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Give me hotels of Mookhoek, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Mookhoek with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, Address, Postal Address
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Mookhoek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mookhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Westhoek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Westhoek, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Westhoek with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Westhoek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhoek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all hotels of Jannum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jannum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me hotels of Jannum, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jannum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are hotels in Jannum with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jannum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Hotel
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Hotels in Jannum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jannum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:hotel. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Groesbeek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created


Now we have a natural language question: 
Give me churches of Groesbeek, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Groesbeek with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Groesbeek with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Schildwolde with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schildwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created


Now we have a natural language question: 
Give me churches of Schildwolde, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schildwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Where are churches in Schildwolde with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schildwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Churches in Schildwolde with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schildwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Munnekezijl with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Munnekezijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Munnekezijl, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Munnekezijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Munnekezijl with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Munnekezijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Munnekezijl with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Munnekezijl""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Doesburg with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Doesburg, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Doesburg with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Doesburg with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Itens with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Itens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Itens, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Itens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Itens with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Itens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Itens with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Itens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Wirdum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Wirdum, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Wirdum with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Wirdum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wirdum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Poortugaal with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortugaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Poortugaal, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortugaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Poortugaal with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortugaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Poortugaal with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Poortugaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Geulle with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Geulle, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Geulle with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Geulle with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show all churches of Aldeboarn with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aldeboarn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me churches of Aldeboarn, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aldeboarn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Where are churches in Aldeboarn with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aldeboarn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Churches in Aldeboarn with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aldeboarn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Show all churches of Ermelo with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ermelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created


Now we have a natural language question: 
Give me churches of Ermelo, together with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ermelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Where are churches in Ermelo with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ermelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church


Now we have a natural language question: 
Churches in Ermelo with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ermelo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:kerk. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Lieren with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lieren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Lieren, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lieren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Lieren with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lieren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Lieren with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lieren""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Hunsel with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hunsel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Hunsel, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hunsel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Hunsel with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hunsel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Hunsel with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hunsel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Hoogmade with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogmade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Hoogmade, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogmade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Hoogmade with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogmade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Hoogmade with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogmade""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Gapinge with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gapinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Gapinge, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gapinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Gapinge with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gapinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Gapinge with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gapinge""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Vriescheloo with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vriescheloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Vriescheloo, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vriescheloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Vriescheloo with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vriescheloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Vriescheloo with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vriescheloo""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all mosques of Zwijndrecht with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwijndrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me mosques of Zwijndrecht, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwijndrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are mosques in Zwijndrecht with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwijndrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Mosques in Zwijndrecht with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwijndrecht""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Stavenisse with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stavenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Stavenisse, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stavenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Stavenisse with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stavenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Stavenisse with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stavenisse""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Show all mosques of 's-Gravendeel with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravendeel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give me mosques of 's-Gravendeel, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravendeel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, floorSize, floor Size
Place, dateCreated, date Created


Now we have a natural language question: 
Where are mosques in 's-Gravendeel with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravendeel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Mosques in 's-Gravendeel with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravendeel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Iens with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Iens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me mosques of Iens, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Iens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Iens with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Iens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Iens with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Iens""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show all mosques of Zoutelande with floor size and date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoutelande""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me mosques of Zoutelande, together with date created and floor size

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoutelande""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Church
Place, dateCreated, date Created
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Where are mosques in Zoutelande with date created and floor size?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoutelande""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Church
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Mosques in Zoutelande with floor size, date of creation

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zoutelande""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:moskee. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Noord-Sleen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noord-Sleen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Noord-Sleen, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noord-Sleen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Where are police station in Noord-Sleen with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noord-Sleen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Police station in Noord-Sleen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noord-Sleen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Finsterwolde with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Finsterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Finsterwolde, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Finsterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Finsterwolde with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Finsterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Finsterwolde with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Finsterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Show police station of De Cocksdorp with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Cocksdorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of De Cocksdorp, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Cocksdorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Where are police station in De Cocksdorp with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Cocksdorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Police station in De Cocksdorp with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Cocksdorp""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Genemuiden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Genemuiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Genemuiden, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Genemuiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Genemuiden with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Genemuiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Genemuiden with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Genemuiden""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Nij Beets with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nij Beets""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Place, Address, Postal Address


Now we have a natural language question: 
Give police station of Nij Beets, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nij Beets""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Nij Beets with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nij Beets""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Police station in Nij Beets with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nij Beets""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Langeveen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Langeveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Langeveen, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Langeveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Langeveen with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Langeveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Langeveen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Langeveen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Zaandijk with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaandijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Zaandijk, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaandijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Zaandijk with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaandijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Zaandijk with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaandijk""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Show police station of Arkel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Arkel, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Arkel with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Arkel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arkel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Show police station of Diemen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diemen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station


Now we have a natural language question: 
Give police station of Diemen, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diemen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Where are police station in Diemen with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diemen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Police station
Place, dateCreated, date Created


Now we have a natural language question: 
Police station in Diemen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diemen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Show police station of Ulicoten with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulicoten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give police station of Ulicoten, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulicoten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Where are police station in Ulicoten with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulicoten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Police station


Now we have a natural language question: 
Police station in Ulicoten with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulicoten""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:politiebureau. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Hollandscheveld with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollandscheveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Hollandscheveld, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollandscheveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Hollandscheveld with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollandscheveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Hollandscheveld with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollandscheveld""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Feerwerd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Feerwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Feerwerd, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Feerwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Feerwerd with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Feerwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Feerwerd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Feerwerd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, dateCreated, date Created


Now we have a natural language question: 
Show town hall of Wijckel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Wijckel, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Wijckel with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Wijckel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijckel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, dateCreated, date Created


Now we have a natural language question: 
Show town hall of Wehe-den Hoorn with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wehe-den Hoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall


Now we have a natural language question: 
Give town hall of Wehe-den Hoorn, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wehe-den Hoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, dateCreated, date Created


Now we have a natural language question: 
Where are town hall in Wehe-den Hoorn with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wehe-den Hoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, dateCreated, date Created


Now we have a natural language question: 
Town hall in Wehe-den Hoorn with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wehe-den Hoorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Muntendam with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muntendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Muntendam, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muntendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Muntendam with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muntendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Muntendam with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Muntendam""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Buurmalsen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buurmalsen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Buurmalsen, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buurmalsen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Buurmalsen with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buurmalsen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Buurmalsen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buurmalsen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Rijnsburg with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijnsburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Rijnsburg, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijnsburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Rijnsburg with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijnsburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Rijnsburg with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijnsburg""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Hijum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hijum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Hijum, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hijum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Hijum with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hijum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Hijum with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hijum""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Franeker with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Franeker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Franeker, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Franeker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Franeker with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Franeker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Franeker with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Franeker""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Show town hall of Tjalleberd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjalleberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, City Hall
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give town hall of Tjalleberd, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjalleberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Where are town hall in Tjalleberd with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjalleberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, City Hall


Now we have a natural language question: 
Town hall in Tjalleberd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tjalleberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:gemeentehuis. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Klaaswaal with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klaaswaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Klaaswaal, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klaaswaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Klaaswaal with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klaaswaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Klaaswaal with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Klaaswaal""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, dateCreated, date Created


Now we have a natural language question: 
Show all post office of Montfoort with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Montfoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office


Now we have a natural language question: 
Give post office of Montfoort, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Montfoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, dateCreated, date Created


Now we have a natural language question: 
Where are post office in Montfoort with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Montfoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Montfoort with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Montfoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Kolhorn with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolhorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Kolhorn, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolhorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Kolhorn with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolhorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Kolhorn with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kolhorn""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Gastel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Gastel, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Gastel with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Gastel with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gastel""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, dateCreated, date Created


Now we have a natural language question: 
Show all post office of Rijkevoort with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijkevoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office


Now we have a natural language question: 
Give post office of Rijkevoort, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijkevoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Rijkevoort with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijkevoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Rijkevoort with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijkevoort""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Hengevelde with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengevelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Hengevelde, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengevelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Hengevelde with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengevelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Hengevelde with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengevelde""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Luinjeberd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luinjeberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Luinjeberd, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luinjeberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Luinjeberd with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luinjeberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Luinjeberd with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Luinjeberd""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Blijham with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blijham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Blijham, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blijham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Blijham with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blijham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Blijham with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Blijham""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, additionalType, Post office
Place, dateCreated, date Created


Now we have a natural language question: 
Show all post office of Callantsoog with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Callantsoog""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office


Now we have a natural language question: 
Give post office of Callantsoog, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Callantsoog""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Callantsoog with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Callantsoog""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Callantsoog with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Callantsoog""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Show all post office of Cothen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cothen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give post office of Cothen, together with date created

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cothen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Where are post office in Cothen with date created?

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cothen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, additionalType, Post office


Now we have a natural language question: 
Post offices in Cothen with date created.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cothen""@nl. ?city schema:containsPlace ?address. ?address schema:additionalType typeBuilding:postkantoor. ?address schema:dateCreated ?datecreated. }"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show me the geometry of Oentsjerk.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Oentsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the the geometry of Oentsjerk?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Oentsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Oentsjerk?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Oentsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the the geometry of Oentsjerk?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Oentsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Geometry of Oentsjerk

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Oentsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show me the geometry of Kelpen-Oler.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kelpen-Oler""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the the geometry of Kelpen-Oler?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kelpen-Oler""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Kelpen-Oler?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kelpen-Oler""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the the geometry of Kelpen-Oler?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kelpen-Oler""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Kelpen-Oler

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kelpen-Oler""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show me the geometry of Kerkwerve.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kerkwerve""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the geometry of Kerkwerve?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kerkwerve""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the shape of Kerkwerve?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kerkwerve""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show the the geometry of Kerkwerve?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kerkwerve""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Kerkwerve

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kerkwerve""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show me the geometry of Smallebrugge.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Smallebrugge""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the geometry of Smallebrugge?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Smallebrugge""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the shape of Smallebrugge?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Smallebrugge""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show the the geometry of Smallebrugge?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Smallebrugge""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Smallebrugge

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Smallebrugge""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show me the geometry of Anderen.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Anderen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the the geometry of Anderen?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Anderen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Anderen?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Anderen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the the geometry of Anderen?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Anderen""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Anderen

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Anderen""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, geo, geometry


Now we have a natural language question: 
Show me the geometry of Marwijksoord.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Marwijksoord""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the geometry of Marwijksoord?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Marwijksoord""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Marwijksoord?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Marwijksoord""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show the the geometry of Marwijksoord?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Marwijksoord""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Marwijksoord

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Marwijksoord""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show me the geometry of Warten.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Warten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the the geometry of Warten?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Warten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Warten?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Warten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the the geometry of Warten?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Warten""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Warten

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Warten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show me the geometry of Willemsoord.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Willemsoord""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
What is the the geometry of Willemsoord?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Willemsoord""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Willemsoord?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Willemsoord""@nl}"
"Suppose we have a graph pattern:
Administrative Area, geo, geometry


Now we have a natural language question: 
Show the the geometry of Willemsoord?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Willemsoord""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Willemsoord

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Willemsoord""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show me the geometry of Groenlo.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Groenlo""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the geometry of Groenlo?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Groenlo""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What is the the shape of Groenlo?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Groenlo""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show the the geometry of Groenlo?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Groenlo""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Groenlo

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Groenlo""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, geo, geometry


Now we have a natural language question: 
Show me the geometry of Kinnum.

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kinnum""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, geo, geometry


Now we have a natural language question: 
What is the the geometry of Kinnum?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kinnum""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
What is the the shape of Kinnum?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kinnum""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, geo, geometry


Now we have a natural language question: 
Show the the geometry of Kinnum?

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kinnum""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Geometry of Kinnum

The corresponding sparql query is:
SELECT DISTINCT ?city ?geo WHERE {?city rdf:type schema:AdministrativeArea.?city schema:geo ?geo. ?city schema:name ""Kinnum""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Tricht.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tricht""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Tricht.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tricht""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Tricht?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tricht""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Tricht

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tricht""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Buinen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Buinen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Buinen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Buinen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Buinen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Buinen""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Addresses in Buinen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Buinen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Kuitaart.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kuitaart""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Kuitaart.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kuitaart""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Kuitaart?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kuitaart""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Kuitaart

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kuitaart""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Borgercompagnie.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Borgercompagnie""@nl}"
"Suppose we have a graph pattern:
Place, name, Name
Place, Address, Postal Address


Now we have a natural language question: 
List all registered places of Borgercompagnie.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Borgercompagnie""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Borgercompagnie?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Borgercompagnie""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Borgercompagnie

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Borgercompagnie""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Tytsjerk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tytsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Tytsjerk.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tytsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Tytsjerk?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tytsjerk""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Tytsjerk

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Tytsjerk""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Show the addresses of Rietmolen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rietmolen""@nl}"
"Suppose we have a graph pattern:
Place, name, Name


Now we have a natural language question: 
List all registered places of Rietmolen.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rietmolen""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
What are the addresses in Rietmolen?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rietmolen""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
Addresses in Rietmolen

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rietmolen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Kommerzijl.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kommerzijl""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Kommerzijl.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kommerzijl""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Kommerzijl?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kommerzijl""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Kommerzijl

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Kommerzijl""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Molkwerum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Molkwerum""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Molkwerum.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Molkwerum""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Molkwerum?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Molkwerum""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Molkwerum

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Molkwerum""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Heeten.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Heeten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Heeten.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Heeten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Heeten?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Heeten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Heeten

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Heeten""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Lattrop-Breklenkamp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Lattrop-Breklenkamp""@nl}"
"Suppose we have a graph pattern:
Administrative Area, name, Name
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List all registered places of Lattrop-Breklenkamp.

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Lattrop-Breklenkamp""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
What are the addresses in Lattrop-Breklenkamp?

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Lattrop-Breklenkamp""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Addresses in Lattrop-Breklenkamp

The corresponding sparql query is:
SELECT DISTINCT ?address WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Lattrop-Breklenkamp""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Herkingen?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Herkingen""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of addresses in Herkingen.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Herkingen""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of registered places in Herkingen.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Herkingen""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Herkingen.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Herkingen""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Nieuwersluis?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Nieuwersluis""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of addresses in Nieuwersluis.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Nieuwersluis""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of registered places in Nieuwersluis.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Nieuwersluis""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Nieuwersluis.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Nieuwersluis""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
How many addresses in Gouda?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Gouda""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of addresses in Gouda.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Gouda""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of registered places in Gouda.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Gouda""@nl}"
"Suppose we have a graph pattern:


Now we have a natural language question: 
How many registered addresses in Gouda.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Gouda""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Ysselsteyn?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ysselsteyn""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of addresses in Ysselsteyn.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ysselsteyn""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of registered places in Ysselsteyn.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ysselsteyn""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Ysselsteyn.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ysselsteyn""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Geesbrug?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Geesbrug""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of addresses in Geesbrug.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Geesbrug""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of registered places in Geesbrug.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Geesbrug""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Geesbrug.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Geesbrug""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Rijkevoort?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rijkevoort""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of addresses in Rijkevoort.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rijkevoort""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of registered places in Rijkevoort.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rijkevoort""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Rijkevoort.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Rijkevoort""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Ophemert?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ophemert""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of addresses in Ophemert.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ophemert""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the number of registered places in Ophemert.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ophemert""@nl}"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Ophemert.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Ophemert""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Bentelo?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bentelo""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of addresses in Bentelo.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bentelo""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of registered places in Bentelo.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bentelo""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Bentelo.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bentelo""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Bosch en Duin?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bosch en Duin""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of addresses in Bosch en Duin.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bosch en Duin""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of registered places in Bosch en Duin.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bosch en Duin""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Bosch en Duin.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Bosch en Duin""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Zandberg?

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Zandberg""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of addresses in Zandberg.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Zandberg""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Give me the number of registered places in Zandberg.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Zandberg""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many registered addresses in Zandberg.

The corresponding sparql query is:
SELECT DISTINCT (COUNT(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea.?city schema:containsPlace ?address. ?city schema:name ""Zandberg""@nl}"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Harderwijk and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harderwijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Harderwijk and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harderwijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Harderwijk then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harderwijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Harderwijk then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harderwijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Loenen and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loenen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Loenen and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loenen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Loenen then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loenen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Loenen then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Loenen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Terwolde and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Terwolde and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Terwolde then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Terwolde then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Westhem and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Westhem and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Westhem then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Westhem then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westhem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Wilp and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Wilp and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Wilp then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Wilp then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Haghorst and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Haghorst and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Haghorst then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Haghorst then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Haghorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Diepenheim and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diepenheim""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Diepenheim and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diepenheim""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Diepenheim then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diepenheim""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Diepenheim then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Diepenheim""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Ooltgensplaat and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Ooltgensplaat and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Ooltgensplaat then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Ooltgensplaat then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Lewedorp and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Lewedorp and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Lewedorp then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Lewedorp then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lewedorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Meerssen and sort by their floor size. 

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerssen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Meerssen and ascendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerssen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Meerssen then sort them by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerssen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Meerssen then sort by floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meerssen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Kekerdom and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kekerdom""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Kekerdom then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kekerdom""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Kekerdom then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kekerdom""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Beutenaken and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Beutenaken then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Beutenaken then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Hoogeloon and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogeloon""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Hoogeloon then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogeloon""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Hoogeloon then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoogeloon""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Vogelwaarde and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vogelwaarde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Vogelwaarde then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vogelwaarde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Vogelwaarde then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vogelwaarde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Lageland and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lageland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Lageland then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lageland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Lageland then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lageland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Posterholt and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Posterholt""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Posterholt then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Posterholt""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Posterholt then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Posterholt""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Surhuizum and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Surhuizum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Surhuizum then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Surhuizum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Surhuizum then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Surhuizum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Meeden and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Meeden then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Meeden then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meeden""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Zuidwolde and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Zuidwolde then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Zuidwolde then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidwolde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Geelbroek and descendingly sort by their floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Geelbroek then sort them by floor size descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Geelbroek then sort by floor size from large to small.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geelbroek""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Hieslum with their floor size between 18 and 316 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 18 && ?floorsize <= 316) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Hieslum and the floor size should between 74 and 596.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 74 && ?floorsize <= 596) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Hieslum, the floor size should larger than 69 but smaller than 397 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hieslum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 69 && ?floorsize <= 397) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Nieuwkuijk with their floor size between 185 and 295 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwkuijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 185 && ?floorsize <= 295) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Nieuwkuijk and the floor size should between 17 and 353.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwkuijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 17 && ?floorsize <= 353) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Nieuwkuijk, the floor size should larger than 7 but smaller than 273 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuwkuijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 7 && ?floorsize <= 273) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Zwiggelte with their floor size between 116 and 374 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 116 && ?floorsize <= 374) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Zwiggelte and the floor size should between 19 and 233.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 19 && ?floorsize <= 233) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Zwiggelte, the floor size should larger than 88 but smaller than 504 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 88 && ?floorsize <= 504) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Zuidland with their floor size between 87 and 282 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 87 && ?floorsize <= 282) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Zuidland and the floor size should between 83 and 278.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 83 && ?floorsize <= 278) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Zuidland, the floor size should larger than 35 but smaller than 416 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 35 && ?floorsize <= 416) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Hengelo (Gld) with their floor size between 4 and 465 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengelo (Gld)""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 4 && ?floorsize <= 465) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Hengelo (Gld) and the floor size should between 149 and 318.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengelo (Gld)""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 149 && ?floorsize <= 318) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Hengelo (Gld), the floor size should larger than 43 but smaller than 226 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hengelo (Gld)""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 43 && ?floorsize <= 226) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Saaxumhuizen with their floor size between 194 and 469 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaxumhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 194 && ?floorsize <= 469) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Saaxumhuizen and the floor size should between 160 and 313.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaxumhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 160 && ?floorsize <= 313) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Saaxumhuizen, the floor size should larger than 181 but smaller than 554 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saaxumhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 181 && ?floorsize <= 554) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Maasdijk with their floor size between 120 and 526 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasdijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 120 && ?floorsize <= 526) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Maasdijk and the floor size should between 140 and 518.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasdijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 140 && ?floorsize <= 518) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Maasdijk, the floor size should larger than 76 but smaller than 303 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasdijk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 76 && ?floorsize <= 303) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Noordscheschut with their floor size between 84 and 226 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordscheschut""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 84 && ?floorsize <= 226) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Noordscheschut and the floor size should between 89 and 522.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordscheschut""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 89 && ?floorsize <= 522) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Noordscheschut, the floor size should larger than 25 but smaller than 507 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noordscheschut""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 25 && ?floorsize <= 507) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Linne with their floor size between 52 and 578 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linne""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 578) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Linne and the floor size should between 85 and 509.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linne""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 85 && ?floorsize <= 509) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Linne, the floor size should larger than 194 but smaller than 282 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Linne""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 194 && ?floorsize <= 282) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Kring van Dorth with their floor size between 102 and 399 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kring van Dorth""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 102 && ?floorsize <= 399) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Kring van Dorth and the floor size should between 126 and 296.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kring van Dorth""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 126 && ?floorsize <= 296) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Kring van Dorth, the floor size should larger than 35 but smaller than 501 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kring van Dorth""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 35 && ?floorsize <= 501) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Zalk with their floor size larger than 10 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 10) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Zalk, their floor size should larger than 100 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 100) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Zalk, floor size larger than 91 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zalk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 91) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Heeze with their floor size larger than 133 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heeze""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 133) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Heeze, their floor size should larger than 54 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heeze""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 54) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Heeze, floor size larger than 81 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heeze""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 81) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Drouwenermond with their floor size larger than 138 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drouwenermond""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 138) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Drouwenermond, their floor size should larger than 51 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drouwenermond""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 51) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Drouwenermond, floor size larger than 42 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drouwenermond""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 42) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Vlijmen with their floor size larger than 164 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlijmen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 164) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Vlijmen, their floor size should larger than 129 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlijmen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 129) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Vlijmen, floor size larger than 21 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vlijmen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 21) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of IJsselham with their floor size larger than 14 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJsselham""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 14) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in IJsselham, their floor size should larger than 88 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJsselham""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 88) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Show places in IJsselham, floor size larger than 114 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""IJsselham""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 114) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Esbeek with their floor size larger than 145 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 145) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Esbeek, their floor size should larger than 159 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 159) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Esbeek, floor size larger than 27 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 27) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Benneveld with their floor size larger than 35 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benneveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 35) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Benneveld, their floor size should larger than 132 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benneveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 132) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Benneveld, floor size larger than 136 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benneveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 136) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Vortum-Mullem with their floor size larger than 154 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vortum-Mullem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 154) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Vortum-Mullem, their floor size should larger than 31 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vortum-Mullem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 31) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Show places in Vortum-Mullem, floor size larger than 38 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vortum-Mullem""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 38) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Aadorp with their floor size larger than 42 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 42) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Aadorp, their floor size should larger than 130 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 130) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Aadorp, floor size larger than 2 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aadorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 2) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Follega with their floor size larger than 23 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 23) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Follega, their floor size should larger than 57 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 57) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Follega, floor size larger than 16 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Follega""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 16) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Lisse with their floor size larger than 167 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lisse""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 167) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Lisse, their floor size should larger than 161 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lisse""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 161) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Lisse, floor size larger than 74 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lisse""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 74) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Koufurderrige with their floor size larger than 162 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koufurderrige""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 162) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Koufurderrige, their floor size should larger than 179 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koufurderrige""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 179) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Koufurderrige, floor size larger than 169 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koufurderrige""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 169) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Ommeren with their floor size larger than 80 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ommeren""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 80) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Ommeren, their floor size should larger than 78 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ommeren""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 78) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Ommeren, floor size larger than 61 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ommeren""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 61) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Nijverdal with their floor size larger than 47 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijverdal""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 47) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Nijverdal, their floor size should larger than 25 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijverdal""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 25) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Nijverdal, floor size larger than 171 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijverdal""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 171) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Edam with their floor size larger than 165 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 165) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Edam, their floor size should larger than 62 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 62) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Show places in Edam, floor size larger than 82 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Edam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 82) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Schore with their floor size larger than 89 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schore""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 89) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Schore, their floor size should larger than 41 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schore""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 41) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Show places in Schore, floor size larger than 34 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schore""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 34) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Mariënvelde with their floor size larger than 124 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mariënvelde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 124) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Mariënvelde, their floor size should larger than 150 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mariënvelde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 150) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Mariënvelde, floor size larger than 117 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mariënvelde""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 117) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Helvoirt with their floor size larger than 166 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 166) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Helvoirt, their floor size should larger than 76 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 76) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Helvoirt, floor size larger than 181 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 181) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Delfgauw with their floor size larger than 42 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delfgauw""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 42) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Delfgauw, their floor size should larger than 111 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delfgauw""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 111) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Delfgauw, floor size larger than 90 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Delfgauw""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 90) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Westkapelle with their floor size larger than 28 squared meters, then sort them ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 28) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Westkapelle, their floor size should larger than 61 m2, and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 61) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places in Westkapelle, floor size larger than 191 squared meters then order by the floor size from small to large.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 191) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Beutenaken with their floor size larger than 175 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 175) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Beutenaken, their floor size should larger than 62 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 62) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places in Beutenaken, floor size larger than 57 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 57) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Kruisland with their floor size larger than 55 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 55) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Kruisland, their floor size should larger than 153 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 153) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Kruisland, floor size larger than 114 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kruisland""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 114) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Dirkshorn with their floor size larger than 143 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 143) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Dirkshorn, their floor size should larger than 112 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 112) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Dirkshorn, floor size larger than 91 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dirkshorn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 91) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Botlek Rotterdam with their floor size larger than 139 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 139) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Botlek Rotterdam, their floor size should larger than 71 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 71) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Botlek Rotterdam, floor size larger than 29 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Botlek Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 29) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Wouwse Plantage with their floor size larger than 98 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wouwse Plantage""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 98) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Wouwse Plantage, their floor size should larger than 11 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wouwse Plantage""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 11) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places in Wouwse Plantage, floor size larger than 16 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wouwse Plantage""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 16) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Nigtevecht with their floor size larger than 129 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nigtevecht""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 129) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Nigtevecht, their floor size should larger than 91 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nigtevecht""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 91) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Nigtevecht, floor size larger than 122 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nigtevecht""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 122) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Zijderveld with their floor size larger than 22 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zijderveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 22) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Zijderveld, their floor size should larger than 14 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zijderveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 14) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Zijderveld, floor size larger than 117 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zijderveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 117) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Kornhorn with their floor size larger than 117 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornhorn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 117) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Kornhorn, their floor size should larger than 186 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornhorn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 186) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Kornhorn, floor size larger than 54 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kornhorn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 54) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Overlangel with their floor size larger than 146 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overlangel""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 146) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Overlangel, their floor size should larger than 170 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overlangel""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 170) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Overlangel, floor size larger than 194 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overlangel""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 194) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Garderen with their floor size larger than 51 squared meters, then sort them from big to small

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garderen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 51) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Garderen, their floor size should larger than 43 m2, and order them descendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garderen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 43) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Garderen, floor size larger than 67 squared meters then descendingly order by the floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Garderen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 67) } ORDER BY DESC(?floorsize)"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Hilaard with their floor size smaller than 543 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilaard""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 543) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Hilaard, their floor size should smaller than 218 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilaard""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 218) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Hilaard, floor size smaller than 518 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hilaard""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 518) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Jaarsveld with their floor size smaller than 432 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jaarsveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 432) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Jaarsveld, their floor size should smaller than 412 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jaarsveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 412) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Jaarsveld, floor size smaller than 300 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Jaarsveld""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 300) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Bakel with their floor size smaller than 311 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bakel""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 311) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Bakel, their floor size should smaller than 533 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bakel""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 533) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Bakel, floor size smaller than 408 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bakel""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 408) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Duiven with their floor size smaller than 571 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 571) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Duiven, their floor size should smaller than 224 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 224) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places in Duiven, floor size smaller than 242 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Duiven""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 242) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Hartwerd with their floor size smaller than 300 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hartwerd""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 300) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Hartwerd, their floor size should smaller than 443 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hartwerd""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 443) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Hartwerd, floor size smaller than 551 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hartwerd""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 551) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Maasvlakte Rotterdam with their floor size smaller than 342 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasvlakte Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 342) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Maasvlakte Rotterdam, their floor size should smaller than 555 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasvlakte Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 555) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Maasvlakte Rotterdam, floor size smaller than 295 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Maasvlakte Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 295) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Nederhemert with their floor size smaller than 397 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederhemert""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 397) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Nederhemert, their floor size should smaller than 232 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederhemert""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 232) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Nederhemert, floor size smaller than 541 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nederhemert""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 541) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Bitgummole with their floor size smaller than 253 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 253) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Bitgummole, their floor size should smaller than 280 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 280) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Bitgummole, floor size smaller than 376 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 376) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Moerstraten with their floor size smaller than 464 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerstraten""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 464) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Moerstraten, their floor size should smaller than 585 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerstraten""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 585) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Moerstraten, floor size smaller than 378 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerstraten""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 378) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Voorst with their floor size smaller than 556 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Voorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 556) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Voorst, their floor size should smaller than 340 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Voorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 340) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Voorst, floor size smaller than 303 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Voorst""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 303) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Keijenborg with their floor size smaller than 514 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Keijenborg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 514) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Keijenborg, their floor size should smaller than 273 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Keijenborg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 273) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Keijenborg, floor size smaller than 507 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Keijenborg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 507) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Azewijn with their floor size smaller than 592 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Azewijn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 592) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Azewijn, their floor size should smaller than 226 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Azewijn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 226) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Azewijn, floor size smaller than 265 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Azewijn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 265) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Oudemirdum with their floor size smaller than 361 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 361) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Oudemirdum, their floor size should smaller than 395 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 395) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Oudemirdum, floor size smaller than 367 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudemirdum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 367) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Nieuw Annerveen with their floor size smaller than 508 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Annerveen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 508) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Nieuw Annerveen, their floor size should smaller than 268 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Annerveen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 268) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places in Nieuw Annerveen, floor size smaller than 389 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Annerveen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 389) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Leveroy with their floor size smaller than 404 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leveroy""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 404) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Leveroy, their floor size should smaller than 447 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leveroy""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 447) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Show places in Leveroy, floor size smaller than 491 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leveroy""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 491) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Kattendijke with their floor size smaller than 382 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kattendijke""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 382) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Kattendijke, their floor size should smaller than 277 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kattendijke""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 277) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Kattendijke, floor size smaller than 229 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kattendijke""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 229) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the addresses of Wilhelminadorp with their floor size smaller than 531 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminadorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 531) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Wilhelminadorp, their floor size should smaller than 222 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminadorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 222) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Wilhelminadorp, floor size smaller than 400 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wilhelminadorp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 400) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the addresses of Alphen aan den Rijn with their floor size smaller than 211 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alphen aan den Rijn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 211) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me places in Alphen aan den Rijn, their floor size should smaller than 419 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alphen aan den Rijn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 419) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Show places in Alphen aan den Rijn, floor size smaller than 454 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alphen aan den Rijn""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 454) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Schoorl with their floor size smaller than 368 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schoorl""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 368) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me places in Schoorl, their floor size should smaller than 562 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schoorl""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 562) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show places in Schoorl, floor size smaller than 483 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schoorl""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 483) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the addresses of Bergen aan Zee with their floor size smaller than 560 squared meters then order them ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 560) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me places in Bergen aan Zee, their floor size should smaller than 582 m2 and order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 582) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show places in Bergen aan Zee, floor size smaller than 405 squared meters, then order ascendingly

The corresponding sparql query is:
SELECT DISTINCT ?address ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 405) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Waverveen with their floor size between 176 and 489 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waverveen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 176 && ?floorsize <= 489) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Waverveen where floor size between 63 and 347.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waverveen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 63 && ?floorsize <= 347) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Waverveen with floor size larger than 183 but smaller than 432 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Waverveen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 183 && ?floorsize <= 432) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of 's-Gravenzande with their floor size between 28 and 417 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 28 && ?floorsize <= 417) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in 's-Gravenzande where floor size between 37 and 418.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 37 && ?floorsize <= 418) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in 's-Gravenzande with floor size larger than 42 but smaller than 569 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 42 && ?floorsize <= 569) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the number of addresses of Nispen with their floor size between 153 and 494 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nispen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 153 && ?floorsize <= 494) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Nispen where floor size between 75 and 287.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nispen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 75 && ?floorsize <= 287) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Nispen with floor size larger than 193 but smaller than 365 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nispen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 193 && ?floorsize <= 365) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Welsum with their floor size between 23 and 548 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 23 && ?floorsize <= 548) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Welsum where floor size between 147 and 252.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 147 && ?floorsize <= 252) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Welsum with floor size larger than 186 but smaller than 388 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Welsum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 186 && ?floorsize <= 388) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Alphen with their floor size between 115 and 426 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alphen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 115 && ?floorsize <= 426) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Alphen where floor size between 187 and 457.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alphen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 187 && ?floorsize <= 457) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Alphen with floor size larger than 58 but smaller than 495 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alphen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 495) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Ezinge with their floor size between 157 and 235 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ezinge""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 157 && ?floorsize <= 235) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Ezinge where floor size between 79 and 348.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ezinge""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 79 && ?floorsize <= 348) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Ezinge with floor size larger than 34 but smaller than 316 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ezinge""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 34 && ?floorsize <= 316) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Rottum with their floor size between 104 and 423 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rottum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 104 && ?floorsize <= 423) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Rottum where floor size between 9 and 233.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rottum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 9 && ?floorsize <= 233) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Rottum with floor size larger than 107 but smaller than 531 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rottum""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 107 && ?floorsize <= 531) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Hoenderloo with their floor size between 21 and 232 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoenderloo""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 21 && ?floorsize <= 232) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Hoenderloo where floor size between 84 and 230.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoenderloo""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 84 && ?floorsize <= 230) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Hoenderloo with floor size larger than 51 but smaller than 538 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoenderloo""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 51 && ?floorsize <= 538) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Beutenaken with their floor size between 41 and 253 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 41 && ?floorsize <= 253) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in Beutenaken where floor size between 189 and 270.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 189 && ?floorsize <= 270) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Beutenaken with floor size larger than 100 but smaller than 583 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beutenaken""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 100 && ?floorsize <= 583) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Balk with their floor size between 13 and 564 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 13 && ?floorsize <= 564) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Balk where floor size between 199 and 431.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 199 && ?floorsize <= 431) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Balk with floor size larger than 183 but smaller than 250 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balk""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 183 && ?floorsize <= 250) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Huissen with their floor size bigger than 156 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huissen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 156) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Huissen where floor larger than 415 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huissen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 415) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Huissen with floor size larger than 247 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huissen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 247) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Brouwershaven with their floor size bigger than 34 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Brouwershaven""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 34) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Brouwershaven where floor larger than 323 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Brouwershaven""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 323) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Brouwershaven with floor size larger than 488 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Brouwershaven""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 488) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Bergen L with their floor size bigger than 262 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen L""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 262) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Bergen L where floor larger than 356 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen L""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 356) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Bergen L with floor size larger than 43 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen L""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 43) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Bemelen with their floor size bigger than 45 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 45) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Bemelen where floor larger than 190 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 190) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Bemelen with floor size larger than 367 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bemelen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 367) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Bunschoten-Spakenburg with their floor size bigger than 36 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bunschoten-Spakenburg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 36) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Bunschoten-Spakenburg where floor larger than 90 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bunschoten-Spakenburg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 90) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Bunschoten-Spakenburg with floor size larger than 244 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bunschoten-Spakenburg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 244) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Rotterdam with their floor size bigger than 281 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 281) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Rotterdam where floor larger than 265 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 265) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Rotterdam with floor size larger than 13 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 13) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Slijkenburg with their floor size bigger than 352 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Slijkenburg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 352) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in Slijkenburg where floor larger than 45 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Slijkenburg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 45) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Slijkenburg with floor size larger than 58 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Slijkenburg""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 58) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Goënga with their floor size bigger than 450 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 450) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Goënga where floor larger than 364 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 364) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Goënga with floor size larger than 62 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 62) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Losser with their floor size bigger than 50 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losser""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 50) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Losser where floor larger than 251 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losser""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 251) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Losser with floor size larger than 489 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Losser""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 489) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Lemiers with their floor size bigger than 398 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 398) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in Lemiers where floor larger than 21 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 21) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Lemiers with floor size larger than 44 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 44) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Kûbaard with their floor size smaller than 324 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kûbaard""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 54) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Kûbaard where floor smaller than 143 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kûbaard""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 72) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Kûbaard with floor size smaller than 449 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kûbaard""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 41) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of De Klomp with their floor size smaller than 438 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Klomp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 49) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in De Klomp where floor smaller than 359 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Klomp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 23) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in De Klomp with floor size smaller than 430 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Klomp""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 4) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Leur with their floor size smaller than 409 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leur""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 40) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Leur where floor smaller than 314 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leur""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 22) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Leur with floor size smaller than 122 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leur""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 11) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Geulle with their floor size smaller than 368 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 3) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Geulle where floor smaller than 409 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 49) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Geulle with floor size smaller than 264 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Geulle""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 45) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Leende with their floor size smaller than 388 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leende""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 46) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Leende where floor smaller than 435 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leende""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 99) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Leende with floor size smaller than 316 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Leende""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 11) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of De Weere with their floor size smaller than 485 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Weere""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 39) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in De Weere where floor smaller than 371 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Weere""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 85) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in De Weere with floor size smaller than 109 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Weere""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 57) }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Hall with their floor size smaller than 228 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hall""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 61) }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size


Now we have a natural language question: 
Give me the quantity of places in Hall where floor smaller than 456 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hall""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 52) }"
"Suppose we have a graph pattern:
Place, additionalType, City Hall
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Hall with floor size smaller than 465 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hall""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 14) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Startenhuizen with their floor size smaller than 221 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Startenhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 18) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give me the quantity of places in Startenhuizen where floor smaller than 406 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Startenhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 64) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Startenhuizen with floor size smaller than 448 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Startenhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 98) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Balgoij with their floor size smaller than 171 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balgoij""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 59) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Balgoij where floor smaller than 375 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balgoij""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 33) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Balgoij with floor size smaller than 404 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balgoij""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 84) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show the number of addresses of Harich with their floor size smaller than 293 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harich""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 11) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me the quantity of places in Harich where floor smaller than 271 squared meters.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harich""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 24) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
How many addresses in Harich with floor size smaller than 227 m2.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Harich""@nl. ?city schema:containsPlace ?address. ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 42) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Snikzwaag that built between year 251 and 954.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 251 && ?datecreated <= 954) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Snikzwaag with building year between 448 and 644.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 448 && ?datecreated <= 644) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Snikzwaag, the date of creation should between 78 and 784.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Snikzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 78 && ?datecreated <= 784) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Roggel that built between year 81 and 661.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roggel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 81 && ?datecreated <= 661) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Roggel with building year between 300 and 847.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roggel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 300 && ?datecreated <= 847) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Roggel, the date of creation should between 429 and 747.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roggel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 429 && ?datecreated <= 747) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Tzum that built between year 390 and 633.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 390 && ?datecreated <= 633) }"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
Give all places in Tzum with building year between 98 and 694.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 98 && ?datecreated <= 694) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show registered places in Tzum, the date of creation should between 458 and 864.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 458 && ?datecreated <= 864) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Driebruggen that built between year 416 and 794.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driebruggen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 416 && ?datecreated <= 794) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Driebruggen with building year between 472 and 811.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driebruggen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 472 && ?datecreated <= 811) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Driebruggen, the date of creation should between 260 and 506.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driebruggen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 260 && ?datecreated <= 506) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Nutter that built between year 201 and 873.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 201 && ?datecreated <= 873) }"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
Give all places in Nutter with building year between 125 and 958.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 125 && ?datecreated <= 958) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show registered places in Nutter, the date of creation should between 469 and 745.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nutter""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 469 && ?datecreated <= 745) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Breezanddijk that built between year 472 and 937.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Breezanddijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 472 && ?datecreated <= 937) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Breezanddijk with building year between 123 and 678.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Breezanddijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 123 && ?datecreated <= 678) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Breezanddijk, the date of creation should between 473 and 807.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Breezanddijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 473 && ?datecreated <= 807) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Oudega that built between year 123 and 754.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudega""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 123 && ?datecreated <= 754) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oudega with building year between 69 and 859.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudega""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 69 && ?datecreated <= 859) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oudega, the date of creation should between 473 and 700.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudega""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 473 && ?datecreated <= 700) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Post office
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Ten Post that built between year 252 and 904.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ten Post""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 252 && ?datecreated <= 904) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Ten Post with building year between 467 and 748.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ten Post""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 467 && ?datecreated <= 748) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Post office
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Ten Post, the date of creation should between 410 and 743.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ten Post""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 410 && ?datecreated <= 743) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Balinge that built between year 348 and 810.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 348 && ?datecreated <= 810) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Balinge with building year between 457 and 503.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 457 && ?datecreated <= 503) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Balinge, the date of creation should between 177 and 871.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Balinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 177 && ?datecreated <= 871) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Bruchterveld that built between year 39 and 823.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruchterveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 39 && ?datecreated <= 823) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bruchterveld with building year between 466 and 688.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruchterveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 466 && ?datecreated <= 688) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bruchterveld, the date of creation should between 345 and 869.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruchterveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 345 && ?datecreated <= 869) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Bocholtz that after year 1917.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bocholtz""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bocholtz with building year later than 1840.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bocholtz""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bocholtz, the date of creation should after 1812.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bocholtz""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1812) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Wateren that after year 1946.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Wateren with building year later than 1829.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1829) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Wateren, the date of creation should after 1884.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wateren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1884) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Ochten that after year 1872.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ochten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1872) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ochten with building year later than 1862.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ochten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Ochten, the date of creation should after 1859.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ochten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Koningsbosch that after year 1815.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koningsbosch""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1815) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Koningsbosch with building year later than 1829.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koningsbosch""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1829) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Koningsbosch, the date of creation should after 1912.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koningsbosch""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1912) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Swalmen that after year 1893.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Swalmen with building year later than 1834.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1834) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Swalmen, the date of creation should after 1946.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Swalmen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Sint-Annaland that after year 1939.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint-Annaland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1939) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Sint-Annaland with building year later than 1821.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint-Annaland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1821) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Sint-Annaland, the date of creation should after 1936.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint-Annaland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1936) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Odiliapeel that after year 1907.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odiliapeel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1907) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Odiliapeel with building year later than 1810.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odiliapeel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1810) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Odiliapeel, the date of creation should after 1894.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Odiliapeel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1894) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Egmond aan Zee that after year 1886.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egmond aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Egmond aan Zee with building year later than 1834.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egmond aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1834) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Egmond aan Zee, the date of creation should after 1806.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Egmond aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1806) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Wieringerwaard that after year 1883.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wieringerwaard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1883) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Wieringerwaard with building year later than 1826.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wieringerwaard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1826) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Wieringerwaard, the date of creation should after 1882.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wieringerwaard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1882) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Valthermond that after year 1861.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Valthermond""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1861) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Valthermond with building year later than 1949.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Valthermond""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Valthermond, the date of creation should after 1897.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Valthermond""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Millingen aan de Rijn that after year 1892, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Millingen aan de Rijn""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1892) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Millingen aan de Rijn with building year later than 1906 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Millingen aan de Rijn""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1906) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Millingen aan de Rijn, the date of creation should after 1859, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Millingen aan de Rijn""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Zuidveld that after year 1926, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1926) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zuidveld with building year later than 1869 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1869) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Zuidveld, the date of creation should after 1816, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Bronnegerveen that after year 1874, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bronnegerveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1874) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bronnegerveen with building year later than 1802 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bronnegerveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1802) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bronnegerveen, the date of creation should after 1804, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bronnegerveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Lent that after year 1827, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lent""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1827) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lent with building year later than 1831 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lent""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1831) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lent, the date of creation should after 1918, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lent""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1918) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Helden that after year 1928, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1928) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Helden with building year later than 1934 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1934) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Helden, the date of creation should after 1827, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Helden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1827) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Katwoude that after year 1874, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1874) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Katwoude with building year later than 1801 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Katwoude, the date of creation should after 1901, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Katwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1901) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Hippolytushoef that after year 1813, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hippolytushoef""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1813) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hippolytushoef with building year later than 1820 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hippolytushoef""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1820) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Hippolytushoef, the date of creation should after 1864, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hippolytushoef""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1864) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Tholen that after year 1815, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tholen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1815) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Tholen with building year later than 1879 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tholen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1879) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Tholen, the date of creation should after 1912, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tholen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1912) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Veelerveen that after year 1852, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veelerveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1852) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Veelerveen with building year later than 1941 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veelerveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Veelerveen, the date of creation should after 1947, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veelerveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1947) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Reuver that after year 1881, and sort them from old to new.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reuver""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1881) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Reuver with building year later than 1842 then order them by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reuver""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1842) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Reuver, the date of creation should after 1808, then order ascendingly by built year.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Reuver""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1808) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Goirle that before year 2013.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goirle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Goirle with building year earlier than 2017.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goirle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Goirle, the date of creation should earlier than year 1998.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goirle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Petten that before year 1952.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Petten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Petten with building year earlier than 1964.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Petten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Petten, the date of creation should earlier than year 2006.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Petten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2006) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Giethmen that before year 1975.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Giethmen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Giethmen with building year earlier than 1972.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Giethmen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Giethmen, the date of creation should earlier than year 1988.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Giethmen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Krommenie that before year 1977.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1977) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Krommenie with building year earlier than 1990.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Krommenie, the date of creation should earlier than year 1985.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Krommenie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Zeerijp that before year 1971.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zeerijp with building year earlier than 1972.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Zeerijp, the date of creation should earlier than year 1965.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeerijp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Wieringerwerf that before year 1999.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wieringerwerf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Wieringerwerf with building year earlier than 2009.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wieringerwerf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Wieringerwerf, the date of creation should earlier than year 1979.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wieringerwerf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1979) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of De Blesse that before year 2005.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Blesse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in De Blesse with building year earlier than 1986.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Blesse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in De Blesse, the date of creation should earlier than year 2009.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Blesse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Norg that before year 1980.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Norg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Norg with building year earlier than 1983.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Norg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Norg, the date of creation should earlier than year 1965.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Norg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Papekop that before year 1991.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Papekop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Papekop with building year earlier than 1991.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Papekop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Papekop, the date of creation should earlier than year 1988.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Papekop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address
Postal Address, StreetAddress, Street Address


Now we have a natural language question: 
Show addresses of Noorden that before year 1954.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noorden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Noorden with building year earlier than 2012.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noorden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Noorden, the date of creation should earlier than year 1973.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Noorden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Stoutenburg that before year 1971, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Stoutenburg with building year earlier than 2005, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Stoutenburg, the date of creation should earlier than year 1978 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Oostburg that before year 1975, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oostburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oostburg with building year earlier than 2011, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oostburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oostburg, the date of creation should earlier than year 1964 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oostburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Westerwijtwerd that before year 1952, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerwijtwerd""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Westerwijtwerd with building year earlier than 1996, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerwijtwerd""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Westerwijtwerd, the date of creation should earlier than year 1965 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westerwijtwerd""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Woltersum that before year 2010, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woltersum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Woltersum with building year earlier than 2012, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woltersum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Woltersum, the date of creation should earlier than year 1959 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woltersum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Berghem that before year 1954, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Berghem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Berghem with building year earlier than 2000, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Berghem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Berghem, the date of creation should earlier than year 1973 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Berghem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Gorssel that before year 2001, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gorssel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gorssel with building year earlier than 1978, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gorssel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Gorssel, the date of creation should earlier than year 2011 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gorssel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Lengel that before year 1978, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lengel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lengel with building year earlier than 1950, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lengel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lengel, the date of creation should earlier than year 1967 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lengel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Soest that before year 1951, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Soest""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1951) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Soest with building year earlier than 1983, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Soest""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Soest, the date of creation should earlier than year 1953 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Soest""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1953) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Foudgum that before year 2001, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foudgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Foudgum with building year earlier than 1985, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foudgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Foudgum, the date of creation should earlier than year 1982 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Foudgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
Show addresses of Lopikerkapel that before year 2013, these addresses should be sorted by the year of creation.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lopikerkapel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lopikerkapel with building year earlier than 1967, order by building year ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lopikerkapel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lopikerkapel, the date of creation should earlier than year 2021 then order them by date.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lopikerkapel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the number of addresses in Wommels that built between year 434 and 748.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 434 && ?datecreated <= 748) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Wommels with building year between 64 and 978.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 64 && ?datecreated <= 978) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Wommels, the date of creation should between 399 and 520.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 399 && ?datecreated <= 520) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Wommels that built between year 23 and 723.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wommels""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 23 && ?datecreated <= 723) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Aduard that built between year 406 and 582.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aduard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 406 && ?datecreated <= 582) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Aduard with building year between 66 and 533.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aduard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 66 && ?datecreated <= 533) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Aduard, the date of creation should between 397 and 903.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aduard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 397 && ?datecreated <= 903) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Aduard that built between year 491 and 574.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aduard""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 491 && ?datecreated <= 574) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show the number of addresses in Rosmalen that built between year 482 and 629.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rosmalen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 482 && ?datecreated <= 629) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Give the number of places in Rosmalen with building year between 17 and 992.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rosmalen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 17 && ?datecreated <= 992) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show the quantity of registered places in Rosmalen, the date of creation should between 203 and 591.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rosmalen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 203 && ?datecreated <= 591) }"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
How many places in Rosmalen that built between year 59 and 641.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rosmalen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 59 && ?datecreated <= 641) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Westeremden that built between year 310 and 878.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 310 && ?datecreated <= 878) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Give the number of places in Westeremden with building year between 229 and 708.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 229 && ?datecreated <= 708) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Westeremden, the date of creation should between 50 and 511.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 50 && ?datecreated <= 511) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Westeremden that built between year 282 and 664.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 282 && ?datecreated <= 664) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Dalmsholte that built between year 75 and 730.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dalmsholte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 75 && ?datecreated <= 730) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Dalmsholte with building year between 497 and 577.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dalmsholte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 497 && ?datecreated <= 577) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Dalmsholte, the date of creation should between 128 and 558.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dalmsholte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 128 && ?datecreated <= 558) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Dalmsholte that built between year 44 and 937.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dalmsholte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 44 && ?datecreated <= 937) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Steenwijkerwold that built between year 428 and 520.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijkerwold""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 428 && ?datecreated <= 520) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Steenwijkerwold with building year between 314 and 796.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijkerwold""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 314 && ?datecreated <= 796) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Steenwijkerwold, the date of creation should between 170 and 796.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijkerwold""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 170 && ?datecreated <= 796) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Steenwijkerwold that built between year 145 and 584.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijkerwold""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 145 && ?datecreated <= 584) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Boelenslaan that built between year 59 and 842.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boelenslaan""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 59 && ?datecreated <= 842) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Boelenslaan with building year between 53 and 573.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boelenslaan""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 53 && ?datecreated <= 573) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Boelenslaan, the date of creation should between 346 and 953.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boelenslaan""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 346 && ?datecreated <= 953) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Boelenslaan that built between year 159 and 964.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Boelenslaan""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 159 && ?datecreated <= 964) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Eursinge that built between year 189 and 914.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 189 && ?datecreated <= 914) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give the number of places in Eursinge with building year between 52 and 834.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 52 && ?datecreated <= 834) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the quantity of registered places in Eursinge, the date of creation should between 438 and 553.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 438 && ?datecreated <= 553) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
How many places in Eursinge that built between year 375 and 944.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eursinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 375 && ?datecreated <= 944) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Ulvenhout that built between year 85 and 746.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulvenhout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 85 && ?datecreated <= 746) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Ulvenhout with building year between 165 and 912.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulvenhout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 165 && ?datecreated <= 912) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Ulvenhout, the date of creation should between 402 and 571.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulvenhout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 402 && ?datecreated <= 571) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Ulvenhout that built between year 305 and 744.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulvenhout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 305 && ?datecreated <= 744) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses in Ruinen that built between year 7 and 643.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ruinen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 7 && ?datecreated <= 643) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Give the number of places in Ruinen with building year between 245 and 586.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ruinen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 245 && ?datecreated <= 586) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the quantity of registered places in Ruinen, the date of creation should between 246 and 808.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ruinen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 246 && ?datecreated <= 808) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Ruinen that built between year 207 and 836.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ruinen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 207 && ?datecreated <= 836) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Sintjohannesga that built between year 232 and 882, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 232 && ?datecreated <= 882) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Sintjohannesga with building year between 378 and 565, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 378 && ?datecreated <= 565) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Sintjohannesga, the date of creation should between 17 and 576, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 17 && ?datecreated <= 576) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Sintjohannesga that built between year 416 and 925, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sintjohannesga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 416 && ?datecreated <= 925) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Sint Kruis that built between year 129 and 711, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Kruis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 129 && ?datecreated <= 711) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building


Now we have a natural language question: 
Give places in Sint Kruis with building year between 460 and 797, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Kruis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 460 && ?datecreated <= 797) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show the registered places in Sint Kruis, the date of creation should between 263 and 738, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Kruis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 263 && ?datecreated <= 738) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created


Now we have a natural language question: 
What are places in Sint Kruis that built between year 273 and 559, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Kruis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 273 && ?datecreated <= 559) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Doesburg that built between year 66 and 974, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 66 && ?datecreated <= 974) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Doesburg with building year between 413 and 849, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 413 && ?datecreated <= 849) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Doesburg, the date of creation should between 500 and 973, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 500 && ?datecreated <= 973) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Doesburg that built between year 488 and 662, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doesburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 488 && ?datecreated <= 662) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Eckelrade that built between year 181 and 501, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eckelrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 181 && ?datecreated <= 501) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Eckelrade with building year between 432 and 702, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eckelrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 432 && ?datecreated <= 702) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Eckelrade, the date of creation should between 243 and 681, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eckelrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 243 && ?datecreated <= 681) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Eckelrade that built between year 322 and 967, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eckelrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 322 && ?datecreated <= 967) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Wapserveen that built between year 432 and 751, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wapserveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 432 && ?datecreated <= 751) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building


Now we have a natural language question: 
Give places in Wapserveen with building year between 321 and 971, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wapserveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 321 && ?datecreated <= 971) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show the registered places in Wapserveen, the date of creation should between 496 and 549, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wapserveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 496 && ?datecreated <= 549) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created


Now we have a natural language question: 
What are places in Wapserveen that built between year 416 and 545, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wapserveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 416 && ?datecreated <= 545) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Rozenburg that built between year 59 and 923, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rozenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 59 && ?datecreated <= 923) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give places in Rozenburg with building year between 47 and 969, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rozenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 47 && ?datecreated <= 969) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the registered places in Rozenburg, the date of creation should between 402 and 921, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rozenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 402 && ?datecreated <= 921) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are places in Rozenburg that built between year 382 and 522, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rozenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 382 && ?datecreated <= 522) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Bitgummole that built between year 153 and 827, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 153 && ?datecreated <= 827) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Bitgummole with building year between 448 and 650, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 448 && ?datecreated <= 650) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Bitgummole, the date of creation should between 362 and 905, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 362 && ?datecreated <= 905) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Bitgummole that built between year 96 and 884, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bitgummole""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 96 && ?datecreated <= 884) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Hattem that built between year 491 and 772, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hattem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 491 && ?datecreated <= 772) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building


Now we have a natural language question: 
Give places in Hattem with building year between 182 and 508, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hattem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 182 && ?datecreated <= 508) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show the registered places in Hattem, the date of creation should between 398 and 732, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hattem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 398 && ?datecreated <= 732) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created


Now we have a natural language question: 
What are places in Hattem that built between year 324 and 903, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hattem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 324 && ?datecreated <= 903) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Zuidveld that built between year 291 and 827, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 291 && ?datecreated <= 827) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building


Now we have a natural language question: 
Give places in Zuidveld with building year between 75 and 765, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 75 && ?datecreated <= 765) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the registered places in Zuidveld, the date of creation should between 224 and 869, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 224 && ?datecreated <= 869) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are places in Zuidveld that built between year 487 and 802, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuidveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 487 && ?datecreated <= 802) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Thesinge that built between year 268 and 883, then descendingly order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Thesinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 268 && ?datecreated <= 883) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Thesinge with building year between 36 and 704, order them from new to old.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Thesinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 36 && ?datecreated <= 704) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Thesinge, the date of creation should between 234 and 742, then descendingly sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Thesinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 234 && ?datecreated <= 742) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Thesinge that built between year 112 and 505, the result should be descendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Thesinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 112 && ?datecreated <= 505) } ORDER BY DESC(?datacreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Winschoten that built between year 172 and 704, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winschoten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 172 && ?datecreated <= 704) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
Give places in Winschoten with building year between 187 and 759, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winschoten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 187 && ?datecreated <= 759) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show the registered places in Winschoten, the date of creation should between 389 and 801, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winschoten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 389 && ?datecreated <= 801) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created


Now we have a natural language question: 
What are places in Winschoten that built between year 205 and 636, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Winschoten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 205 && ?datecreated <= 636) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Oijen that built between year 480 and 693, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oijen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 480 && ?datecreated <= 693) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
Give places in Oijen with building year between 278 and 789, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oijen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 278 && ?datecreated <= 789) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Oijen, the date of creation should between 368 and 812, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oijen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 368 && ?datecreated <= 812) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Oijen that built between year 483 and 1000, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oijen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 483 && ?datecreated <= 1000) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Alde Leie that built between year 385 and 729, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alde Leie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 385 && ?datecreated <= 729) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give places in Alde Leie with building year between 480 and 653, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alde Leie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 480 && ?datecreated <= 653) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the registered places in Alde Leie, the date of creation should between 388 and 631, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alde Leie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 388 && ?datecreated <= 631) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are places in Alde Leie that built between year 446 and 824, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alde Leie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 446 && ?datecreated <= 824) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Vianen NB that built between year 386 and 657, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 386 && ?datecreated <= 657) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
Give places in Vianen NB with building year between 72 and 831, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 72 && ?datecreated <= 831) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created


Now we have a natural language question: 
Show the registered places in Vianen NB, the date of creation should between 227 and 804, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 227 && ?datecreated <= 804) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created


Now we have a natural language question: 
What are places in Vianen NB that built between year 15 and 764, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vianen NB""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 15 && ?datecreated <= 764) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building


Now we have a natural language question: 
Show addresses in Schardam that built between year 157 and 548, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 157 && ?datecreated <= 548) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give places in Schardam with building year between 214 and 816, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 214 && ?datecreated <= 816) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
Show the registered places in Schardam, the date of creation should between 92 and 543, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 92 && ?datecreated <= 543) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, Address, Postal Address


Now we have a natural language question: 
What are places in Schardam that built between year 225 and 952, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 225 && ?datecreated <= 952) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Hoornsterzwaag that built between year 447 and 602, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoornsterzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 447 && ?datecreated <= 602) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Hoornsterzwaag with building year between 106 and 585, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoornsterzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 106 && ?datecreated <= 585) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Hoornsterzwaag, the date of creation should between 297 and 784, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoornsterzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 297 && ?datecreated <= 784) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Hoornsterzwaag that built between year 131 and 899, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoornsterzwaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 131 && ?datecreated <= 899) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Venhuizen that built between year 463 and 745, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Venhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 463 && ?datecreated <= 745) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Venhuizen with building year between 273 and 593, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Venhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 273 && ?datecreated <= 593) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Venhuizen, the date of creation should between 418 and 834, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Venhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 418 && ?datecreated <= 834) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Venhuizen that built between year 434 and 555, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Venhuizen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 434 && ?datecreated <= 555) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Molenhoek that built between year 132 and 518, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenhoek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 132 && ?datecreated <= 518) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
Give places in Molenhoek with building year between 283 and 966, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenhoek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 283 && ?datecreated <= 966) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Molenhoek, the date of creation should between 292 and 713, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenhoek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 292 && ?datecreated <= 713) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Molenhoek that built between year 149 and 969, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Molenhoek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 149 && ?datecreated <= 969) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Zeeland that built between year 346 and 767, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeeland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 346 && ?datecreated <= 767) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Zeeland with building year between 24 and 853, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeeland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 24 && ?datecreated <= 853) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Zeeland, the date of creation should between 408 and 961, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeeland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 408 && ?datecreated <= 961) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Zeeland that built between year 127 and 860, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zeeland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 127 && ?datecreated <= 860) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses in Radio Kootwijk that built between year 487 and 784, then order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Radio Kootwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 487 && ?datecreated <= 784) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give places in Radio Kootwijk with building year between 350 and 901, order them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Radio Kootwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 350 && ?datecreated <= 901) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the registered places in Radio Kootwijk, the date of creation should between 344 and 944, then sort them.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Radio Kootwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 344 && ?datecreated <= 944) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, additionalType, Police station
Administrative Area, containsPlace, Place


Now we have a natural language question: 
What are places in Radio Kootwijk that built between year 490 and 707, the result should be ascendingly orderd.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Radio Kootwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 490 && ?datecreated <= 707) } ORDER BY ?datacreated"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the number addresses of Veghel that after year 1916.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veghel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1916) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give the number of places in Veghel with building year later than 1933.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veghel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1933) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Veghel, the date of creation should after 1885.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veghel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many addresses in Veghel with the built year after 1812.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veghel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1812) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many places in Veghel that built after year 1891.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veghel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1891) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of Hapert that after year 1865.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hapert""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Hapert with building year later than 1889.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hapert""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1889) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Hapert, the date of creation should after 1938.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hapert""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1938) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Hapert with the built year after 1947.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hapert""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1947) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Hapert that built after year 1935.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hapert""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of Vierlingsbeek that after year 1902.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierlingsbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1902) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Vierlingsbeek with building year later than 1884.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierlingsbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1884) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Vierlingsbeek, the date of creation should after 1897.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierlingsbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Vierlingsbeek with the built year after 1801.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierlingsbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Vierlingsbeek that built after year 1935.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierlingsbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of Woensdrecht that after year 1801.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woensdrecht""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Woensdrecht with building year later than 1935.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woensdrecht""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Woensdrecht, the date of creation should after 1829.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woensdrecht""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1829) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Woensdrecht with the built year after 1889.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woensdrecht""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1889) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Woensdrecht that built after year 1853.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Woensdrecht""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1853) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of De Heurne that after year 1879.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Heurne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1879) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give the number of places in De Heurne with building year later than 1923.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Heurne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1923) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in De Heurne, the date of creation should after 1895.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Heurne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1895) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many addresses in De Heurne with the built year after 1938.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Heurne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1938) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many places in De Heurne that built after year 1936.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Heurne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1936) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the number addresses of Wijk bij Duurstede that after year 1913.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1913) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Wijk bij Duurstede with building year later than 1940.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1940) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Wijk bij Duurstede, the date of creation should after 1862.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many addresses in Wijk bij Duurstede with the built year after 1870.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1870) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Wijk bij Duurstede that built after year 1801.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the number addresses of Fleringen that after year 1831.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Fleringen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1831) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Fleringen with building year later than 1805.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Fleringen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1805) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Fleringen, the date of creation should after 1849.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Fleringen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1849) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many addresses in Fleringen with the built year after 1818.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Fleringen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1818) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Fleringen that built after year 1900.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Fleringen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1900) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of Witharen that after year 1862.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Witharen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Witharen with building year later than 1938.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Witharen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1938) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Witharen, the date of creation should after 1914.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Witharen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1914) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Witharen with the built year after 1855.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Witharen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Witharen that built after year 1814.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Witharen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of Ooltgensplaat that after year 1823.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1823) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Ooltgensplaat with building year later than 1904.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1904) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Ooltgensplaat, the date of creation should after 1872.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1872) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Ooltgensplaat with the built year after 1899.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1899) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Ooltgensplaat that built after year 1809.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ooltgensplaat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1809) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number addresses of Wergea that after year 1862.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wergea""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the number of places in Wergea with building year later than 1859.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wergea""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Wergea, the date of creation should after 1936.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wergea""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1936) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Wergea with the built year after 1888.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wergea""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1888) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many places in Wergea that built after year 1935.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wergea""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Werkendam that before year 1952.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Werkendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Werkendam with building year earlier than 2019.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Werkendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Werkendam, the date of creation should earlier than year 2000.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Werkendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Werkendam that built earlier than year 1965.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Werkendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Werkendam that created before 1967.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Werkendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Kampen that before year 1975.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kampen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Kampen with building year earlier than 1965.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kampen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Kampen, the date of creation should earlier than year 1954.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kampen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954) }"
"Suppose we have a graph pattern:
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Kampen that built earlier than year 1966.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kampen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Kampen that created before 1992.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kampen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1992) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Goënga that before year 1997.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Goënga with building year earlier than 1952.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Goënga, the date of creation should earlier than year 1990.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
How many palces in Goënga that built earlier than year 2011.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Goënga that created before 1958.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Goënga""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show the number of addresses of Roderwolde that before year 1988.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roderwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Roderwolde with building year earlier than 1959.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roderwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Roderwolde, the date of creation should earlier than year 1954.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roderwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Roderwolde that built earlier than year 1952.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roderwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Roderwolde that created before 1973.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roderwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Hulten that before year 1971.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Hulten with building year earlier than 1993.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Hulten, the date of creation should earlier than year 2004.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2004) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Hulten that built earlier than year 1983.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Hulten that created before 1969.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Kropswolde that before year 1985.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kropswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Kropswolde with building year earlier than 1995.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kropswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Kropswolde, the date of creation should earlier than year 2020.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kropswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Kropswolde that built earlier than year 1956.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kropswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Kropswolde that created before 1961.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kropswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Veenoord that before year 2016.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Veenoord with building year earlier than 1991.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Veenoord, the date of creation should earlier than year 1988.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Veenoord that built earlier than year 1981.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
How many addresses in Veenoord that created before 1993.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Terwolde that before year 1979.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1979) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Terwolde with building year earlier than 1996.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Terwolde, the date of creation should earlier than year 2009.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
How many palces in Terwolde that built earlier than year 2009.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Terwolde that created before 2016.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Terwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2016) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Oldemarkt that before year 1986.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give the quantity of places in Oldemarkt with building year earlier than 1957.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Oldemarkt, the date of creation should earlier than year 1960.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, dateCreated, date Created


Now we have a natural language question: 
How many palces in Oldemarkt that built earlier than year 2005.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Oldemarkt that created before 1969.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oldemarkt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
Show the number of addresses of Piaam that before year 1974.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piaam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1974) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give the quantity of places in Piaam with building year earlier than 1964.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piaam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show number of registered places in Piaam, the date of creation should earlier than year 2013.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piaam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013) }"
"Suppose we have a graph pattern:
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
How many palces in Piaam that built earlier than year 1958.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piaam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, Address, Postal Address
Place, Address, Postal Address


Now we have a natural language question: 
How many addresses in Piaam that created before 1976.

The corresponding sparql query is:
SELECT DISTINCT (count(?address) as ?quantity) WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Piaam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Olterterp that built between year 1855 and 2007, floor size between 76 and 350.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olterterp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855 && ?datecreated <= 2007). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 76 && ?floorsize <= 350) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Olterterp, building year between 1867 and 1992, floor size between 128 and 408.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olterterp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1867 && ?datecreated <= 1992). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128 && ?floorsize <= 408) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Olterterp, built between 1881 and 1989, floor size between 149 and 415.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olterterp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1881 && ?datecreated <= 1989). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 149 && ?floorsize <= 415) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Olterterp with built between 1920 and 1970, floor size larger than 188 but smaller than 414.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olterterp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 188 && ?floorsize <= 414) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Olterterp built later than 1939 but earlier than 1966, floor size larger than 89 but smaller than 455.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Olterterp""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1939 && ?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 89 && ?floorsize <= 455) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Alem that built between year 1849 and 1973, floor size between 167 and 219.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1849 && ?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 167 && ?floorsize <= 219) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Alem, building year between 1832 and 1988, floor size between 80 and 321.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1832 && ?datecreated <= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 80 && ?floorsize <= 321) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Alem, built between 1941 and 2002, floor size between 92 and 346.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941 && ?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 92 && ?floorsize <= 346) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Alem with built between 1866 and 2000, floor size larger than 58 but smaller than 343.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1866 && ?datecreated <= 2000). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 58 && ?floorsize <= 343) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Alem built later than 1893 but earlier than 1984, floor size larger than 62 but smaller than 358.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893 && ?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 62 && ?floorsize <= 358) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Roelofarendsveen that built between year 1886 and 1973, floor size between 72 and 309.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roelofarendsveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886 && ?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 72 && ?floorsize <= 309) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Roelofarendsveen, building year between 1897 and 1981, floor size between 137 and 468.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roelofarendsveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897 && ?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 137 && ?floorsize <= 468) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Roelofarendsveen, built between 1898 and 1999, floor size between 166 and 285.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roelofarendsveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898 && ?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 166 && ?floorsize <= 285) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Roelofarendsveen with built between 1937 and 1985, floor size larger than 73 but smaller than 487.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roelofarendsveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1937 && ?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 73 && ?floorsize <= 487) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Roelofarendsveen built later than 1801 but earlier than 2018, floor size larger than 110 but smaller than 284.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Roelofarendsveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801 && ?datecreated <= 2018). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 110 && ?floorsize <= 284) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Zandeweer that built between year 1838 and 2013, floor size between 152 and 305.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zandeweer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838 && ?datecreated <= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 152 && ?floorsize <= 305) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zandeweer, building year between 1898 and 1961, floor size between 170 and 336.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zandeweer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898 && ?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 170 && ?floorsize <= 336) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Zandeweer, built between 1819 and 2020, floor size between 184 and 382.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zandeweer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1819 && ?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 184 && ?floorsize <= 382) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zandeweer with built between 1837 and 1971, floor size larger than 168 but smaller than 269.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zandeweer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1837 && ?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 168 && ?floorsize <= 269) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zandeweer built later than 1893 but earlier than 1955, floor size larger than 82 but smaller than 344.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zandeweer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893 && ?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 82 && ?floorsize <= 344) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Driehuis NH that built between year 1865 and 1954, floor size between 103 and 283.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driehuis NH""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865 && ?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 103 && ?floorsize <= 283) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Driehuis NH, building year between 1809 and 1961, floor size between 60 and 317.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driehuis NH""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1809 && ?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 60 && ?floorsize <= 317) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Driehuis NH, built between 1942 and 2018, floor size between 152 and 398.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driehuis NH""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1942 && ?datecreated <= 2018). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 152 && ?floorsize <= 398) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Driehuis NH with built between 1937 and 1969, floor size larger than 126 but smaller than 474.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driehuis NH""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1937 && ?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 126 && ?floorsize <= 474) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Driehuis NH built later than 1864 but earlier than 2020, floor size larger than 106 but smaller than 332.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Driehuis NH""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1864 && ?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 106 && ?floorsize <= 332) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hulsberg that built between year 1946 and 1976, floor size between 118 and 470.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulsberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 118 && ?floorsize <= 470) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hulsberg, building year between 1945 and 2020, floor size between 157 and 232.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulsberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945 && ?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 157 && ?floorsize <= 232) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Hulsberg, built between 1934 and 2009, floor size between 188 and 335.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulsberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1934 && ?datecreated <= 2009). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 188 && ?floorsize <= 335) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hulsberg with built between 1863 and 1971, floor size larger than 162 but smaller than 475.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulsberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1863 && ?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 162 && ?floorsize <= 475) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hulsberg built later than 1822 but earlier than 2010, floor size larger than 111 but smaller than 357.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hulsberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822 && ?datecreated <= 2010). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 111 && ?floorsize <= 357) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Dedemsvaart that built between year 1871 and 1976, floor size between 172 and 420.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedemsvaart""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1871 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 172 && ?floorsize <= 420) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Dedemsvaart, building year between 1871 and 1982, floor size between 100 and 466.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedemsvaart""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1871 && ?datecreated <= 1982). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 100 && ?floorsize <= 466) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Dedemsvaart, built between 1826 and 1996, floor size between 80 and 332.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedemsvaart""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1826 && ?datecreated <= 1996). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 80 && ?floorsize <= 332) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Dedemsvaart with built between 1895 and 1976, floor size larger than 126 but smaller than 397.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedemsvaart""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1895 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 126 && ?floorsize <= 397) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Dedemsvaart built later than 1949 but earlier than 1961, floor size larger than 108 but smaller than 446.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dedemsvaart""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949 && ?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 108 && ?floorsize <= 446) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Eenum that built between year 1940 and 1992, floor size between 112 and 254.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eenum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1940 && ?datecreated <= 1992). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 112 && ?floorsize <= 254) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Eenum, building year between 1810 and 1971, floor size between 186 and 459.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eenum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1810 && ?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 186 && ?floorsize <= 459) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show registered places in Eenum, built between 1908 and 1971, floor size between 159 and 356.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eenum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1908 && ?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 159 && ?floorsize <= 356) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Eenum with built between 1922 and 1959, floor size larger than 183 but smaller than 247.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eenum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1922 && ?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 183 && ?floorsize <= 247) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Eenum built later than 1882 but earlier than 1980, floor size larger than 76 but smaller than 491.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eenum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1882 && ?datecreated <= 1980). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 76 && ?floorsize <= 491) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Saasveld that built between year 1817 and 2001, floor size between 52 and 205.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saasveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1817 && ?datecreated <= 2001). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 205) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Saasveld, building year between 1892 and 2013, floor size between 68 and 449.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saasveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1892 && ?datecreated <= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 68 && ?floorsize <= 449) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Saasveld, built between 1919 and 1964, floor size between 92 and 357.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saasveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1919 && ?datecreated <= 1964). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 92 && ?floorsize <= 357) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Saasveld with built between 1931 and 1961, floor size larger than 154 but smaller than 428.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saasveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1931 && ?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 154 && ?floorsize <= 428) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Saasveld built later than 1898 but earlier than 1989, floor size larger than 79 but smaller than 251.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Saasveld""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898 && ?datecreated <= 1989). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 79 && ?floorsize <= 251) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Schardam that built between year 1859 and 1984, floor size between 63 and 312.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859 && ?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 63 && ?floorsize <= 312) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Schardam, building year between 1828 and 1974, floor size between 121 and 454.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1828 && ?datecreated <= 1974). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 121 && ?floorsize <= 454) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Schardam, built between 1825 and 2000, floor size between 198 and 447.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1825 && ?datecreated <= 2000). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 198 && ?floorsize <= 447) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Schardam with built between 1910 and 2016, floor size larger than 178 but smaller than 253.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1910 && ?datecreated <= 2016). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 178 && ?floorsize <= 253) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Schardam built later than 1814 but earlier than 1981, floor size larger than 159 but smaller than 434.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Schardam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814 && ?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 159 && ?floorsize <= 434) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Hooge Zwaluwe that built between year 1813 and 1955, floor size between 134 and 450, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1813 && ?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 134 && ?floorsize <= 450) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hooge Zwaluwe, building year between 1875 and 1988, floor size between 147 and 241, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1875 && ?datecreated <= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 147 && ?floorsize <= 241) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Hooge Zwaluwe, built between 1942 and 2009, floor size between 187 and 408, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1942 && ?datecreated <= 2009). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 187 && ?floorsize <= 408) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hooge Zwaluwe with built between 1817 and 1959, floor size larger than 81 but smaller than 413, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1817 && ?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 81 && ?floorsize <= 413) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hooge Zwaluwe built later than 1900 but earlier than 1962, floor size larger than 147 but smaller than 404, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1900 && ?datecreated <= 1962). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 147 && ?floorsize <= 404) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Herbaijum that built between year 1848 and 2006, floor size between 154 and 424, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herbaijum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1848 && ?datecreated <= 2006). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 154 && ?floorsize <= 424) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Herbaijum, building year between 1800 and 1961, floor size between 149 and 398, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herbaijum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800 && ?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 149 && ?floorsize <= 398) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Herbaijum, built between 1840 and 2002, floor size between 77 and 404, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herbaijum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840 && ?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 77 && ?floorsize <= 404) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Herbaijum with built between 1904 and 1985, floor size larger than 182 but smaller than 459, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herbaijum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1904 && ?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 182 && ?floorsize <= 459) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Herbaijum built later than 1807 but earlier than 1997, floor size larger than 104 but smaller than 416, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Herbaijum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1807 && ?datecreated <= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 104 && ?floorsize <= 416) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Ulestraten that built between year 1897 and 1951, floor size between 147 and 387, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulestraten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897 && ?datecreated <= 1951). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 147 && ?floorsize <= 387) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ulestraten, building year between 1868 and 1975, floor size between 161 and 495, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulestraten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868 && ?datecreated <= 1975). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 161 && ?floorsize <= 495) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Ulestraten, built between 1917 and 2020, floor size between 189 and 267, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulestraten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917 && ?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 189 && ?floorsize <= 267) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ulestraten with built between 1891 and 1998, floor size larger than 63 but smaller than 454, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulestraten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1891 && ?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 63 && ?floorsize <= 454) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ulestraten built later than 1848 but earlier than 1974, floor size larger than 182 but smaller than 434, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ulestraten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1848 && ?datecreated <= 1974). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 182 && ?floorsize <= 434) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Zaamslag that built between year 1801 and 1985, floor size between 142 and 240, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801 && ?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 142 && ?floorsize <= 240) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zaamslag, building year between 1885 and 1954, floor size between 72 and 266, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885 && ?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 72 && ?floorsize <= 266) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Zaamslag, built between 1804 and 1972, floor size between 59 and 285, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804 && ?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 59 && ?floorsize <= 285) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zaamslag with built between 1857 and 2017, floor size larger than 106 but smaller than 341, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1857 && ?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 106 && ?floorsize <= 341) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zaamslag built later than 1829 but earlier than 1955, floor size larger than 59 but smaller than 278, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zaamslag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1829 && ?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 59 && ?floorsize <= 278) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Eersel that built between year 1936 and 2017, floor size between 116 and 464, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eersel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1936 && ?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 116 && ?floorsize <= 464) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Eersel, building year between 1945 and 1987, floor size between 141 and 405, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eersel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945 && ?datecreated <= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 141 && ?floorsize <= 405) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Eersel, built between 1830 and 1973, floor size between 74 and 341, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eersel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830 && ?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 74 && ?floorsize <= 341) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Eersel with built between 1935 and 1968, floor size larger than 108 but smaller than 295, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eersel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935 && ?datecreated <= 1968). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 108 && ?floorsize <= 295) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Eersel built later than 1844 but earlier than 2001, floor size larger than 57 but smaller than 285, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Eersel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1844 && ?datecreated <= 2001). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 57 && ?floorsize <= 285) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Gersloot that built between year 1950 and 2003, floor size between 117 and 258, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gersloot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1950 && ?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 117 && ?floorsize <= 258) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gersloot, building year between 1844 and 1992, floor size between 101 and 478, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gersloot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1844 && ?datecreated <= 1992). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 101 && ?floorsize <= 478) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Gersloot, built between 1884 and 1974, floor size between 88 and 459, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gersloot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1884 && ?datecreated <= 1974). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 88 && ?floorsize <= 459) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gersloot with built between 1923 and 1996, floor size larger than 170 but smaller than 445, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gersloot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1923 && ?datecreated <= 1996). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 170 && ?floorsize <= 445) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gersloot built later than 1878 but earlier than 1952, floor size larger than 121 but smaller than 321, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gersloot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1878 && ?datecreated <= 1952). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 121 && ?floorsize <= 321) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Pernis Rotterdam that built between year 1868 and 2017, floor size between 134 and 397, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pernis Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868 && ?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 134 && ?floorsize <= 397) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Pernis Rotterdam, building year between 1800 and 1985, floor size between 73 and 306, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pernis Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800 && ?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 73 && ?floorsize <= 306) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Pernis Rotterdam, built between 1938 and 2021, floor size between 70 and 324, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pernis Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1938 && ?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 70 && ?floorsize <= 324) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Pernis Rotterdam with built between 1930 and 1984, floor size larger than 83 but smaller than 327, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pernis Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1930 && ?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 83 && ?floorsize <= 327) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Pernis Rotterdam built later than 1928 but earlier than 2012, floor size larger than 151 but smaller than 327, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Pernis Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1928 && ?datecreated <= 2012). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 151 && ?floorsize <= 327) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Europoort Rotterdam that built between year 1928 and 2003, floor size between 139 and 474, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Europoort Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1928 && ?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 139 && ?floorsize <= 474) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Europoort Rotterdam, building year between 1924 and 1982, floor size between 200 and 215, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Europoort Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1924 && ?datecreated <= 1982). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 200 && ?floorsize <= 215) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Europoort Rotterdam, built between 1884 and 1972, floor size between 167 and 294, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Europoort Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1884 && ?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 167 && ?floorsize <= 294) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Europoort Rotterdam with built between 1915 and 2019, floor size larger than 128 but smaller than 236, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Europoort Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1915 && ?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128 && ?floorsize <= 236) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Europoort Rotterdam built later than 1911 but earlier than 2021, floor size larger than 197 but smaller than 274, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Europoort Rotterdam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911 && ?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 197 && ?floorsize <= 274) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Elkenrade that built between year 1905 and 1959, floor size between 190 and 257, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elkenrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1905 && ?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 190 && ?floorsize <= 257) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Elkenrade, building year between 1836 and 1976, floor size between 197 and 298, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elkenrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1836 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 197 && ?floorsize <= 298) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Elkenrade, built between 1820 and 1984, floor size between 135 and 421, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elkenrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1820 && ?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 135 && ?floorsize <= 421) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Elkenrade with built between 1849 and 2003, floor size larger than 128 but smaller than 214, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elkenrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1849 && ?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128 && ?floorsize <= 214) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Elkenrade built later than 1943 but earlier than 1975, floor size larger than 197 but smaller than 356, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elkenrade""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1943 && ?datecreated <= 1975). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 197 && ?floorsize <= 356) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Opheusden that built between year 1915 and 1954, floor size between 168 and 317, then order them by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Opheusden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1915 && ?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 168 && ?floorsize <= 317) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Opheusden, building year between 1903 and 1991, floor size between 88 and 462, sort by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Opheusden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1903 && ?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 88 && ?floorsize <= 462) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Opheusden, built between 1852 and 1964, floor size between 184 and 228, order by floor space.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Opheusden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1852 && ?datecreated <= 1964). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 184 && ?floorsize <= 228) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Opheusden with built between 1849 and 1999, floor size larger than 169 but smaller than 307, the result should be ordered by floor size.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Opheusden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1849 && ?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 169 && ?floorsize <= 307) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Opheusden built later than 1865 but earlier than 2004, floor size larger than 112 but smaller than 253, order by floor size ascendingly.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Opheusden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865 && ?datecreated <= 2004). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 112 && ?floorsize <= 253) } ORDER BY ?floorsize"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Wijk bij Duurstede that built after 1830, floor size between 73 and 263.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 73 && ?floorsize <= 263) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Wijk bij Duurstede, building year after 1886, floor size between 146 and 391.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 146 && ?floorsize <= 391) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Wijk bij Duurstede, built after 1800, floor size between 54 and 304 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 54 && ?floorsize <= 304) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Wijk bij Duurstede that built after 1845, floor size larger than 100 but smaller than 435.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1845). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 100 && ?floorsize <= 435) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Wijk bij Duurstede with creation date later than 1886 and floor size bigger than 103 but smaller than 257.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Wijk bij Duurstede""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 103 && ?floorsize <= 257) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Melick that built after 1848, floor size between 97 and 383.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melick""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1848). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 97 && ?floorsize <= 383) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Melick, building year after 1851, floor size between 74 and 368.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melick""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1851). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 74 && ?floorsize <= 368) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Melick, built after 1910, floor size between 76 and 265 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melick""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1910). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 76 && ?floorsize <= 265) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Melick that built after 1835, floor size larger than 67 but smaller than 318.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melick""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1835). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 67 && ?floorsize <= 318) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Melick with creation date later than 1911 and floor size bigger than 55 but smaller than 217.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melick""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 55 && ?floorsize <= 217) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Bergen aan Zee that built after 1841, floor size between 125 and 430.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1841). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 125 && ?floorsize <= 430) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Bergen aan Zee, building year after 1873, floor size between 140 and 394.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1873). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 140 && ?floorsize <= 394) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Bergen aan Zee, built after 1809, floor size between 175 and 249 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1809). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 175 && ?floorsize <= 249) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bergen aan Zee that built after 1920, floor size larger than 116 but smaller than 202.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 116 && ?floorsize <= 202) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Bergen aan Zee with creation date later than 1819 and floor size bigger than 169 but smaller than 353.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bergen aan Zee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1819). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 169 && ?floorsize <= 353) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hoef en Haag that built after 1864, floor size between 185 and 268.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoef en Haag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1864). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 185 && ?floorsize <= 268) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hoef en Haag, building year after 1906, floor size between 189 and 494.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoef en Haag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1906). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 189 && ?floorsize <= 494) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Hoef en Haag, built after 1863, floor size between 131 and 292 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoef en Haag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1863). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 131 && ?floorsize <= 292) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hoef en Haag that built after 1888, floor size larger than 66 but smaller than 261.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoef en Haag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1888). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 66 && ?floorsize <= 261) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hoef en Haag with creation date later than 1905 and floor size bigger than 115 but smaller than 426.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hoef en Haag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1905). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 115 && ?floorsize <= 426) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Drachtstercompagnie that built after 1887, floor size between 118 and 336.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drachtstercompagnie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1887). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 118 && ?floorsize <= 336) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Drachtstercompagnie, building year after 1832, floor size between 112 and 204.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drachtstercompagnie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1832). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 112 && ?floorsize <= 204) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Drachtstercompagnie, built after 1948, floor size between 110 and 312 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drachtstercompagnie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1948). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 110 && ?floorsize <= 312) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Drachtstercompagnie that built after 1942, floor size larger than 139 but smaller than 334.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drachtstercompagnie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1942). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 139 && ?floorsize <= 334) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Drachtstercompagnie with creation date later than 1850 and floor size bigger than 147 but smaller than 472.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Drachtstercompagnie""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1850). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 147 && ?floorsize <= 472) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Postal Address, StreetAddress, Street Address
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show addresses of Laag Zuthem that built after 1941, floor size between 189 and 394.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Laag Zuthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 189 && ?floorsize <= 394) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Laag Zuthem, building year after 1930, floor size between 86 and 454.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Laag Zuthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1930). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 86 && ?floorsize <= 454) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Laag Zuthem, built after 1931, floor size between 63 and 355 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Laag Zuthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1931). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 63 && ?floorsize <= 355) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Laag Zuthem that built after 1842, floor size larger than 182 but smaller than 280.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Laag Zuthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1842). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 182 && ?floorsize <= 280) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Laag Zuthem with creation date later than 1871 and floor size bigger than 84 but smaller than 220.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Laag Zuthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1871). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 84 && ?floorsize <= 220) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Bontebok that built after 1935, floor size between 146 and 212.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bontebok""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 146 && ?floorsize <= 212) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bontebok, building year after 1817, floor size between 75 and 264.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bontebok""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1817). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 75 && ?floorsize <= 264) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bontebok, built after 1845, floor size between 171 and 439 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bontebok""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1845). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 171 && ?floorsize <= 439) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bontebok that built after 1831, floor size larger than 50 but smaller than 384.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bontebok""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1831). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 50 && ?floorsize <= 384) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bontebok with creation date later than 1823 and floor size bigger than 56 but smaller than 445.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bontebok""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1823). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 56 && ?floorsize <= 445) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Braamt that built after 1868, floor size between 187 and 465.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 187 && ?floorsize <= 465) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Braamt, building year after 1884, floor size between 114 and 270.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1884). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 114 && ?floorsize <= 270) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Braamt, built after 1941, floor size between 144 and 468 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 144 && ?floorsize <= 468) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Braamt that built after 1854, floor size larger than 85 but smaller than 373.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1854). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 85 && ?floorsize <= 373) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Braamt with creation date later than 1833 and floor size bigger than 195 but smaller than 351.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Braamt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1833). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 195 && ?floorsize <= 351) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Ee that built after 1851, floor size between 65 and 457.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1851). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 65 && ?floorsize <= 457) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ee, building year after 1886, floor size between 192 and 395.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 192 && ?floorsize <= 395) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Ee, built after 1855, floor size between 96 and 354 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 96 && ?floorsize <= 354) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ee that built after 1867, floor size larger than 102 but smaller than 403.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1867). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 102 && ?floorsize <= 403) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Ee with creation date later than 1909 and floor size bigger than 55 but smaller than 432.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ee""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1909). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 55 && ?floorsize <= 432) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Overschild that built after 1840, floor size between 57 and 287.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overschild""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 57 && ?floorsize <= 287) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Overschild, building year after 1866, floor size between 159 and 368.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overschild""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1866). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 159 && ?floorsize <= 368) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Overschild, built after 1855, floor size between 144 and 296 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overschild""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 144 && ?floorsize <= 296) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Overschild that built after 1944, floor size larger than 199 but smaller than 485.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overschild""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1944). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 199 && ?floorsize <= 485) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Overschild with creation date later than 1916 and floor size bigger than 91 but smaller than 274.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Overschild""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1916). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 91 && ?floorsize <= 274) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Moerdijk with floor size between 128 and 332 built after 1901.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerdijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1901). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128 && ?floorsize <= 332) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Moerdijk, floor size between 90 and 306, building year after 1823.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerdijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1823). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 90 && ?floorsize <= 306) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Moerdijk, floor size between 189 and 221 squared meters, built after 1802, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerdijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1802). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 189 && ?floorsize <= 221) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Moerdijk floor size larger than 54 but smaller than 433 and built year should after 1898, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerdijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 54 && ?floorsize <= 433) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Moerdijk with floor size bigger than 93 but smaller than 379 creation date later than year 1905.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moerdijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1905). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 93 && ?floorsize <= 379) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Termunterzijl with floor size between 163 and 401 built after 1822.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Termunterzijl""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1822). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 163 && ?floorsize <= 401) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Termunterzijl, floor size between 116 and 220, building year after 1866.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Termunterzijl""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1866). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 116 && ?floorsize <= 220) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Termunterzijl, floor size between 78 and 467 squared meters, built after 1806, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Termunterzijl""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1806). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 78 && ?floorsize <= 467) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Termunterzijl floor size larger than 127 but smaller than 356 and built year should after 1805, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Termunterzijl""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1805). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 127 && ?floorsize <= 356) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Termunterzijl with floor size bigger than 129 but smaller than 230 creation date later than year 1864.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Termunterzijl""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1864). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 129 && ?floorsize <= 230) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Huizinge with floor size between 135 and 320 built after 1858.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huizinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1858). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 135 && ?floorsize <= 320) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Huizinge, floor size between 161 and 235, building year after 1830.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huizinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 161 && ?floorsize <= 235) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Huizinge, floor size between 136 and 330 squared meters, built after 1861, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huizinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1861). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 136 && ?floorsize <= 330) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Huizinge floor size larger than 149 but smaller than 285 and built year should after 1825, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huizinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1825). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 149 && ?floorsize <= 285) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Huizinge with floor size bigger than 136 but smaller than 274 creation date later than year 1814.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Huizinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 136 && ?floorsize <= 274) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Warstiens with floor size between 123 and 457 built after 1801.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warstiens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1801). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 123 && ?floorsize <= 457) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Warstiens, floor size between 86 and 280, building year after 1862.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warstiens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 86 && ?floorsize <= 280) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Warstiens, floor size between 155 and 381 squared meters, built after 1911, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warstiens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 155 && ?floorsize <= 381) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Warstiens floor size larger than 134 but smaller than 323 and built year should after 1804, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warstiens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 134 && ?floorsize <= 323) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Warstiens with floor size bigger than 97 but smaller than 288 creation date later than year 1812.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warstiens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1812). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 97 && ?floorsize <= 288) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Oosterwolde with floor size between 195 and 240 built after 1921.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1921). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 195 && ?floorsize <= 240) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oosterwolde, floor size between 93 and 201, building year after 1920.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 93 && ?floorsize <= 201) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oosterwolde, floor size between 106 and 271 squared meters, built after 1827, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1827). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 106 && ?floorsize <= 271) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oosterwolde floor size larger than 92 but smaller than 232 and built year should after 1806, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1806). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 92 && ?floorsize <= 232) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oosterwolde with floor size bigger than 92 but smaller than 485 creation date later than year 1923.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosterwolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1923). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 92 && ?floorsize <= 485) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Buitenpost with floor size between 195 and 258 built after 1827.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buitenpost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1827). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 195 && ?floorsize <= 258) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Buitenpost, floor size between 200 and 257, building year after 1929.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buitenpost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1929). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 200 && ?floorsize <= 257) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Buitenpost, floor size between 51 and 339 squared meters, built after 1902, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buitenpost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1902). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 51 && ?floorsize <= 339) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Buitenpost floor size larger than 111 but smaller than 423 and built year should after 1944, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buitenpost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1944). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 111 && ?floorsize <= 423) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Buitenpost with floor size bigger than 106 but smaller than 217 creation date later than year 1882.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Buitenpost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1882). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 106 && ?floorsize <= 217) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Oisterwijk with floor size between 174 and 276 built after 1848.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oisterwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1848). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 174 && ?floorsize <= 276) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oisterwijk, floor size between 192 and 233, building year after 1878.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oisterwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1878). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 192 && ?floorsize <= 233) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oisterwijk, floor size between 185 and 498 squared meters, built after 1856, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oisterwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1856). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 185 && ?floorsize <= 498) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oisterwijk floor size larger than 57 but smaller than 472 and built year should after 1877, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oisterwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1877). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 57 && ?floorsize <= 472) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oisterwijk with floor size bigger than 151 but smaller than 301 creation date later than year 1806.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oisterwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1806). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 151 && ?floorsize <= 301) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of De Groeve with floor size between 162 and 259 built after 1925.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Groeve""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 162 && ?floorsize <= 259) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in De Groeve, floor size between 98 and 234, building year after 1878.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Groeve""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1878). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 98 && ?floorsize <= 234) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in De Groeve, floor size between 114 and 367 squared meters, built after 1826, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Groeve""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1826). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 114 && ?floorsize <= 367) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in De Groeve floor size larger than 132 but smaller than 233 and built year should after 1932, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Groeve""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1932). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 132 && ?floorsize <= 233) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in De Groeve with floor size bigger than 172 but smaller than 216 creation date later than year 1859.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Groeve""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 172 && ?floorsize <= 216) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Glane with floor size between 164 and 338 built after 1881.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glane""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1881). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 164 && ?floorsize <= 338) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Glane, floor size between 61 and 204, building year after 1834.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glane""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1834). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 61 && ?floorsize <= 204) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Glane, floor size between 53 and 337 squared meters, built after 1941, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glane""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1941). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 53 && ?floorsize <= 337) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Glane floor size larger than 173 but smaller than 480 and built year should after 1836, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glane""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1836). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 173 && ?floorsize <= 480) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Glane with floor size bigger than 102 but smaller than 364 creation date later than year 1896.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Glane""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1896). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 102 && ?floorsize <= 364) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Groesbeek with floor size between 134 and 260 built after 1911.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 134 && ?floorsize <= 260) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Groesbeek, floor size between 178 and 401, building year after 1807.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1807). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 178 && ?floorsize <= 401) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Groesbeek, floor size between 109 and 212 squared meters, built after 1911, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 109 && ?floorsize <= 212) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Groesbeek floor size larger than 194 but smaller than 378 and built year should after 1804, .

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 194 && ?floorsize <= 378) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Groesbeek with floor size bigger than 101 but smaller than 432 creation date later than year 1810.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize  WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Groesbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1810). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 101 && ?floorsize <= 432) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Elshout that built before 2014, floor size between 136 and 360.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elshout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 136 && ?floorsize <= 360) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Elshout, building year earlier than 1985, floor size between 90 and 356.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elshout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 90 && ?floorsize <= 356) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Elshout built earlier than year 1992, floor size between 196 and 283.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elshout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1992). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 196 && ?floorsize <= 283) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Elshout that registered before year 2021 and with floor size larger than 194 but smaller than 285 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elshout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 194 && ?floorsize <= 285) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Elshout built before 1989 with floor size bigger than 168 but smaller than 364.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Elshout""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 168 && ?floorsize <= 364) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Lienden that built before 1999, floor size between 133 and 261.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lienden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 133 && ?floorsize <= 261) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lienden, building year earlier than 2008, floor size between 163 and 302.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lienden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 163 && ?floorsize <= 302) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lienden built earlier than year 1957, floor size between 127 and 345.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lienden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 127 && ?floorsize <= 345) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lienden that registered before year 2013 and with floor size larger than 97 but smaller than 357 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lienden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 97 && ?floorsize <= 357) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lienden built before 1961 with floor size bigger than 76 but smaller than 346.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lienden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 76 && ?floorsize <= 346) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Smakt that built before 1973, floor size between 69 and 264.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Smakt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 69 && ?floorsize <= 264) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Smakt, building year earlier than 2011, floor size between 155 and 332.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Smakt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 155 && ?floorsize <= 332) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Smakt built earlier than year 1960, floor size between 63 and 481.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Smakt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 63 && ?floorsize <= 481) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Smakt that registered before year 1986 and with floor size larger than 151 but smaller than 454 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Smakt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 151 && ?floorsize <= 454) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Smakt built before 2002 with floor size bigger than 185 but smaller than 414.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Smakt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 185 && ?floorsize <= 414) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Doezum that built before 2002, floor size between 61 and 355.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doezum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 61 && ?floorsize <= 355) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Doezum, building year earlier than 2019, floor size between 91 and 208.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doezum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 91 && ?floorsize <= 208) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Doezum built earlier than year 1965, floor size between 101 and 301.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doezum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 101 && ?floorsize <= 301) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Doezum that registered before year 2008 and with floor size larger than 156 but smaller than 384 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doezum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 156 && ?floorsize <= 384) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Doezum built before 1985 with floor size bigger than 129 but smaller than 383.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Doezum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 129 && ?floorsize <= 383) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Yde that built before 2009, floor size between 151 and 296.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 151 && ?floorsize <= 296) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Yde, building year earlier than 1981, floor size between 77 and 320.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 77 && ?floorsize <= 320) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Yde built earlier than year 1995, floor size between 124 and 308.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 124 && ?floorsize <= 308) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Yde that registered before year 1956 and with floor size larger than 104 but smaller than 448 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 104 && ?floorsize <= 448) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Yde built before 1998 with floor size bigger than 144 but smaller than 295.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 144 && ?floorsize <= 295) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Aalsmeerderbrug that built before 1954, floor size between 97 and 376.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aalsmeerderbrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 97 && ?floorsize <= 376) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Aalsmeerderbrug, building year earlier than 2021, floor size between 182 and 256.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aalsmeerderbrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 182 && ?floorsize <= 256) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Aalsmeerderbrug built earlier than year 2002, floor size between 77 and 460.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aalsmeerderbrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 77 && ?floorsize <= 460) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Aalsmeerderbrug that registered before year 1971 and with floor size larger than 101 but smaller than 431 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aalsmeerderbrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 101 && ?floorsize <= 431) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Aalsmeerderbrug built before 2011 with floor size bigger than 183 but smaller than 475.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Aalsmeerderbrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 183 && ?floorsize <= 475) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Lambertschaag that built before 1966, floor size between 162 and 456.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lambertschaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 162 && ?floorsize <= 456) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lambertschaag, building year earlier than 1972, floor size between 168 and 217.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lambertschaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 168 && ?floorsize <= 217) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lambertschaag built earlier than year 2020, floor size between 84 and 210.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lambertschaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 84 && ?floorsize <= 210) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lambertschaag that registered before year 1991 and with floor size larger than 154 but smaller than 259 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lambertschaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 154 && ?floorsize <= 259) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lambertschaag built before 2008 with floor size bigger than 119 but smaller than 220.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lambertschaag""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 119 && ?floorsize <= 220) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Sint Joost that built before 1999, floor size between 123 and 334.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Joost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 123 && ?floorsize <= 334) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Sint Joost, building year earlier than 1996, floor size between 59 and 342.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Joost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 59 && ?floorsize <= 342) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Sint Joost built earlier than year 1964, floor size between 63 and 406.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Joost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 63 && ?floorsize <= 406) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Sint Joost that registered before year 1969 and with floor size larger than 158 but smaller than 227 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Joost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 158 && ?floorsize <= 227) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Sint Joost built before 1959 with floor size bigger than 128 but smaller than 367.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Joost""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128 && ?floorsize <= 367) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Polsbroek that built before 1990, floor size between 160 and 460.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Polsbroek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 160 && ?floorsize <= 460) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Polsbroek, building year earlier than 1991, floor size between 107 and 211.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Polsbroek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 107 && ?floorsize <= 211) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Polsbroek built earlier than year 1982, floor size between 160 and 354.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Polsbroek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 160 && ?floorsize <= 354) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Polsbroek that registered before year 1973 and with floor size larger than 168 but smaller than 359 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Polsbroek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 168 && ?floorsize <= 359) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Polsbroek built before 2011 with floor size bigger than 186 but smaller than 330.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Polsbroek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 186 && ?floorsize <= 330) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hooge Zwaluwe that built before 1955, floor size between 160 and 345.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 160 && ?floorsize <= 345) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hooge Zwaluwe, building year earlier than 2020, floor size between 55 and 200.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 55 && ?floorsize <= 200) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Hooge Zwaluwe built earlier than year 2010, floor size between 81 and 279.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2010). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 81 && ?floorsize <= 279) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hooge Zwaluwe that registered before year 1986 and with floor size larger than 52 but smaller than 231 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 52 && ?floorsize <= 231) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hooge Zwaluwe built before 1997 with floor size bigger than 69 but smaller than 466.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hooge Zwaluwe""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 69 && ?floorsize <= 466) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Alteveer gem Hoogeveen that built between year 1886 and 1960, floor size bigger than 70 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer gem Hoogeveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886 && ?datecreated <= 1960). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 70) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Alteveer gem Hoogeveen, building year between 1886 and 2006, floor size larger than 153 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer gem Hoogeveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886 && ?datecreated <= 2006). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 153) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Alteveer gem Hoogeveen, built between year 1873 and 2018, floor size larger than 123 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer gem Hoogeveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1873 && ?datecreated <= 2018). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 123) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Alteveer gem Hoogeveen built between 1834 and 1987 and floor size larger than 53.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer gem Hoogeveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1834 && ?datecreated <= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 53) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Alteveer gem Hoogeveen built later than 1933 earlier than 1950, floor size no smaller than 196 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alteveer gem Hoogeveen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1933 && ?datecreated <= 1950). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 196) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of 's-Heerenberg that built between year 1803 and 2010, floor size bigger than 153 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Heerenberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1803 && ?datecreated <= 2010). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 153) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in 's-Heerenberg, building year between 1919 and 1983, floor size larger than 113 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Heerenberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1919 && ?datecreated <= 1983). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 113) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in 's-Heerenberg, built between year 1893 and 1994, floor size larger than 157 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Heerenberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893 && ?datecreated <= 1994). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 157) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in 's-Heerenberg built between 1853 and 1966 and floor size larger than 142.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Heerenberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1853 && ?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 142) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in 's-Heerenberg built later than 1853 earlier than 1953, floor size no smaller than 129 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Heerenberg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1853 && ?datecreated <= 1953). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 129) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Lemiers that built between year 1911 and 2011, floor size bigger than 95 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911 && ?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 95) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Lemiers, building year between 1915 and 2019, floor size larger than 133 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1915 && ?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 133) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Lemiers, built between year 1841 and 1972, floor size larger than 157 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1841 && ?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 157) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Lemiers built between 1870 and 1961 and floor size larger than 75.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1870 && ?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 75) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Lemiers built later than 1817 earlier than 1963, floor size no smaller than 156 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lemiers""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1817 && ?datecreated <= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 156) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hardinxveld-Giessendam that built between year 1911 and 2011, floor size bigger than 196 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardinxveld-Giessendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911 && ?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 196) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hardinxveld-Giessendam, building year between 1917 and 1982, floor size larger than 137 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardinxveld-Giessendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917 && ?datecreated <= 1982). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 137) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Hardinxveld-Giessendam, built between year 1840 and 2017, floor size larger than 169 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardinxveld-Giessendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840 && ?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 169) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hardinxveld-Giessendam built between 1859 and 1953 and floor size larger than 149.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardinxveld-Giessendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859 && ?datecreated <= 1953). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 149) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hardinxveld-Giessendam built later than 1816 earlier than 1990, floor size no smaller than 187 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hardinxveld-Giessendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816 && ?datecreated <= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 187) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Amen that built between year 1842 and 2006, floor size bigger than 108 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Amen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1842 && ?datecreated <= 2006). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 108) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Amen, building year between 1942 and 1975, floor size larger than 128 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Amen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1942 && ?datecreated <= 1975). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Amen, built between year 1821 and 2010, floor size larger than 82 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Amen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1821 && ?datecreated <= 2010). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 82) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Amen built between 1929 and 2014 and floor size larger than 153.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Amen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1929 && ?datecreated <= 2014). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 153) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Church


Now we have a natural language question: 
Give all places in Amen built later than 1886 earlier than 1976, floor size no smaller than 90 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Amen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1886 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 90) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Alkmaar that built between year 1842 and 1998, floor size bigger than 53 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alkmaar""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1842 && ?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 53) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Alkmaar, building year between 1881 and 1991, floor size larger than 128 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alkmaar""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1881 && ?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 128) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Alkmaar, built between year 1925 and 1990, floor size larger than 100 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alkmaar""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925 && ?datecreated <= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 100) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Alkmaar built between 1924 and 1955 and floor size larger than 107.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alkmaar""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1924 && ?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 107) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Alkmaar built later than 1815 earlier than 1970, floor size no smaller than 171 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Alkmaar""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1815 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 171) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Oosthem that built between year 1920 and 1991, floor size bigger than 169 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1920 && ?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 169) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oosthem, building year between 1850 and 1990, floor size larger than 117 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1850 && ?datecreated <= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 117) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oosthem, built between year 1924 and 1998, floor size larger than 192 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1924 && ?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 192) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oosthem built between 1885 and 1978 and floor size larger than 166.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885 && ?datecreated <= 1978). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 166) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oosthem built later than 1864 earlier than 1954, floor size no smaller than 67 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oosthem""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1864 && ?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 67) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Rijswijk (NB) that built between year 1946 and 1969, floor size bigger than 197 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946 && ?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 197) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Rijswijk (NB), building year between 1814 and 1976, floor size larger than 139 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 139) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Rijswijk (NB), built between year 1897 and 2017, floor size larger than 78 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897 && ?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 78) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Rijswijk (NB) built between 1865 and 1958 and floor size larger than 102.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865 && ?datecreated <= 1958). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 102) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Rijswijk (NB) built later than 1901 earlier than 2019, floor size no smaller than 50 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rijswijk (NB)""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1901 && ?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 50) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Zuiderwoude that built between year 1927 and 1969, floor size bigger than 50 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuiderwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1927 && ?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 50) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zuiderwoude, building year between 1803 and 1955, floor size larger than 167 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuiderwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1803 && ?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 167) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Zuiderwoude, built between year 1812 and 1998, floor size larger than 105 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuiderwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1812 && ?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 105) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zuiderwoude built between 1932 and 2005 and floor size larger than 116.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuiderwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1932 && ?datecreated <= 2005). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 116) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zuiderwoude built later than 1895 earlier than 1976, floor size no smaller than 79 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zuiderwoude""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1895 && ?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 79) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Bussum that built between year 1877 and 1978, floor size bigger than 80 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bussum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1877 && ?datecreated <= 1978). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 80) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bussum, building year between 1876 and 1973, floor size larger than 54 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bussum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876 && ?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 54) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bussum, built between year 1885 and 1984, floor size larger than 162 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bussum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885 && ?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 162) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bussum built between 1819 and 1954 and floor size larger than 198.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bussum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1819 && ?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 198) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bussum built later than 1840 earlier than 1956, floor size no smaller than 56 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bussum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840 && ?datecreated <= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 56) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of De Kiel that built between year 1906 and 1965, floor size smaller than 280 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Kiel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1906 && ?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 280) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in De Kiel, building year between 1839 and 2008, floor size smaller than 205 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Kiel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1839 && ?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 205) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in De Kiel, built between year 1925 and 1990, floor size smaller than 218 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Kiel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925 && ?datecreated <= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 218) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in De Kiel with date created between 1923 and 1967, floor size no bigger than 483 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Kiel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1923 && ?datecreated <= 1967). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 483) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in De Kiel with built later than 1883 earlier than 1963 and floor size smaller than 330 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""De Kiel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1883 && ?datecreated <= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 330) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Cromvoirt that built between year 1944 and 1950, floor size smaller than 247 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cromvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1944 && ?datecreated <= 1950). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 247) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Cromvoirt, building year between 1893 and 1970, floor size smaller than 438 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cromvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 438) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Cromvoirt, built between year 1840 and 1987, floor size smaller than 449 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cromvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840 && ?datecreated <= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 449) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Cromvoirt with date created between 1804 and 1965, floor size no bigger than 426 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cromvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1804 && ?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 426) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Cromvoirt with built later than 1925 earlier than 1966 and floor size smaller than 221 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Cromvoirt""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1925 && ?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 221) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Zwiggelte that built between year 1833 and 2021, floor size smaller than 364 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1833 && ?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 364) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zwiggelte, building year between 1917 and 2019, floor size smaller than 464 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1917 && ?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 464) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Zwiggelte, built between year 1858 and 1969, floor size smaller than 259 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1858 && ?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 259) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zwiggelte with date created between 1858 and 2008, floor size no bigger than 413 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1858 && ?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 413) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zwiggelte with built later than 1945 earlier than 2002 and floor size smaller than 486 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwiggelte""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945 && ?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 486) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Paterswolde that built between year 1836 and 1965, floor size smaller than 315 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Paterswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1836 && ?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 315) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Paterswolde, building year between 1900 and 2003, floor size smaller than 323 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Paterswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1900 && ?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 323) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Paterswolde, built between year 1892 and 2008, floor size smaller than 484 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Paterswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1892 && ?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 484) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Paterswolde with date created between 1872 and 2019, floor size no bigger than 302 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Paterswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1872 && ?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 302) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Paterswolde with built later than 1929 earlier than 1970 and floor size smaller than 291 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Paterswolde""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1929 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 291) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Bleiswijk that built between year 1949 and 1954, floor size smaller than 470 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleiswijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949 && ?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 470) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bleiswijk, building year between 1931 and 2017, floor size smaller than 465 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleiswijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1931 && ?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 465) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bleiswijk, built between year 1800 and 2011, floor size smaller than 483 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleiswijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800 && ?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 483) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bleiswijk with date created between 1816 and 1970, floor size no bigger than 459 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleiswijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 459) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bleiswijk with built later than 1821 earlier than 1969 and floor size smaller than 439 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bleiswijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1821 && ?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 439) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Ryptsjerk that built between year 1814 and 1990, floor size smaller than 325 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ryptsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814 && ?datecreated <= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 325) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ryptsjerk, building year between 1903 and 1950, floor size smaller than 259 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ryptsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1903 && ?datecreated <= 1950). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 259) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Ryptsjerk, built between year 1931 and 1995, floor size smaller than 234 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ryptsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1931 && ?datecreated <= 1995). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 234) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ryptsjerk with date created between 1812 and 1975, floor size no bigger than 310 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ryptsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1812 && ?datecreated <= 1975). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 310) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Ryptsjerk with built later than 1888 earlier than 1968 and floor size smaller than 288 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Ryptsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1888 && ?datecreated <= 1968). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 288) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Zwartemeer that built between year 1838 and 1970, floor size smaller than 497 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwartemeer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 497) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zwartemeer, building year between 1893 and 1965, floor size smaller than 383 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwartemeer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1893 && ?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 383) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Zwartemeer, built between year 1816 and 2003, floor size smaller than 375 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwartemeer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816 && ?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 375) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zwartemeer with date created between 1882 and 1953, floor size no bigger than 394 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwartemeer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1882 && ?datecreated <= 1953). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 394) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Zwartemeer with built later than 1869 earlier than 2007 and floor size smaller than 244 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Zwartemeer""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1869 && ?datecreated <= 2007). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 244) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Esbeek that built between year 1915 and 1970, floor size smaller than 449 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1915 && ?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 449) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Esbeek, building year between 1898 and 2007, floor size smaller than 312 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1898 && ?datecreated <= 2007). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 312) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Esbeek, built between year 1921 and 2015, floor size smaller than 201 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1921 && ?datecreated <= 2015). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 201) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Esbeek with date created between 1937 and 1999, floor size no bigger than 310 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1937 && ?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 310) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Esbeek with built later than 1933 earlier than 2012 and floor size smaller than 367 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Esbeek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1933 && ?datecreated <= 2012). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 367) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Veessen that built between year 1844 and 1994, floor size smaller than 449 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1844 && ?datecreated <= 1994). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 449) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Veessen, building year between 1841 and 1968, floor size smaller than 410 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1841 && ?datecreated <= 1968). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 410) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Veessen, built between year 1814 and 1957, floor size smaller than 423 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814 && ?datecreated <= 1957). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 423) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Veessen with date created between 1878 and 2003, floor size no bigger than 274 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1878 && ?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 274) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Veessen with built later than 1926 earlier than 1959 and floor size smaller than 260 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Veessen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1926 && ?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 260) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Tienhoven aan de Lek that built between year 1935 and 1988, floor size smaller than 265 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tienhoven aan de Lek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935 && ?datecreated <= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 265) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Tienhoven aan de Lek, building year between 1924 and 1974, floor size smaller than 239 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tienhoven aan de Lek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1924 && ?datecreated <= 1974). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 239) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show registered places in Tienhoven aan de Lek, built between year 1908 and 2002, floor size smaller than 413 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tienhoven aan de Lek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1908 && ?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 413) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Tienhoven aan de Lek with date created between 1803 and 1967, floor size no bigger than 432 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tienhoven aan de Lek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1803 && ?datecreated <= 1967). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 432) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Tienhoven aan de Lek with built later than 1945 earlier than 2002 and floor size smaller than 416 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tienhoven aan de Lek""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945 && ?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 416) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Melissant that built before 1995, floor size bigger than 111 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melissant""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 111) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Melissant, building year before 2008, floor size bigger than 114 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melissant""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 114) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Melissant, built before year 1952, floor size bigger than 194 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melissant""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 194) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Melissant created before 1985 and floor size larger than 100 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melissant""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 100) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Melissant built earlier than 1983, floor size no smaller than 167 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melissant""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1983). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 167) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
List addresses in Melissant built earlier than 2009, floor size no smaller than 56 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Melissant""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 56) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hollum that built before 1985, floor size bigger than 60 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 60) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hollum, building year before 1981, floor size bigger than 85 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 85) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Hollum, built before year 1999, floor size bigger than 139 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 139) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hollum created before 1991 and floor size larger than 193 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 193) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hollum built earlier than 1955, floor size no smaller than 103 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 103) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
List addresses in Hollum built earlier than 2000, floor size no smaller than 140 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hollum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 140) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Lathum that built before 1952, floor size bigger than 162 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lathum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 162) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lathum, building year before 1987, floor size bigger than 104 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lathum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 104) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lathum, built before year 2019, floor size bigger than 52 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lathum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 52) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lathum created before 1984 and floor size larger than 105 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lathum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 105) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lathum built earlier than 1988, floor size no smaller than 139 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lathum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 139) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
List addresses in Lathum built earlier than 1961, floor size no smaller than 165 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lathum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 165) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hantumeruitburen that built before 1956, floor size bigger than 73 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hantumeruitburen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 73) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hantumeruitburen, building year before 2018, floor size bigger than 164 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hantumeruitburen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2018). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 164) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Hantumeruitburen, built before year 1954, floor size bigger than 127 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hantumeruitburen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 127) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hantumeruitburen created before 2021 and floor size larger than 164 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hantumeruitburen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 164) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Hantumeruitburen built earlier than 1969, floor size no smaller than 97 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hantumeruitburen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 97) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List addresses in Hantumeruitburen built earlier than 2013, floor size no smaller than 156 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hantumeruitburen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 156) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Yerseke that built before 1964, floor size bigger than 57 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yerseke""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 57) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Yerseke, building year before 1978, floor size bigger than 142 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yerseke""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 142) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Yerseke, built before year 1996, floor size bigger than 154 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yerseke""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 154) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Yerseke created before 1984 and floor size larger than 84 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yerseke""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 84) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Yerseke built earlier than 1959, floor size no smaller than 79 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yerseke""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 79) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
List addresses in Yerseke built earlier than 1985, floor size no smaller than 166 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Yerseke""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1985). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 166) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Bruntinge that built before 1998, floor size bigger than 131 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruntinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 131) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bruntinge, building year before 2002, floor size bigger than 86 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruntinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 86) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Bruntinge, built before year 1972, floor size bigger than 94 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruntinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 94) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bruntinge created before 1953 and floor size larger than 177 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruntinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1953). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 177) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Bruntinge built earlier than 1973, floor size no smaller than 101 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruntinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 101) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List addresses in Bruntinge built earlier than 1988, floor size no smaller than 51 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bruntinge""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 51) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Benschop that built before 1967, floor size bigger than 138 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benschop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 138) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Benschop, building year before 1950, floor size bigger than 106 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benschop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1950). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 106) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Benschop, built before year 2015, floor size bigger than 110 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benschop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2015). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 110) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Benschop created before 2012 and floor size larger than 59 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benschop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 59) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Benschop built earlier than 1972, floor size no smaller than 65 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benschop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 65) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List addresses in Benschop built earlier than 1976, floor size no smaller than 117 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Benschop""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 117) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Stoutenburg that built before 1997, floor size bigger than 81 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 81) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Stoutenburg, building year before 1965, floor size bigger than 157 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 157) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Stoutenburg, built before year 1986, floor size bigger than 84 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 84) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Stoutenburg created before 1958 and floor size larger than 153 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 153) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Stoutenburg built earlier than 2009, floor size no smaller than 156 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 156) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building
Place, Address, Postal Address
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List addresses in Stoutenburg built earlier than 1964, floor size no smaller than 92 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stoutenburg""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1964). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 92) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Moddergat that built before 2008, floor size bigger than 192 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moddergat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 192) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Moddergat, building year before 1952, floor size bigger than 137 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moddergat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 137) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Moddergat, built before year 2001, floor size bigger than 175 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moddergat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 175) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Moddergat created before 2019 and floor size larger than 70 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moddergat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 70) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Moddergat built earlier than 1973, floor size no smaller than 101 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moddergat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 101) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List addresses in Moddergat built earlier than 1972, floor size no smaller than 130 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Moddergat""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 130) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Tzummarum that built before 1999, floor size bigger than 83 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzummarum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 83) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Tzummarum, building year before 2001, floor size bigger than 65 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzummarum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2001). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 65) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Tzummarum, built before year 2005, floor size bigger than 50 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzummarum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 50) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Tzummarum created before 1989 and floor size larger than 132 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzummarum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 132) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Tzummarum built earlier than 1995, floor size no smaller than 98 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzummarum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 98) }"
"Suppose we have a graph pattern:
Place, Address, Postal Address
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, additionalType, Building


Now we have a natural language question: 
List addresses in Tzummarum built earlier than 2020, floor size no smaller than 197 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Tzummarum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 197) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Oudeschoot that built later than 1800, floor size smaller than 470 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudeschoot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1800). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 470) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oudeschoot, building year after 1828, floor size no larger than 274 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudeschoot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1828). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 274) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oudeschoot, built after year 1897, floor size smaller than 352 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudeschoot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 352) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oudeschoot that created after 1946 and floor size smaller than 361 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudeschoot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1946). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 361) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oudeschoot built later than 1855 with floor size no bigger than 280.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oudeschoot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1855). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 280) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Nes that built later than 1945, floor size smaller than 215 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1945). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 215) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nes, building year after 1803, floor size no larger than 444 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1803). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 444) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Nes, built after year 1871, floor size smaller than 340 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1871). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 340) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nes that created after 1847 and floor size smaller than 279 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1847). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 279) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nes built later than 1949 with floor size no bigger than 484.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nes""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1949). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 484) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Stegeren that built later than 1847, floor size smaller than 312 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stegeren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1847). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 312) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Stegeren, building year after 1900, floor size no larger than 363 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stegeren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1900). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 363) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Stegeren, built after year 1860, floor size smaller than 276 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stegeren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1860). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 276) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Stegeren that created after 1814 and floor size smaller than 285 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stegeren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1814). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 285) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Stegeren built later than 1846 with floor size no bigger than 449.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Stegeren""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1846). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 449) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Espel that built later than 1876, floor size smaller than 248 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Espel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 248) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Espel, building year after 1829, floor size no larger than 498 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Espel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1829). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 498) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Espel, built after year 1897, floor size smaller than 397 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Espel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1897). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 397) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Espel that created after 1835 and floor size smaller than 317 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Espel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1835). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 317) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Espel built later than 1935 with floor size no bigger than 434.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Espel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1935). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 434) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Steenwijk that built later than 1859, floor size smaller than 388 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1859). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 388) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Steenwijk, building year after 1861, floor size no larger than 454 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1861). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 454) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Steenwijk, built after year 1873, floor size smaller than 358 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1873). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 358) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Steenwijk that created after 1908 and floor size smaller than 367 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1908). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 367) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Steenwijk built later than 1838 with floor size no bigger than 439.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Steenwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 439) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Heinenoord that built later than 1888, floor size smaller than 370 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1888). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 370) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Heinenoord, building year after 1846, floor size no larger than 448 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1846). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 448) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Heinenoord, built after year 1840, floor size smaller than 369 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1840). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 369) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Heinenoord that created after 1865 and floor size smaller than 457 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 457) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Heinenoord built later than 1850 with floor size no bigger than 288.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Heinenoord""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1850). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 288) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Gytsjerk that built later than 1921, floor size smaller than 341 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gytsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1921). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 341) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gytsjerk, building year after 1862, floor size no larger than 295 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gytsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1862). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 295) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Gytsjerk, built after year 1876, floor size smaller than 289 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gytsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1876). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 289) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gytsjerk that created after 1873 and floor size smaller than 334 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gytsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1873). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 334) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gytsjerk built later than 1936 with floor size no bigger than 395.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gytsjerk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1936). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 395) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Mantgum that built later than 1806, floor size smaller than 232 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1806). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 232) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Mantgum, building year after 1930, floor size no larger than 466 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1930). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 466) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Mantgum, built after year 1911, floor size smaller than 416 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1911). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 416) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Mantgum that created after 1830 and floor size smaller than 336 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1830). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 336) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Mantgum built later than 1857 with floor size no bigger than 424.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mantgum""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1857). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 424) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Rhenen that built later than 1816, floor size smaller than 244 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhenen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 244) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Rhenen, building year after 1885, floor size no larger than 395 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhenen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1885). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 395) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Rhenen, built after year 1865, floor size smaller than 458 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhenen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1865). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 458) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Rhenen that created after 1914 and floor size smaller than 366 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhenen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1914). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 366) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Rhenen built later than 1816 with floor size no bigger than 279.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rhenen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1816). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 279) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Lioessens that built later than 1934, floor size smaller than 344 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lioessens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1934). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 344) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lioessens, building year after 1928, floor size no larger than 256 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lioessens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1928). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 256) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lioessens, built after year 1838, floor size smaller than 458 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lioessens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1838). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 458) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lioessens that created after 1868 and floor size smaller than 293 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lioessens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1868). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 293) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lioessens built later than 1869 with floor size no bigger than 235.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lioessens""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1869). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 235) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Sint Anthonis that built earlier than 2002, floor size smaller than 347 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Anthonis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 347) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Sint Anthonis, building year before 1961, floor size smaller than 442 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Anthonis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 442) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show registered places in Sint Anthonis, built earlier than year 2003, floor size smaller than 265 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Anthonis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 265) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Sint Anthonis created before 2019 and floor size smaller than 410 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Anthonis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 410) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Give all places in Sint Anthonis built earlier than 1963, floor size no bigger than 416 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sint Anthonis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 416) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Lierderholthuis that built earlier than 1980, floor size smaller than 318 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierderholthuis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1980). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 318) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lierderholthuis, building year before 1963, floor size smaller than 219 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierderholthuis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 219) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Lierderholthuis, built earlier than year 1997, floor size smaller than 240 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierderholthuis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 240) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lierderholthuis created before 2005 and floor size smaller than 386 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierderholthuis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 386) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Lierderholthuis built earlier than 1994, floor size no bigger than 241 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Lierderholthuis""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 241) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Arcen that built earlier than 2000, floor size smaller than 308 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arcen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 308) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Arcen, building year before 2002, floor size smaller than 267 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arcen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 267) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Arcen, built earlier than year 1956, floor size smaller than 345 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arcen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 345) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Arcen created before 1958 and floor size smaller than 443 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arcen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1958). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 443) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Arcen built earlier than 2011, floor size no bigger than 355 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Arcen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2011). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 355) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Gramsbergen that built earlier than 2014, floor size smaller than 217 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gramsbergen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 217) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gramsbergen, building year before 1987, floor size smaller than 474 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gramsbergen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 474) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Gramsbergen, built earlier than year 2013, floor size smaller than 209 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gramsbergen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 209) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gramsbergen created before 1984 and floor size smaller than 471 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gramsbergen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 471) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Gramsbergen built earlier than 1954, floor size no bigger than 337 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Gramsbergen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 337) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Sprundel that built earlier than 2019, floor size smaller than 379 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sprundel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 379) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Sprundel, building year before 1957, floor size smaller than 367 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sprundel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1957). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 367) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Sprundel, built earlier than year 1995, floor size smaller than 353 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sprundel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1995). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 353) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Sprundel created before 1969 and floor size smaller than 428 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sprundel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 428) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Sprundel built earlier than 1963, floor size no bigger than 486 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Sprundel""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 486) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Kerk-Avezaath that built earlier than 1996, floor size smaller than 473 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerk-Avezaath""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1996). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 473) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Kerk-Avezaath, building year before 1960, floor size smaller than 328 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerk-Avezaath""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 328) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Kerk-Avezaath, built earlier than year 1994, floor size smaller than 246 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerk-Avezaath""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 246) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Kerk-Avezaath created before 1994 and floor size smaller than 253 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerk-Avezaath""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 253) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Kerk-Avezaath built earlier than 1968, floor size no bigger than 342 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kerk-Avezaath""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1968). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 342) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Grou that built earlier than 1961, floor size smaller than 250 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Grou""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 250) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Grou, building year before 2000, floor size smaller than 336 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Grou""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 336) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Grou, built earlier than year 1961, floor size smaller than 270 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Grou""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 270) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Grou created before 1970 and floor size smaller than 491 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Grou""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 491) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Grou built earlier than 1978, floor size no bigger than 371 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Grou""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 371) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Godlinze that built earlier than 1971, floor size smaller than 443 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Godlinze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 443) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Godlinze, building year before 1954, floor size smaller than 320 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Godlinze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 320) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Godlinze, built earlier than year 1966, floor size smaller than 410 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Godlinze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 410) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Godlinze created before 1998 and floor size smaller than 282 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Godlinze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 282) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Godlinze built earlier than 1975, floor size no bigger than 354 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Godlinze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1975). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 354) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Nijetrijne that built earlier than 1993, floor size smaller than 432 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijetrijne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 432) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nijetrijne, building year before 1959, floor size smaller than 221 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijetrijne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 221) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Nijetrijne, built earlier than year 1978, floor size smaller than 279 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijetrijne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1978). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 279) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nijetrijne created before 1997 and floor size smaller than 354 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijetrijne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 354) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nijetrijne built earlier than 1986, floor size no bigger than 403 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nijetrijne""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 403) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Meterik that built earlier than 1981, floor size smaller than 294 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meterik""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 294) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Meterik, building year before 2014, floor size smaller than 274 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meterik""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2014). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 274) }"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Meterik, built earlier than year 2000, floor size smaller than 232 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meterik""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2000). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 232) }"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Meterik created before 2002 and floor size smaller than 423 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meterik""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 423) }"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Meterik built earlier than 2009, floor size no bigger than 352 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Meterik""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2009). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 352) }"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Nieuw Heeten that built earlier than 2020, floor size smaller than 296 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Heeten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 296) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nieuw Heeten, building year before 1960, floor size smaller than 363 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Heeten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 363) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Nieuw Heeten, built earlier than year 1991, floor size smaller than 206 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Heeten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 206) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, dateCreated, date Created
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nieuw Heeten created before 1967 and floor size smaller than 485 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Heeten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1967). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 485) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nieuw Heeten built earlier than 2008, floor size no bigger than 497 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nieuw Heeten""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 497) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Kapellebrug that built earlier than 1968, floor size smaller than 414 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kapellebrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1968). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 414) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Kapellebrug, building year before 1969, floor size smaller than 462 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kapellebrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 462) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Kapellebrug, built earlier than year 1971, floor size smaller than 331 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kapellebrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 331) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Kapellebrug created before 1999 and floor size smaller than 272 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kapellebrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 272) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Kapellebrug built earlier than 2005, floor size no bigger than 370 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Kapellebrug""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 370) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Didam that built earlier than 1959, floor size smaller than 382 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Didam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 382) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Didam, building year before 1991, floor size smaller than 237 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Didam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1991). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 237) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Didam, built earlier than year 2005, floor size smaller than 200 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Didam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2005). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 200) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Didam created before 2015 and floor size smaller than 205 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Didam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2015). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 205) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Didam built earlier than 1966, floor size no bigger than 438 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Didam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 438) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of 's-Gravenzande that built earlier than 1994, floor size smaller than 487 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1994). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 487) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in 's-Gravenzande, building year before 2019, floor size smaller than 336 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 336) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in 's-Gravenzande, built earlier than year 1952, floor size smaller than 286 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 286) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in 's-Gravenzande created before 1976 and floor size smaller than 444 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 444) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Give all places in 's-Gravenzande built earlier than 1993, floor size no bigger than 247 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""'s-Gravenzande""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 247) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Warns that built earlier than 1993, floor size smaller than 307 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warns""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1993). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 307) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Give all places in Warns, building year before 1966, floor size smaller than 440 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warns""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 440) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Warns, built earlier than year 1986, floor size smaller than 318 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warns""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1986). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 318) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Warns created before 2013 and floor size smaller than 282 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warns""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 282) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Give all places in Warns built earlier than 1988, floor size no bigger than 217 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Warns""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 217) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Landgraaf that built earlier than 2012, floor size smaller than 207 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Landgraaf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2012). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 207) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Landgraaf, building year before 1981, floor size smaller than 259 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Landgraaf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 259) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Landgraaf, built earlier than year 1959, floor size smaller than 315 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Landgraaf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 315) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Landgraaf created before 1965 and floor size smaller than 267 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Landgraaf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 267) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Landgraaf built earlier than 1962, floor size no bigger than 282 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Landgraaf""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1962). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 282) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Bern that built earlier than 2019, floor size smaller than 487 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bern""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2019). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 487) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Bern, building year before 1961, floor size smaller than 302 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bern""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 302) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Bern, built earlier than year 1963, floor size smaller than 465 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bern""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 465) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Bern created before 2008 and floor size smaller than 293 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bern""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2008). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 293) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Bern built earlier than 1998, floor size no bigger than 235 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Bern""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 235) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Beemte Broekland that built earlier than 1977, floor size smaller than 275 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beemte Broekland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1977). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 275) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Beemte Broekland, building year before 1960, floor size smaller than 482 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beemte Broekland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1960). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 482) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Beemte Broekland, built earlier than year 1952, floor size smaller than 461 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beemte Broekland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1952). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 461) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Beemte Broekland created before 1979 and floor size smaller than 400 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beemte Broekland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1979). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 400) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Beemte Broekland built earlier than 1998, floor size no bigger than 419 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Beemte Broekland""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1998). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 419) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Onderdendam that built earlier than 1987, floor size smaller than 333 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Onderdendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 333) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Onderdendam, building year before 1956, floor size smaller than 391 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Onderdendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 391) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Onderdendam, built earlier than year 2017, floor size smaller than 242 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Onderdendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 242) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Onderdendam created before 2020 and floor size smaller than 321 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Onderdendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2020). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 321) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Onderdendam built earlier than 1982, floor size no bigger than 342 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Onderdendam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1982). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 342) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Dinxperlo that built earlier than 1989, floor size smaller than 372 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dinxperlo""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1989). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 372) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Dinxperlo, building year before 2021, floor size smaller than 481 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dinxperlo""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 481) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Dinxperlo, built earlier than year 1973, floor size smaller than 429 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dinxperlo""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 429) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Dinxperlo created before 1981 and floor size smaller than 296 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dinxperlo""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1981). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 296) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Place, floorSize, floor Size
Place, additionalType, Building
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Dinxperlo built earlier than 1971, floor size no bigger than 332 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Dinxperlo""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated <= 1971). ?address schema:floorSize ?floorsize. FILTER(?floorsize <= 332) } ORDER BY ?datecreated"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Oirschot that built later than 1995, floor size larger than 236 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oirschot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1995). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 236) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Oirschot, building year after 1997, floor size bigger than 327 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oirschot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 327) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Oirschot, built later than year 1973, floor size larger than 355 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oirschot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1973). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 355) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Oirschot created before 1997 and floor size larger than 338 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oirschot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1997). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 338) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Oirschot built after 2013, floor size no smaller than 377 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Oirschot""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 377) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Rheeze that built later than 1972, floor size larger than 324 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rheeze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 324) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Rheeze, building year after 1984, floor size bigger than 207 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rheeze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1984). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 207) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Rheeze, built later than year 1977, floor size larger than 259 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rheeze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1977). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 259) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Rheeze created before 1963 and floor size larger than 303 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rheeze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1963). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 303) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Rheeze built after 2010, floor size no smaller than 294 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Rheeze""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2010). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 294) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show addresses of Koolwijk that built later than 1976, floor size larger than 492 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koolwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1976). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 492) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Koolwijk, building year after 2004, floor size bigger than 283 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koolwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2004). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 283) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Koolwijk, built later than year 1983, floor size larger than 225 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koolwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1983). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 225) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Koolwijk created before 1951 and floor size larger than 282 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koolwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1951). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 282) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Koolwijk built after 1970, floor size no smaller than 408 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Koolwijk""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1970). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 408) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Vierakker that built later than 1966, floor size larger than 360 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierakker""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 360) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Vierakker, building year after 1951, floor size bigger than 253 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierakker""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1951). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 253) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Vierakker, built later than year 1955, floor size larger than 211 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierakker""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1955). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 211) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Vierakker created before 1999 and floor size larger than 313 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierakker""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1999). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 313) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Vierakker built after 1992, floor size no smaller than 323 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vierakker""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1992). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 323) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Mildam that built later than 1988, floor size larger than 471 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mildam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1988). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 471) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Mildam, building year after 1969, floor size bigger than 321 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mildam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1969). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 321) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Mildam, built later than year 2021, floor size larger than 432 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mildam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2021). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 432) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Mildam created before 1990 and floor size larger than 330 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mildam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1990). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 330) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Mildam built after 1957, floor size no smaller than 267 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Mildam""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1957). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 267) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Hekelingen that built later than 2002, floor size larger than 362 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hekelingen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2002). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 362) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Hekelingen, building year after 2003, floor size bigger than 441 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hekelingen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2003). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 441) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Hekelingen, built later than year 1972, floor size larger than 206 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hekelingen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 206) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Hekelingen created before 1987 and floor size larger than 435 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hekelingen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1987). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 435) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Hekelingen built after 2014, floor size no smaller than 411 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Hekelingen""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2014). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 411) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Vasse that built later than 1956, floor size larger than 399 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vasse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 399) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Vasse, building year after 1954, floor size bigger than 246 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vasse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1954). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 246) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Vasse, built later than year 1961, floor size larger than 220 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vasse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 220) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Vasse created before 1959 and floor size larger than 495 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vasse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 495) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Vasse built after 2017, floor size no smaller than 247 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Vasse""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2017). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 247) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, floorSize, floor Size
Place, additionalType, Building


Now we have a natural language question: 
Show addresses of Westkapelle that built later than 1959, floor size larger than 233 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1959). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 233) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give me all places in Westkapelle, building year after 1950, floor size bigger than 276 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1950). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 276) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Place, Address, Postal Address


Now we have a natural language question: 
Show registered places in Westkapelle, built later than year 1966, floor size larger than 310 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1966). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 310) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
List places in Westkapelle created before 1961 and floor size larger than 338 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1961). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 338) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place
Place, Address, Postal Address


Now we have a natural language question: 
Give all places in Westkapelle built after 1965, floor size no smaller than 493 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westkapelle""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1965). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 493) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Nagele that built later than 2012, floor size larger than 384 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nagele""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2012). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 384) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Nagele, building year after 2010, floor size bigger than 352 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nagele""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2010). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 352) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Nagele, built later than year 1968, floor size larger than 354 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nagele""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1968). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 354) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Nagele created before 1975 and floor size larger than 263 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nagele""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1975). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 263) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Nagele built after 1967, floor size no smaller than 252 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Nagele""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1967). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 252) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Postal Address, StreetAddress, Street Address
Place, Address, Postal Address
Place, additionalType, Building
Administrative Area, containsPlace, Place
Place, floorSize, floor Size


Now we have a natural language question: 
Show addresses of Westeremden that built later than 2013, floor size larger than 334 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 334) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give me all places in Westeremden, building year after 2013, floor size bigger than 453 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 2013). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 453) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Show registered places in Westeremden, built later than year 1972, floor size larger than 489 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1972). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 489) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, dateCreated, date Created
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
List places in Westeremden created before 1989 and floor size larger than 423 m2.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1989). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 423) } ORDER BY DESC(?datecreated)"
"Suppose we have a graph pattern:
Place, additionalType, Building
Place, floorSize, floor Size
Administrative Area, containsPlace, Place


Now we have a natural language question: 
Give all places in Westeremden built after 1956, floor size no smaller than 207 squared meters.

The corresponding sparql query is:
SELECT DISTINCT ?address ?datecreated ?floorsize WHERE {?city rdf:type schema:AdministrativeArea. ?city schema:name ""Westeremden""@nl. ?city schema:containsPlace ?address. ?address schema:dateCreated ?datecreated. FILTER(?datecreated >= 1956). ?address schema:floorSize ?floorsize. FILTER(?floorsize >= 207) } ORDER BY DESC(?datecreated)"
